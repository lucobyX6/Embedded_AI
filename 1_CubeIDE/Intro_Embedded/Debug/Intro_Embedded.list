
Intro_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b304  0800bec0  0800bec0  0000cec0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171c4  080171c4  00019980  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080171c4  080171c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080171cc  080171cc  00019980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080171cc  080171cc  000181cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080171d0  080171d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000980  20000000  080171d4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000980  08017b54  00019980  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200016d8  08017b54  0001a6d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019980  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203c1  00000000  00000000  000199b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f7  00000000  00000000  00039d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  0003de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001400  00000000  00000000  0003f840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036662  00000000  00000000  00040c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002194e  00000000  00000000  000772a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ead6  00000000  00000000  00098bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001d76c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007704  00000000  00000000  001d774c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bc  00000000  00000000  001dee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000980 	.word	0x20000980
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800be98 	.word	0x0800be98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000984 	.word	0x20000984
 80001fc:	0800be98 	.word	0x0800be98

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f001 f951 	bl	8001876 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f819 	bl	800060a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 faa2 	bl	8000b20 <MX_GPIO_Init>
  MX_FMC_Init();
 80005dc:	f000 fa3a 	bl	8000a54 <MX_FMC_Init>
  MX_I2C1_Init();
 80005e0:	f000 f866 	bl	80006b0 <MX_I2C1_Init>
  MX_SAI1_Init();
 80005e4:	f000 f8a4 	bl	8000730 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80005e8:	f000 f90a 	bl	8000800 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f96a 	bl	80008c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f9b4 	bl	8000960 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f9fe 	bl	80009f8 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80005fc:	f008 fad0 	bl	8008ba0 <MX_X_CUBE_AI_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000600:	f008 fadc 	bl	8008bbc <MX_X_CUBE_AI_Process>
 8000604:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}

0800060a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b096      	sub	sp, #88	@ 0x58
 800060e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2244      	movs	r2, #68	@ 0x44
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f00a fe05 	bl	800b228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800062c:	2000      	movs	r0, #0
 800062e:	f001 fed1 	bl	80023d4 <HAL_PWREx_ControlVoltageScaling>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000638:	f000 fc90 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800063c:	2330      	movs	r3, #48	@ 0x30
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064c:	2360      	movs	r3, #96	@ 0x60
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800065c:	233c      	movs	r3, #60	@ 0x3c
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000660:	2305      	movs	r3, #5
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4618      	mov	r0, r3
 8000672:	f001 ff73 	bl	800255c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800067c:	f000 fc6e 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fb79 	bl	8002d90 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a4:	f000 fc5a 	bl	8000f5c <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	@ 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <MX_I2C1_Init+0x78>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <MX_I2C1_Init+0x7c>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006ec:	f001 fbec 	bl	8001ec8 <HAL_I2C_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f6:	f000 fc31 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006fe:	f001 fc7e 	bl	8001ffe <HAL_I2CEx_ConfigAnalogFilter>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 fc28 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800070c:	2100      	movs	r1, #0
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_I2C1_Init+0x74>)
 8000710:	f001 fcc0 	bl	8002094 <HAL_I2CEx_ConfigDigitalFilter>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800071a:	f000 fc1f 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000099c 	.word	0x2000099c
 8000728:	40005400 	.word	0x40005400
 800072c:	307075b1 	.word	0x307075b1

08000730 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000734:	4b2f      	ldr	r3, [pc, #188]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000736:	4a30      	ldr	r2, [pc, #192]	@ (80007f8 <MX_SAI1_Init+0xc8>)
 8000738:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800073a:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000740:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000746:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000748:	2240      	movs	r2, #64	@ 0x40
 800074a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000752:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000754:	2200      	movs	r2, #0
 8000756:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000778:	4a20      	ldr	r2, [pc, #128]	@ (80007fc <MX_SAI1_Init+0xcc>)
 800077a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000788:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800078e:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007ac:	2208      	movs	r2, #8
 80007ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007b0:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_SAI1_Init+0xc4>)
 80007e2:	f004 fb39 	bl	8004e58 <HAL_SAI_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007ec:	f000 fbb6 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200009f0 	.word	0x200009f0
 80007f8:	40015404 	.word	0x40015404
 80007fc:	0002ee00 	.word	0x0002ee00

08000800 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_Init 0 */
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */
  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <MX_SDMMC1_SD_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 8000818:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_SDMMC1_SD_Init+0x44>)
 8000832:	f004 fd29 	bl	8005288 <HAL_SD_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 800083c:	f000 fb8e 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */
  /* USER CODE END SDMMC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000a84 	.word	0x20000a84
 8000848:	50062400 	.word	0x50062400

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_SPI2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000866:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800086a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800087a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000882:	2208      	movs	r2, #8
 8000884:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800089a:	2207      	movs	r2, #7
 800089c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_SPI2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_SPI2_Init+0x74>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_SPI2_Init+0x74>)
 80008ac:	f005 fde3 	bl	8006476 <HAL_SPI_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fb51 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000b04 	.word	0x20000b04
 80008c4:	40003800 	.word	0x40003800

080008c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008ce:	4a23      	ldr	r2, [pc, #140]	@ (800095c <MX_USART2_UART_Init+0x94>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000910:	4811      	ldr	r0, [pc, #68]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 8000912:	f005 fe9b 	bl	800664c <HAL_UART_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 fb1e 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 8000924:	f006 fd8e 	bl	8007444 <HAL_UARTEx_SetTxFifoThreshold>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800092e:	f000 fb15 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 8000936:	f006 fdc3 	bl	80074c0 <HAL_UARTEx_SetRxFifoThreshold>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000940:	f000 fb0c 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_USART2_UART_Init+0x90>)
 8000946:	f006 fd44 	bl	80073d2 <HAL_UARTEx_DisableFifoMode>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000950:	f000 fb04 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000b68 	.word	0x20000b68
 800095c:	40004400 	.word	0x40004400

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	@ (80009f4 <MX_USART3_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009aa:	f005 fe4f 	bl	800664c <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 fad2 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009bc:	f006 fd42 	bl	8007444 <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 fac9 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f006 fd77 	bl	80074c0 <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 fac0 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009de:	f006 fcf8 	bl	80073d2 <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 fab8 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000bfc 	.word	0x20000bfc
 80009f4:	40004800 	.word	0x40004800

080009f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_OTG_FS_Init 0 */
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2206      	movs	r2, #6
 8000a08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	f001 fb76 	bl	800212c <HAL_PCD_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 fa89 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000c90 	.word	0x20000c90

08000a54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */
  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00a fbe1 	bl	800b228 <memset>
  /* USER CODE BEGIN FMC_Init 1 */
  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a68:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000a6c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a70:	4a2a      	ldr	r2, [pc, #168]	@ (8000b1c <MX_FMC_Init+0xc8>)
 8000a72:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a7a:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a86:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a88:	2210      	movs	r2, #16
 8000a8a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a92:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a94:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000abc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ac0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000ada:	230f      	movs	r3, #15
 8000adc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000ade:	230f      	movs	r3, #15
 8000ae0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000ae2:	23ff      	movs	r3, #255	@ 0xff
 8000ae4:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000aea:	230f      	movs	r3, #15
 8000aec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000aee:	2310      	movs	r3, #16
 8000af0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_FMC_Init+0xc4>)
 8000b02:	f005 fd5b 	bl	80065bc <HAL_SRAM_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000b0c:	f000 fa26 	bl	8000f5c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  /* USER CODE END FMC_Init 2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20001174 	.word	0x20001174
 8000b1c:	a0000104 	.word	0xa0000104

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b36:	4bb2      	ldr	r3, [pc, #712]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4ab1      	ldr	r2, [pc, #708]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4baf      	ldr	r3, [pc, #700]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b4a:	623b      	str	r3, [r7, #32]
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4bac      	ldr	r3, [pc, #688]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4aab      	ldr	r2, [pc, #684]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4ba9      	ldr	r3, [pc, #676]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	4ba6      	ldr	r3, [pc, #664]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4aa5      	ldr	r2, [pc, #660]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4ba3      	ldr	r3, [pc, #652]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a9f      	ldr	r2, [pc, #636]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b9d      	ldr	r3, [pc, #628]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b9a      	ldr	r3, [pc, #616]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	4a99      	ldr	r2, [pc, #612]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba2:	4b97      	ldr	r3, [pc, #604]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4b94      	ldr	r3, [pc, #592]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4a93      	ldr	r2, [pc, #588]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4b91      	ldr	r3, [pc, #580]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000bc6:	f001 fcb9 	bl	800253c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	4b8d      	ldr	r3, [pc, #564]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	4a8c      	ldr	r2, [pc, #560]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b87      	ldr	r3, [pc, #540]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4a86      	ldr	r2, [pc, #536]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4b84      	ldr	r3, [pc, #528]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	4b81      	ldr	r3, [pc, #516]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4a80      	ldr	r2, [pc, #512]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4b7e      	ldr	r3, [pc, #504]	@ (8000e00 <MX_GPIO_Init+0x2e0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f244 0114 	movw	r1, #16404	@ 0x4014
 8000c18:	487a      	ldr	r0, [pc, #488]	@ (8000e04 <MX_GPIO_Init+0x2e4>)
 8000c1a:	f001 f93d 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c24:	4878      	ldr	r0, [pc, #480]	@ (8000e08 <MX_GPIO_Init+0x2e8>)
 8000c26:	f001 f937 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2140      	movs	r1, #64	@ 0x40
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f001 f931 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4874      	ldr	r0, [pc, #464]	@ (8000e0c <MX_GPIO_Init+0x2ec>)
 8000c3c:	f001 f92c 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000c40:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c52:	2305      	movs	r3, #5
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	486c      	ldr	r0, [pc, #432]	@ (8000e10 <MX_GPIO_Init+0x2f0>)
 8000c5e:	f000 ff89 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000c62:	f244 0314 	movw	r3, #16404	@ 0x4014
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4862      	ldr	r0, [pc, #392]	@ (8000e04 <MX_GPIO_Init+0x2e4>)
 8000c7c:	f000 ff7a 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c90:	2302      	movs	r3, #2
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	485c      	ldr	r0, [pc, #368]	@ (8000e0c <MX_GPIO_Init+0x2ec>)
 8000c9c:	f000 ff6a 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000ca0:	23b0      	movs	r3, #176	@ 0xb0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <MX_GPIO_Init+0x2f0>)
 8000cbc:	f000 ff5a 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000cc0:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	484d      	ldr	r0, [pc, #308]	@ (8000e14 <MX_GPIO_Init+0x2f4>)
 8000cde:	f000 ff49 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4846      	ldr	r0, [pc, #280]	@ (8000e10 <MX_GPIO_Init+0x2f0>)
 8000cf8:	f000 ff3c 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000cfc:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	483a      	ldr	r0, [pc, #232]	@ (8000e04 <MX_GPIO_Init+0x2e4>)
 8000d1a:	f000 ff2b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d30:	2303      	movs	r3, #3
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4832      	ldr	r0, [pc, #200]	@ (8000e04 <MX_GPIO_Init+0x2e4>)
 8000d3c:	f000 ff1a 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000d40:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000d52:	2305      	movs	r3, #5
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4829      	ldr	r0, [pc, #164]	@ (8000e04 <MX_GPIO_Init+0x2e4>)
 8000d5e:	f000 ff09 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000d62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4823      	ldr	r0, [pc, #140]	@ (8000e08 <MX_GPIO_Init+0x2e8>)
 8000d7c:	f000 fefa 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000d80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d92:	2304      	movs	r3, #4
 8000d94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481d      	ldr	r0, [pc, #116]	@ (8000e14 <MX_GPIO_Init+0x2f4>)
 8000d9e:	f000 fee9 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000da2:	2340      	movs	r3, #64	@ 0x40
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <MX_GPIO_Init+0x2e8>)
 8000db8:	f000 fedc 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000dbc:	2384      	movs	r3, #132	@ 0x84
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <MX_GPIO_Init+0x2e8>)
 8000dd8:	f000 fecc 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dec:	2308      	movs	r3, #8
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_GPIO_Init+0x2e8>)
 8000df8:	f000 febc 	bl	8001b74 <HAL_GPIO_Init>
 8000dfc:	e00c      	b.n	8000e18 <MX_GPIO_Init+0x2f8>
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48001c00 	.word	0x48001c00
 8000e08:	48000800 	.word	0x48000800
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48002000 	.word	0x48002000
 8000e14:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000e18:	2318      	movs	r3, #24
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e1c:	230b      	movs	r3, #11
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4849      	ldr	r0, [pc, #292]	@ (8000f50 <MX_GPIO_Init+0x430>)
 8000e2c:	f000 fea2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000e30:	2381      	movs	r3, #129	@ 0x81
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e34:	230b      	movs	r3, #11
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e46:	f000 fe95 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f000 fe84 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000e6c:	2340      	movs	r3, #64	@ 0x40
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f000 fe75 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea8:	f000 fe64 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000eac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4822      	ldr	r0, [pc, #136]	@ (8000f54 <MX_GPIO_Init+0x434>)
 8000eca:	f000 fe53 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f000 fe42 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4815      	ldr	r0, [pc, #84]	@ (8000f58 <MX_GPIO_Init+0x438>)
 8000f04:	f000 fe36 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480e      	ldr	r0, [pc, #56]	@ (8000f58 <MX_GPIO_Init+0x438>)
 8000f20:	f000 fe28 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f36:	2306      	movs	r3, #6
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_GPIO_Init+0x438>)
 8000f42:	f000 fe17 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	@ 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48001400 	.word	0x48001400
 8000f58:	48000400 	.word	0x48000400

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b2      	sub	sp, #200	@ 0xc8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	229c      	movs	r2, #156	@ 0x9c
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00a f927 	bl	800b228 <memset>
  if(hi2c->Instance==I2C1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a33      	ldr	r2, [pc, #204]	@ (80010ac <HAL_I2C_MspInit+0xf8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d15e      	bne.n	80010a2 <HAL_I2C_MspInit+0xee>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe4:	2340      	movs	r3, #64	@ 0x40
 8000fe6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f987 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ffc:	f7ff ffae 	bl	8000f5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100c:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101c:	4a24      	ldr	r2, [pc, #144]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 800101e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001030:	f001 fa84 	bl	800253c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001034:	2340      	movs	r3, #64	@ 0x40
 8001036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104c:	2304      	movs	r3, #4
 800104e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001056:	4619      	mov	r1, r3
 8001058:	4816      	ldr	r0, [pc, #88]	@ (80010b4 <HAL_I2C_MspInit+0x100>)
 800105a:	f000 fd8b 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001066:	2312      	movs	r3, #18
 8001068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001078:	2304      	movs	r3, #4
 800107a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <HAL_I2C_MspInit+0x104>)
 8001086:	f000 fd75 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 8001090:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001094:	6593      	str	r3, [r2, #88]	@ 0x58
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_I2C_MspInit+0xfc>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010a2:	bf00      	nop
 80010a4:	37c8      	adds	r7, #200	@ 0xc8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40005400 	.word	0x40005400
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48001800 	.word	0x48001800

080010bc <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0b2      	sub	sp, #200	@ 0xc8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	229c      	movs	r2, #156	@ 0x9c
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f00a f8a3 	bl	800b228 <memset>
  if(hsd->Instance==SDMMC1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a33      	ldr	r2, [pc, #204]	@ (80011b4 <HAL_SD_MspInit+0xf8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d15f      	bne.n	80011ac <HAL_SD_MspInit+0xf0>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80010f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80010f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f900 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800110a:	f7ff ff27 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 8001114:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a23      	ldr	r2, [pc, #140]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_SD_MspInit+0xfc>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001156:	2304      	movs	r3, #4
 8001158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800116e:	230c      	movs	r3, #12
 8001170:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001178:	4619      	mov	r1, r3
 800117a:	4810      	ldr	r0, [pc, #64]	@ (80011bc <HAL_SD_MspInit+0x100>)
 800117c:	f000 fcfa 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001180:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800119a:	230c      	movs	r3, #12
 800119c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <HAL_SD_MspInit+0x104>)
 80011a8:	f000 fce4 	bl	8001b74 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80011ac:	bf00      	nop
 80011ae:	37c8      	adds	r7, #200	@ 0xc8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	50062400 	.word	0x50062400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	48000800 	.word	0x48000800

080011c4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a25      	ldr	r2, [pc, #148]	@ (8001278 <HAL_SPI_MspInit+0xb4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d144      	bne.n	8001270 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	4a24      	ldr	r2, [pc, #144]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011fe:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4a18      	ldr	r2, [pc, #96]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_SPI_MspInit+0xb8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123e:	2305      	movs	r3, #5
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	480d      	ldr	r0, [pc, #52]	@ (8001280 <HAL_SPI_MspInit+0xbc>)
 800124a:	f000 fc93 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 800124e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001260:	2305      	movs	r3, #5
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <HAL_SPI_MspInit+0xc0>)
 800126c:	f000 fc82 	bl	8001b74 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40003800 	.word	0x40003800
 800127c:	40021000 	.word	0x40021000
 8001280:	48002000 	.word	0x48002000
 8001284:	48000400 	.word	0x48000400

08001288 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0b4      	sub	sp, #208	@ 0xd0
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	229c      	movs	r2, #156	@ 0x9c
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f009 ffbd 	bl	800b228 <memset>
  if(huart->Instance==USART2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a54      	ldr	r2, [pc, #336]	@ (8001404 <HAL_UART_MspInit+0x17c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d13c      	bne.n	8001332 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 f81d 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff fe44 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <HAL_UART_MspInit+0x180>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001408 <HAL_UART_MspInit+0x180>)
 80012da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012de:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e0:	4b49      	ldr	r3, [pc, #292]	@ (8001408 <HAL_UART_MspInit+0x180>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b46      	ldr	r3, [pc, #280]	@ (8001408 <HAL_UART_MspInit+0x180>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	4a45      	ldr	r2, [pc, #276]	@ (8001408 <HAL_UART_MspInit+0x180>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f8:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <HAL_UART_MspInit+0x180>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001304:	230c      	movs	r3, #12
 8001306:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131c:	2307      	movs	r3, #7
 800131e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132c:	f000 fc22 	bl	8001b74 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001330:	e063      	b.n	80013fa <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a35      	ldr	r2, [pc, #212]	@ (800140c <HAL_UART_MspInit+0x184>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d15e      	bne.n	80013fa <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800133c:	2304      	movs	r3, #4
 800133e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f001 ffdb 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001354:	f7ff fe02 	bl	8000f5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_UART_MspInit+0x180>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135c:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <HAL_UART_MspInit+0x180>)
 800135e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001362:	6593      	str	r3, [r2, #88]	@ 0x58
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <HAL_UART_MspInit+0x180>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <HAL_UART_MspInit+0x180>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <HAL_UART_MspInit+0x180>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_UART_MspInit+0x180>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_UART_MspInit+0x180>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	4a1e      	ldr	r2, [pc, #120]	@ (8001408 <HAL_UART_MspInit+0x180>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001394:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_UART_MspInit+0x180>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80013a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ba:	2307      	movs	r3, #7
 80013bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ca:	f000 fbd3 	bl	8001b74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80013ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <HAL_UART_MspInit+0x188>)
 80013f6:	f000 fbbd 	bl	8001b74 <HAL_GPIO_Init>
}
 80013fa:	bf00      	nop
 80013fc:	37d0      	adds	r7, #208	@ 0xd0
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000
 800140c:	40004800 	.word	0x40004800
 8001410:	48000400 	.word	0x48000400

08001414 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0b2      	sub	sp, #200	@ 0xc8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	229c      	movs	r2, #156	@ 0x9c
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f009 fef7 	bl	800b228 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001442:	d16c      	bne.n	800151e <HAL_PCD_MspInit+0x10a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f001 ff55 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001460:	f7ff fd7c 	bl	8000f5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b30      	ldr	r3, [pc, #192]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	4a2f      	ldr	r2, [pc, #188]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001470:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 800147c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001496:	230a      	movs	r3, #10
 8001498:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f000 fb65 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 80014aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f000 fb54 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d114      	bne.n	800151a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001508:	f001 f808 	bl	800251c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <HAL_PCD_MspInit+0x114>)
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001516:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001518:	e001      	b.n	800151e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800151a:	f000 ffff 	bl	800251c <HAL_PWREx_EnableVddUSB>
}
 800151e:	bf00      	nop
 8001520:	37c8      	adds	r7, #200	@ 0xc8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001540:	4b32      	ldr	r3, [pc, #200]	@ (800160c <HAL_FMC_MspInit+0xe0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d15d      	bne.n	8001604 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001548:	4b30      	ldr	r3, [pc, #192]	@ (800160c <HAL_FMC_MspInit+0xe0>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800154e:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <HAL_FMC_MspInit+0xe4>)
 8001550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001552:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <HAL_FMC_MspInit+0xe4>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6513      	str	r3, [r2, #80]	@ 0x50
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_FMC_MspInit+0xe4>)
 800155c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001566:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 800156a:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001578:	230c      	movs	r3, #12
 800157a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4824      	ldr	r0, [pc, #144]	@ (8001614 <HAL_FMC_MspInit+0xe8>)
 8001582:	f000 faf7 	bl	8001b74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001586:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 800158a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	481d      	ldr	r0, [pc, #116]	@ (8001618 <HAL_FMC_MspInit+0xec>)
 80015a2:	f000 fae7 	bl	8001b74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b6:	230c      	movs	r3, #12
 80015b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4817      	ldr	r0, [pc, #92]	@ (800161c <HAL_FMC_MspInit+0xf0>)
 80015c0:	f000 fad8 	bl	8001b74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80015c4:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 80015c8:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d6:	230c      	movs	r3, #12
 80015d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4810      	ldr	r0, [pc, #64]	@ (8001620 <HAL_FMC_MspInit+0xf4>)
 80015e0:	f000 fac8 	bl	8001b74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80015e4:	233f      	movs	r3, #63	@ 0x3f
 80015e6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f4:	230c      	movs	r3, #12
 80015f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <HAL_FMC_MspInit+0xf8>)
 80015fe:	f000 fab9 	bl	8001b74 <HAL_GPIO_Init>
 8001602:	e000      	b.n	8001606 <HAL_FMC_MspInit+0xda>
    return;
 8001604:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200011c4 	.word	0x200011c4
 8001610:	40021000 	.word	0x40021000
 8001614:	48001000 	.word	0x48001000
 8001618:	48000c00 	.word	0x48000c00
 800161c:	48000400 	.word	0x48000400
 8001620:	48001400 	.word	0x48001400
 8001624:	48001800 	.word	0x48001800

08001628 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001630:	f7ff ff7c 	bl	800152c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0b0      	sub	sp, #192	@ 0xc0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	229c      	movs	r2, #156	@ 0x9c
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f009 fdeb 	bl	800b228 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a32      	ldr	r2, [pc, #200]	@ (8001720 <HAL_SAI_MspInit+0xe4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d15d      	bne.n	8001718 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800165c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001660:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001662:	2300      	movs	r3, #0
 8001664:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800166e:	2310      	movs	r3, #16
 8001670:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001672:	2302      	movs	r3, #2
 8001674:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001676:	2302      	movs	r3, #2
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800167e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4618      	mov	r0, r3
 800168a:	f001 fe3b 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001694:	f7ff fc62 	bl	8000f5c <Error_Handler>
    }

    if (SAI1_client == 0)
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <HAL_SAI_MspInit+0xe8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10b      	bne.n	80016b8 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <HAL_SAI_MspInit+0xec>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a4:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <HAL_SAI_MspInit+0xec>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <HAL_SAI_MspInit+0xec>)
 80016ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_SAI_MspInit+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_SAI_MspInit+0xe8>)
 80016c0:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80016c2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016dc:	230d      	movs	r3, #13
 80016de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016e6:	4619      	mov	r1, r3
 80016e8:	4810      	ldr	r0, [pc, #64]	@ (800172c <HAL_SAI_MspInit+0xf0>)
 80016ea:	f000 fa43 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80016ee:	2364      	movs	r3, #100	@ 0x64
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001706:	230d      	movs	r3, #13
 8001708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	@ (8001730 <HAL_SAI_MspInit+0xf4>)
 8001714:	f000 fa2e 	bl	8001b74 <HAL_GPIO_Init>

    }
}
 8001718:	bf00      	nop
 800171a:	37c0      	adds	r7, #192	@ 0xc0
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40015404 	.word	0x40015404
 8001724:	200011c8 	.word	0x200011c8
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400
 8001730:	48001000 	.word	0x48001000

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x4>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f8c9 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f009 fd8e 	bl	800b2e4 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20030000 	.word	0x20030000
 80017f4:	00000800 	.word	0x00000800
 80017f8:	200011cc 	.word	0x200011cc
 80017fc:	200016d8 	.word	0x200016d8

08001800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800185c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001828:	f7ff ffea 	bl	8001800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	@ (8001860 <LoopForever+0x6>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	@ (8001864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	@ (8001868 <LoopForever+0xe>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	@ (8001870 <LoopForever+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001852:	f009 fd4d 	bl	800b2f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001856:	f7fe feb9 	bl	80005cc <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800185c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000980 	.word	0x20000980
  ldr r2, =_sidata
 8001868:	080171d4 	.word	0x080171d4
  ldr r2, =_sbss
 800186c:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 8001870:	200016d8 	.word	0x200016d8

08001874 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_IRQHandler>

08001876 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f943 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f80e 	bl	80018a8 <HAL_InitTick>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e001      	b.n	800189c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001898:	f7ff fb68 	bl	8000f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800189c:	79fb      	ldrb	r3, [r7, #7]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_InitTick+0x6c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d023      	beq.n	8001904 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <HAL_InitTick+0x70>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_InitTick+0x6c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f941 	bl	8001b5a <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d809      	bhi.n	80018f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f919 	bl	8001b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f0:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <HAL_InitTick+0x74>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e007      	b.n	8001908 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e004      	b.n	8001908 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	e001      	b.n	8001908 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	20000000 	.word	0x20000000
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_IncTick+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_IncTick+0x24>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <HAL_IncTick+0x24>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	200011d0 	.word	0x200011d0

08001948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <HAL_GetTick+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	200011d0 	.word	0x200011d0

08001960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001968:	f7ff ffee 	bl	8001948 <HAL_GetTick>
 800196c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d005      	beq.n	8001986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_Delay+0x44>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001986:	bf00      	nop
 8001988:	f7ff ffde 	bl	8001948 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	d8f7      	bhi.n	8001988 <HAL_Delay+0x28>
  {
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff47 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff5c 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffb0 	bl	8001ac8 <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e166      	b.n	8001e52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8158 	beq.w	8001e4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d005      	beq.n	8001bb4 <HAL_GPIO_Init+0x40>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 0201 	and.w	r2, r3, #1
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d017      	beq.n	8001c52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d123      	bne.n	8001ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	6939      	ldr	r1, [r7, #16]
 8001ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0203 	and.w	r2, r3, #3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80b2 	beq.w	8001e4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce8:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <HAL_GPIO_Init+0x2fc>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cec:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <HAL_GPIO_Init+0x2fc>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cf4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e70 <HAL_GPIO_Init+0x2fc>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d00:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d2a:	d02b      	beq.n	8001d84 <HAL_GPIO_Init+0x210>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d025      	beq.n	8001d80 <HAL_GPIO_Init+0x20c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a51      	ldr	r2, [pc, #324]	@ (8001e7c <HAL_GPIO_Init+0x308>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d01f      	beq.n	8001d7c <HAL_GPIO_Init+0x208>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d019      	beq.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a4f      	ldr	r2, [pc, #316]	@ (8001e84 <HAL_GPIO_Init+0x310>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_GPIO_Init+0x200>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e88 <HAL_GPIO_Init+0x314>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00d      	beq.n	8001d70 <HAL_GPIO_Init+0x1fc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a4d      	ldr	r2, [pc, #308]	@ (8001e8c <HAL_GPIO_Init+0x318>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x1f8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e90 <HAL_GPIO_Init+0x31c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_GPIO_Init+0x1f4>
 8001d64:	2307      	movs	r3, #7
 8001d66:	e00e      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d68:	2308      	movs	r3, #8
 8001d6a:	e00c      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	e00a      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d70:	2305      	movs	r3, #5
 8001d72:	e008      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e004      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d84:	2300      	movs	r3, #0
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d96:	4937      	ldr	r1, [pc, #220]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da4:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dc8:	4a32      	ldr	r2, [pc, #200]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001df2:	4a28      	ldr	r2, [pc, #160]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001df8:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e46:	4a13      	ldr	r2, [pc, #76]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f47f ae91 	bne.w	8001b84 <HAL_GPIO_Init+0x10>
  }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	48000800 	.word	0x48000800
 8001e80:	48000c00 	.word	0x48000c00
 8001e84:	48001000 	.word	0x48001000
 8001e88:	48001400 	.word	0x48001400
 8001e8c:	48001800 	.word	0x48001800
 8001e90:	48001c00 	.word	0x48001c00
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff f860 	bl	8000fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	@ 0x24
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d108      	bne.n	8001f6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	e007      	b.n	8001f7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69d9      	ldr	r1, [r3, #28]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b20      	cmp	r3, #32
 8002012:	d138      	bne.n	8002086 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800201e:	2302      	movs	r3, #2
 8002020:	e032      	b.n	8002088 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2224      	movs	r2, #36	@ 0x24
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002050:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6819      	ldr	r1, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d139      	bne.n	800211e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e033      	b.n	8002120 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	@ 0x24
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800211e:	2302      	movs	r3, #2
  }
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e101      	b.n	8002342 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff f95e 	bl	8001414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f006 f897 	bl	800829e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7c1a      	ldrb	r2, [r3, #16]
 8002178:	f88d 2000 	strb.w	r2, [sp]
 800217c:	3304      	adds	r3, #4
 800217e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002180:	f006 f860 	bl	8008244 <USB_CoreInit>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0d5      	b.n	8002342 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f006 f88f 	bl	80082c0 <USB_SetCurrentMode>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0c6      	b.n	8002342 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e04a      	b.n	8002250 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3315      	adds	r3, #21
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3314      	adds	r3, #20
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b298      	uxth	r0, r3
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	332e      	adds	r3, #46	@ 0x2e
 80021f6:	4602      	mov	r2, r0
 80021f8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3318      	adds	r3, #24
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	331c      	adds	r3, #28
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3320      	adds	r3, #32
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3324      	adds	r3, #36	@ 0x24
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	429a      	cmp	r2, r3
 8002258:	d3af      	bcc.n	80021ba <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e044      	b.n	80022ea <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	791b      	ldrb	r3, [r3, #4]
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3b5      	bcc.n	8002260 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7c1a      	ldrb	r2, [r3, #16]
 80022fc:	f88d 2000 	strb.w	r2, [sp]
 8002300:	3304      	adds	r3, #4
 8002302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002304:	f006 f828 	bl	8008358 <USB_DevInit>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e013      	b.n	8002342 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7b1b      	ldrb	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d102      	bne.n	8002336 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f80a 	bl	800234a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f006 f9cd 	bl	80086da <USB_DevDisconnect>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	f043 0303 	orr.w	r3, r3, #3
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a4:	d102      	bne.n	80023ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80023a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023aa:	e00b      	b.n	80023c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ba:	d102      	bne.n	80023c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80023bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023c0:	e000      	b.n	80023c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80023c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40007000 	.word	0x40007000

080023d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d141      	bne.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ee:	d131      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f0:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f6:	4a46      	ldr	r2, [pc, #280]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002408:	4a41      	ldr	r2, [pc, #260]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800240e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002410:	4b40      	ldr	r3, [pc, #256]	@ (8002514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2232      	movs	r2, #50	@ 0x32
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	4a3f      	ldr	r2, [pc, #252]	@ (8002518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	3301      	adds	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002426:	e002      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3b01      	subs	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242e:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800243a:	d102      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f2      	bne.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002442:	4b33      	ldr	r3, [pc, #204]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244e:	d158      	bne.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e057      	b.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002454:	4b2e      	ldr	r3, [pc, #184]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800245a:	4a2d      	ldr	r2, [pc, #180]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002464:	e04d      	b.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800246c:	d141      	bne.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800246e:	4b28      	ldr	r3, [pc, #160]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247a:	d131      	bne.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002482:	4a23      	ldr	r2, [pc, #140]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002494:	4a1e      	ldr	r2, [pc, #120]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2232      	movs	r2, #50	@ 0x32
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	0c9b      	lsrs	r3, r3, #18
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b2:	e002      	b.n	80024ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c6:	d102      	bne.n	80024ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f2      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	d112      	bne.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e011      	b.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024f0:	e007      	b.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024f2:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002500:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40007000 	.word	0x40007000
 8002514:	20000000 	.word	0x20000000
 8002518:	431bde83 	.word	0x431bde83

0800251c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252a:	6053      	str	r3, [r2, #4]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40007000 	.word	0x40007000

0800253c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254a:	6053      	str	r3, [r2, #4]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40007000 	.word	0x40007000

0800255c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f000 bc08 	b.w	8002d80 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002570:	4b96      	ldr	r3, [pc, #600]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800257a:	4b94      	ldr	r3, [pc, #592]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80e4 	beq.w	800275a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4c>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	f040 808b 	bne.w	80026b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 8087 	bne.w	80026b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a8:	4b88      	ldr	r3, [pc, #544]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x64>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e3df      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	4b81      	ldr	r3, [pc, #516]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_RCC_OscConfig+0x7e>
 80025d0:	4b7e      	ldr	r3, [pc, #504]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d8:	e005      	b.n	80025e6 <HAL_RCC_OscConfig+0x8a>
 80025da:	4b7c      	ldr	r3, [pc, #496]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d223      	bcs.n	8002632 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fdca 	bl	8003188 <RCC_SetFlashLatencyFromMSIRange>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e3c0      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025fe:	4b73      	ldr	r3, [pc, #460]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a72      	ldr	r2, [pc, #456]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002604:	f043 0308 	orr.w	r3, r3, #8
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b70      	ldr	r3, [pc, #448]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	496d      	ldr	r1, [pc, #436]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261c:	4b6b      	ldr	r3, [pc, #428]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	4968      	ldr	r1, [pc, #416]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	e025      	b.n	800267e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002632:	4b66      	ldr	r3, [pc, #408]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a65      	ldr	r2, [pc, #404]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b63      	ldr	r3, [pc, #396]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4960      	ldr	r1, [pc, #384]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002650:	4b5e      	ldr	r3, [pc, #376]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	495b      	ldr	r1, [pc, #364]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fd8a 	bl	8003188 <RCC_SetFlashLatencyFromMSIRange>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e380      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800267e:	f000 fcc1 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b51      	ldr	r3, [pc, #324]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4950      	ldr	r1, [pc, #320]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a4e      	ldr	r2, [pc, #312]	@ (80027d4 <HAL_RCC_OscConfig+0x278>)
 800269c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800269e:	4b4e      	ldr	r3, [pc, #312]	@ (80027d8 <HAL_RCC_OscConfig+0x27c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f900 	bl	80018a8 <HAL_InitTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d052      	beq.n	8002758 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	e364      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d032      	beq.n	8002724 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026be:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a42      	ldr	r2, [pc, #264]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ca:	f7ff f93d 	bl	8001948 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d2:	f7ff f939 	bl	8001948 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e34d      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026e4:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f0:	4b36      	ldr	r3, [pc, #216]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a35      	ldr	r2, [pc, #212]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b33      	ldr	r3, [pc, #204]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4930      	ldr	r1, [pc, #192]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270e:	4b2f      	ldr	r3, [pc, #188]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	492b      	ldr	r1, [pc, #172]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
 8002722:	e01a      	b.n	800275a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002730:	f7ff f90a 	bl	8001948 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002738:	f7ff f906 	bl	8001948 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e31a      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1dc>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d073      	beq.n	800284e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x21c>
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d10e      	bne.n	8002790 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d063      	beq.n	800284c <HAL_RCC_OscConfig+0x2f0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d15f      	bne.n	800284c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e2f7      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x24c>
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a0b      	ldr	r2, [pc, #44]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e025      	b.n	80027f4 <HAL_RCC_OscConfig+0x298>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b0:	d114      	bne.n	80027dc <HAL_RCC_OscConfig+0x280>
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a02      	ldr	r2, [pc, #8]	@ (80027cc <HAL_RCC_OscConfig+0x270>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x298>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	0800c09c 	.word	0x0800c09c
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004
 80027dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7ff f8a4 	bl	8001948 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7ff f8a0 	bl	8001948 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	@ 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e2b4      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002816:	4b92      	ldr	r3, [pc, #584]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x2a8>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff f890 	bl	8001948 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff f88c 	bl	8001948 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e2a0      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800283e:	4b88      	ldr	r3, [pc, #544]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x2d0>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d060      	beq.n	800291c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x310>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d119      	bne.n	800289a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d116      	bne.n	800289a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x328>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e27d      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b76      	ldr	r3, [pc, #472]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	4973      	ldr	r1, [pc, #460]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	e040      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d023      	beq.n	80028ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff f84b 	bl	8001948 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b6:	f7ff f847 	bl	8001948 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e25b      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c8:	4b65      	ldr	r3, [pc, #404]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b62      	ldr	r3, [pc, #392]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	495f      	ldr	r1, [pc, #380]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e018      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff f827 	bl	8001948 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7ff f823 	bl	8001948 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e237      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002910:	4b53      	ldr	r3, [pc, #332]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d03c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01c      	beq.n	800296a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002930:	4b4b      	ldr	r3, [pc, #300]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002936:	4a4a      	ldr	r2, [pc, #296]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7ff f802 	bl	8001948 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002948:	f7fe fffe 	bl	8001948 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e212      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295a:	4b41      	ldr	r3, [pc, #260]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ef      	beq.n	8002948 <HAL_RCC_OscConfig+0x3ec>
 8002968:	e01b      	b.n	80029a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002970:	4a3b      	ldr	r2, [pc, #236]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe ffe5 	bl	8001948 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe ffe1 	bl	8001948 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1f5      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002994:	4b32      	ldr	r3, [pc, #200]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ef      	bne.n	8002982 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80a6 	beq.w	8002afc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c0:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	4a26      	ldr	r2, [pc, #152]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80029cc:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d8:	2301      	movs	r3, #1
 80029da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029dc:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_RCC_OscConfig+0x508>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d118      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <HAL_RCC_OscConfig+0x508>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <HAL_RCC_OscConfig+0x508>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f4:	f7fe ffa8 	bl	8001948 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe ffa4 	bl	8001948 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1b8      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <HAL_RCC_OscConfig+0x508>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4d8>
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a32:	e029      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d115      	bne.n	8002a68 <HAL_RCC_OscConfig+0x50c>
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a42:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a52:	4a03      	ldr	r2, [pc, #12]	@ (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a5c:	e014      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	4b9d      	ldr	r3, [pc, #628]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	4a9c      	ldr	r2, [pc, #624]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a78:	4b99      	ldr	r3, [pc, #612]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	4a98      	ldr	r2, [pc, #608]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d016      	beq.n	8002abe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe ff5a 	bl	8001948 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe ff56 	bl	8001948 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e168      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ed      	beq.n	8002a98 <HAL_RCC_OscConfig+0x53c>
 8002abc:	e015      	b.n	8002aea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe ff43 	bl	8001948 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ff3f 	bl	8001948 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e151      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002adc:	4b80      	ldr	r3, [pc, #512]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ed      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aea:	7ffb      	ldrb	r3, [r7, #31]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	4a7a      	ldr	r2, [pc, #488]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d03c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b10:	4b73      	ldr	r3, [pc, #460]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b16:	4a72      	ldr	r2, [pc, #456]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe ff12 	bl	8001948 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b28:	f7fe ff0e 	bl	8001948 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e122      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b3a:	4b69      	ldr	r3, [pc, #420]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ef      	beq.n	8002b28 <HAL_RCC_OscConfig+0x5cc>
 8002b48:	e01b      	b.n	8002b82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b4a:	4b65      	ldr	r3, [pc, #404]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b50:	4a63      	ldr	r2, [pc, #396]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fef5 	bl	8001948 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b62:	f7fe fef1 	bl	8001948 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e105      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ef      	bne.n	8002b62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80f9 	beq.w	8002d7e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	f040 80cf 	bne.w	8002d34 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b96:	4b52      	ldr	r3, [pc, #328]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d12c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d123      	bne.n	8002c04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d11b      	bne.n	8002c04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d113      	bne.n	8002c04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	3b01      	subs	r3, #1
 8002bea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d109      	bne.n	8002c04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d071      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d068      	beq.n	8002cdc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c0a:	4b35      	ldr	r3, [pc, #212]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c16:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0ac      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c32:	f7fe fe89 	bl	8001948 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe fe85 	bl	8001948 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e099      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <HAL_RCC_OscConfig+0x788>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c72:	0212      	lsls	r2, r2, #8
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c7a:	0852      	lsrs	r2, r2, #1
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0552      	lsls	r2, r2, #21
 8002c80:	4311      	orrs	r1, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c86:	0852      	lsrs	r2, r2, #1
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	0652      	lsls	r2, r2, #25
 8002c8c:	4311      	orrs	r1, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c92:	06d2      	lsls	r2, r2, #27
 8002c94:	430a      	orrs	r2, r1
 8002c96:	4912      	ldr	r1, [pc, #72]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cb4:	f7fe fe48 	bl	8001948 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fe44 	bl	8001948 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e058      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cda:	e050      	b.n	8002d7e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e04f      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d144      	bne.n	8002d7e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d00:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a20      	ldr	r2, [pc, #128]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d0c:	f7fe fe1c 	bl	8001948 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fe18 	bl	8001948 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e02c      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x7b8>
 8002d32:	e024      	b.n	8002d7e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d01f      	beq.n	8002d7a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fdff 	bl	8001948 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fdfb 	bl	8001948 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e00f      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4905      	ldr	r1, [pc, #20]	@ (8002d88 <HAL_RCC_OscConfig+0x82c>)
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_RCC_OscConfig+0x830>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
 8002d78:	e001      	b.n	8002d7e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	feeefffc 	.word	0xfeeefffc

08002d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e11d      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b90      	ldr	r3, [pc, #576]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b8d      	ldr	r3, [pc, #564]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	498b      	ldr	r1, [pc, #556]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b89      	ldr	r3, [pc, #548]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e105      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b81      	ldr	r3, [pc, #516]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	497b      	ldr	r1, [pc, #492]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d079      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d11e      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b75      	ldr	r3, [pc, #468]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0dc      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e2a:	f000 fa07 	bl	800323c <RCC_GetSysClockFreqFromPLLSource>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a70      	ldr	r2, [pc, #448]	@ (8002ff4 <HAL_RCC_ClockConfig+0x264>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d946      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e36:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d140      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e42:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e4a:	4a69      	ldr	r2, [pc, #420]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e035      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e60:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d115      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b9      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e78:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ad      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0a5      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e98:	f000 f8b4 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a55      	ldr	r2, [pc, #340]	@ (8002ff4 <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d90f      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ea4:	4b52      	ldr	r3, [pc, #328]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ebe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ec0:	2380      	movs	r3, #128	@ 0x80
 8002ec2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4947      	ldr	r1, [pc, #284]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fd37 	bl	8001948 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fe fd33 	bl	8001948 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e077      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 020c 	and.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d1eb      	bne.n	8002ede <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b80      	cmp	r3, #128	@ 0x80
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f0c:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a37      	ldr	r2, [pc, #220]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f16:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d208      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	492b      	ldr	r1, [pc, #172]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f46:	4b29      	ldr	r3, [pc, #164]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d210      	bcs.n	8002f76 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f54:	4b25      	ldr	r3, [pc, #148]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 020f 	bic.w	r2, r3, #15
 8002f5c:	4923      	ldr	r1, [pc, #140]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f64:	4b21      	ldr	r3, [pc, #132]	@ (8002fec <HAL_RCC_ClockConfig+0x25c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e036      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4918      	ldr	r1, [pc, #96]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa0:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4910      	ldr	r1, [pc, #64]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb4:	f000 f826 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	490c      	ldr	r1, [pc, #48]	@ (8002ff8 <HAL_RCC_ClockConfig+0x268>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <HAL_RCC_ClockConfig+0x26c>)
 8002fd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_RCC_ClockConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fc65 	bl	80018a8 <HAL_InitTick>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	04c4b400 	.word	0x04c4b400
 8002ff8:	0800c09c 	.word	0x0800c09c
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003012:	4b3e      	ldr	r3, [pc, #248]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800301c:	4b3b      	ldr	r3, [pc, #236]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x34>
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d121      	bne.n	8003076 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d11e      	bne.n	8003076 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003038:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003044:	4b31      	ldr	r3, [pc, #196]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e005      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003054:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003060:	4a2b      	ldr	r2, [pc, #172]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003068:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003074:	e00a      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d102      	bne.n	8003082 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x110>)
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e004      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d101      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003088:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x110>)
 800308a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d134      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003092:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0xa6>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d003      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xac>
 80030a8:	e005      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ac:	617b      	str	r3, [r7, #20]
      break;
 80030ae:	e005      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030b0:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x110>)
 80030b2:	617b      	str	r3, [r7, #20]
      break;
 80030b4:	e002      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	617b      	str	r3, [r7, #20]
      break;
 80030ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030bc:	4b13      	ldr	r3, [pc, #76]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3301      	adds	r3, #1
 80030c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ca:	4b10      	ldr	r3, [pc, #64]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	fb03 f202 	mul.w	r2, r3, r2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RCC_GetSysClockFreq+0x108>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	0e5b      	lsrs	r3, r3, #25
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	3301      	adds	r3, #1
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030fc:	69bb      	ldr	r3, [r7, #24]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	@ 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	0800c0b4 	.word	0x0800c0b4
 8003114:	00f42400 	.word	0x00f42400

08003118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <HAL_RCC_GetHCLKFreq+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000000 	.word	0x20000000

08003130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003134:	f7ff fff0 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4904      	ldr	r1, [pc, #16]	@ (8003158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	0800c0ac 	.word	0x0800c0ac

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003160:	f7ff ffda 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0adb      	lsrs	r3, r3, #11
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	0800c0ac 	.word	0x0800c0ac

08003188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003194:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031a0:	f7ff f8f8 	bl	8002394 <HAL_PWREx_GetVoltageRange>
 80031a4:	6178      	str	r0, [r7, #20]
 80031a6:	e014      	b.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	4a21      	ldr	r2, [pc, #132]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031c0:	f7ff f8e8 	bl	8002394 <HAL_PWREx_GetVoltageRange>
 80031c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d8:	d10b      	bne.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b80      	cmp	r3, #128	@ 0x80
 80031de:	d913      	bls.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80031e4:	d902      	bls.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e6:	2302      	movs	r3, #2
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e00d      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031ec:	2301      	movs	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e00a      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031f6:	d902      	bls.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031f8:	2302      	movs	r3, #2
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e004      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b70      	cmp	r3, #112	@ 0x70
 8003202:	d101      	bne.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003204:	2301      	movs	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 020f 	bic.w	r2, r3, #15
 8003210:	4909      	ldr	r1, [pc, #36]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003218:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	40022000 	.word	0x40022000

0800323c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003242:	4b2d      	ldr	r3, [pc, #180]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d00b      	beq.n	800326a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d825      	bhi.n	80032a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d008      	beq.n	8003270 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d11f      	bne.n	80032a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003264:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003266:	613b      	str	r3, [r7, #16]
    break;
 8003268:	e01f      	b.n	80032aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800326a:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800326c:	613b      	str	r3, [r7, #16]
    break;
 800326e:	e01c      	b.n	80032aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003270:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800327c:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800327e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e005      	b.n	8003298 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003298:	4a19      	ldr	r2, [pc, #100]	@ (8003300 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	613b      	str	r3, [r7, #16]
    break;
 80032a2:	e002      	b.n	80032aa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
    break;
 80032a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032aa:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	3301      	adds	r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	fb03 f202 	mul.w	r2, r3, r2
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0e5b      	lsrs	r3, r3, #25
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032ea:	683b      	ldr	r3, [r7, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	00f42400 	.word	0x00f42400
 8003300:	0800c0b4 	.word	0x0800c0b4

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d040      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d02a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003328:	2b80      	cmp	r3, #128	@ 0x80
 800332a:	d825      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800332c:	2b60      	cmp	r3, #96	@ 0x60
 800332e:	d026      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003330:	2b60      	cmp	r3, #96	@ 0x60
 8003332:	d821      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	d006      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d81d      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d010      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003344:	e018      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003346:	4b89      	ldr	r3, [pc, #548]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a88      	ldr	r2, [pc, #544]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003352:	e015      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fa82 	bl	8004864 <RCCEx_PLLSAI1_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003364:	e00c      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3320      	adds	r3, #32
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fb6d 	bl	8004a4c <RCCEx_PLLSAI2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003376:	e003      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	74fb      	strb	r3, [r7, #19]
      break;
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800337e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003386:	4b79      	ldr	r3, [pc, #484]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003388:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800338c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003394:	4975      	ldr	r1, [pc, #468]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800339c:	e001      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d047      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b6:	d030      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033bc:	d82a      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c2:	d02a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c8:	d824      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d4:	d81e      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033de:	d010      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033e0:	e018      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e2:	4b62      	ldr	r3, [pc, #392]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4a61      	ldr	r2, [pc, #388]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ee:	e015      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fa34 	bl	8004864 <RCCEx_PLLSAI1_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003400:	e00c      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3320      	adds	r3, #32
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fb1f 	bl	8004a4c <RCCEx_PLLSAI2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	74fb      	strb	r3, [r7, #19]
      break;
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003422:	4b52      	ldr	r3, [pc, #328]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003424:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	494e      	ldr	r1, [pc, #312]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 809f 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003450:	4b46      	ldr	r3, [pc, #280]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	4a40      	ldr	r2, [pc, #256]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	@ 0x58
 8003472:	4b3e      	ldr	r3, [pc, #248]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003482:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3a      	ldr	r2, [pc, #232]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800348e:	f7fe fa5b 	bl	8001948 <HAL_GetTick>
 8003492:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003494:	e009      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe fa57 	bl	8001948 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d902      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	74fb      	strb	r3, [r7, #19]
        break;
 80034a8:	e005      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034aa:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ef      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d15b      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034bc:	4b2b      	ldr	r3, [pc, #172]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01f      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d019      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e6:	4b21      	ldr	r3, [pc, #132]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ec:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f6:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fc:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003506:	4a19      	ldr	r2, [pc, #100]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d016      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fa16 	bl	8001948 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351e:	e00b      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe fa12 	bl	8001948 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d902      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	74fb      	strb	r3, [r7, #19]
            break;
 8003536:	e006      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ec      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10c      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800354c:	4b07      	ldr	r3, [pc, #28]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800355c:	4903      	ldr	r1, [pc, #12]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003564:	e008      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	74bb      	strb	r3, [r7, #18]
 800356a:	e005      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003578:	7c7b      	ldrb	r3, [r7, #17]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4ba0      	ldr	r3, [pc, #640]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	4a9f      	ldr	r2, [pc, #636]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003588:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003596:	4b9a      	ldr	r3, [pc, #616]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359c:	f023 0203 	bic.w	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	4996      	ldr	r1, [pc, #600]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b8:	4b91      	ldr	r3, [pc, #580]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f023 020c 	bic.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	498e      	ldr	r1, [pc, #568]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035da:	4b89      	ldr	r3, [pc, #548]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	4985      	ldr	r1, [pc, #532]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035fc:	4b80      	ldr	r3, [pc, #512]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003602:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	497d      	ldr	r1, [pc, #500]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800361e:	4b78      	ldr	r3, [pc, #480]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362c:	4974      	ldr	r1, [pc, #464]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003640:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364e:	496c      	ldr	r1, [pc, #432]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003662:	4b67      	ldr	r3, [pc, #412]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003670:	4963      	ldr	r1, [pc, #396]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003684:	4b5e      	ldr	r3, [pc, #376]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003692:	495b      	ldr	r1, [pc, #364]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a6:	4b56      	ldr	r3, [pc, #344]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	4952      	ldr	r1, [pc, #328]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	494a      	ldr	r1, [pc, #296]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ea:	4b45      	ldr	r3, [pc, #276]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	4941      	ldr	r1, [pc, #260]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800370c:	4b3c      	ldr	r3, [pc, #240]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371a:	4939      	ldr	r1, [pc, #228]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d028      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372e:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	4930      	ldr	r1, [pc, #192]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800374c:	d106      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374e:	4b2c      	ldr	r3, [pc, #176]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003758:	60d3      	str	r3, [r2, #12]
 800375a:	e011      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f879 	bl	8004864 <RCCEx_PLLSAI1_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d04d      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003794:	d108      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003796:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800379c:	4a18      	ldr	r2, [pc, #96]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037a6:	e012      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80037a8:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ae:	4a14      	ldr	r2, [pc, #80]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c6:	490e      	ldr	r1, [pc, #56]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d6:	d106      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
 80037e4:	e020      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a02      	ldr	r2, [pc, #8]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e014      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f825 	bl	8004864 <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d028      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003834:	4b7a      	ldr	r3, [pc, #488]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003842:	4977      	ldr	r1, [pc, #476]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800384e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003852:	d106      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003854:	4b72      	ldr	r3, [pc, #456]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a71      	ldr	r2, [pc, #452]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800385a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385e:	60d3      	str	r3, [r2, #12]
 8003860:	e011      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003866:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800386a:	d10c      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fff6 	bl	8004864 <RCCEx_PLLSAI1_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01e      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a2:	495f      	ldr	r1, [pc, #380]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 ffd1 	bl	8004864 <RCCEx_PLLSAI1_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038dc:	4b50      	ldr	r3, [pc, #320]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038e2:	f023 0204 	bic.w	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ec:	494c      	ldr	r1, [pc, #304]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003900:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003906:	f023 0218 	bic.w	r2, r3, #24
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	4943      	ldr	r1, [pc, #268]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d035      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003924:	4b3e      	ldr	r3, [pc, #248]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3d      	ldr	r2, [pc, #244]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fe f80a 	bl	8001948 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003936:	e009      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003938:	f7fe f806 	bl	8001948 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	74fb      	strb	r3, [r7, #19]
        break;
 800394a:	e005      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800394c:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ef      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800395e:	4b30      	ldr	r3, [pc, #192]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003964:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800396e:	492c      	ldr	r1, [pc, #176]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3320      	adds	r3, #32
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f865 	bl	8004a4c <RCCEx_PLLSAI2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01e      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800399c:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800399e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ac:	491c      	ldr	r1, [pc, #112]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039be:	d10c      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3320      	adds	r3, #32
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f840 	bl	8004a4c <RCCEx_PLLSAI2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d017      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f6:	490a      	ldr	r1, [pc, #40]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a08:	d105      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a0a:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a14:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000

08003a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a36:	d13e      	bne.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003a38:	4bb6      	ldr	r3, [pc, #728]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4a:	d028      	beq.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a52:	f200 86f2 	bhi.w	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a64:	d00e      	beq.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003a66:	f000 bee8 	b.w	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a6a:	4baa      	ldr	r3, [pc, #680]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	f040 86e2 	bne.w	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7e:	61fb      	str	r3, [r7, #28]
      break;
 8003a80:	f000 bedd 	b.w	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003a84:	4ba3      	ldr	r3, [pc, #652]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	f040 86d7 	bne.w	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003a94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003a98:	61fb      	str	r3, [r7, #28]
      break;
 8003a9a:	f000 bed2 	b.w	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aaa:	f040 86cc 	bne.w	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003aae:	4b9a      	ldr	r3, [pc, #616]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ab0:	61fb      	str	r3, [r7, #28]
      break;
 8003ab2:	f000 bec8 	b.w	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab6:	4b97      	ldr	r3, [pc, #604]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d036      	beq.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d840      	bhi.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d003      	beq.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003ad8:	e039      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003ada:	4b8e      	ldr	r3, [pc, #568]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d116      	bne.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003af2:	4b88      	ldr	r3, [pc, #544]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	e005      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003afe:	4b85      	ldr	r3, [pc, #532]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a84      	ldr	r2, [pc, #528]	@ (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003b12:	e01f      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
      break;
 8003b18:	e01c      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b1a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b26:	d102      	bne.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003b28:	4b7d      	ldr	r3, [pc, #500]	@ (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b2a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003b2c:	e012      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
      break;
 8003b32:	e00f      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b34:	4b77      	ldr	r3, [pc, #476]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b40:	d102      	bne.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003b42:	4b77      	ldr	r3, [pc, #476]	@ (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
      break;
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
      break;
 8003b52:	bf00      	nop
    }

    switch(PeriphClk)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b5a:	f000 8604 	beq.w	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b64:	f200 8671 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b6e:	f000 8467 	beq.w	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b78:	f200 8667 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b82:	f000 852f 	beq.w	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b8c:	f200 865d 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b96:	f000 8185 	beq.w	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ba0:	f200 8653 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003baa:	f000 80cb 	beq.w	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bb4:	f200 8649 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bbe:	f000 842e 	beq.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc8:	f200 863f 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bd2:	f000 83e2 	beq.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bdc:	f200 8635 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be6:	f000 80ad 	beq.w	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf0:	f200 862b 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfa:	f000 809b 	beq.w	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c04:	f200 8621 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c0e:	f000 8089 	beq.w	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c18:	f200 8617 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c22:	f000 8552 	beq.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2c:	f200 860d 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c36:	f000 84fe 	beq.w	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c40:	f200 8603 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4a:	f000 849f 	beq.w	800458c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c54:	f200 85f9 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b80      	cmp	r3, #128	@ 0x80
 8003c5c:	f000 846a 	beq.w	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b80      	cmp	r3, #128	@ 0x80
 8003c64:	f200 85f1 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d84c      	bhi.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 85ea 	beq.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	2b1f      	cmp	r3, #31
 8003c7c:	f200 85e5 	bhi.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003c80:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08004099 	.word	0x08004099
 8003c8c:	08004107 	.word	0x08004107
 8003c90:	0800484b 	.word	0x0800484b
 8003c94:	0800419b 	.word	0x0800419b
 8003c98:	0800484b 	.word	0x0800484b
 8003c9c:	0800484b 	.word	0x0800484b
 8003ca0:	0800484b 	.word	0x0800484b
 8003ca4:	08004213 	.word	0x08004213
 8003ca8:	0800484b 	.word	0x0800484b
 8003cac:	0800484b 	.word	0x0800484b
 8003cb0:	0800484b 	.word	0x0800484b
 8003cb4:	0800484b 	.word	0x0800484b
 8003cb8:	0800484b 	.word	0x0800484b
 8003cbc:	0800484b 	.word	0x0800484b
 8003cc0:	0800484b 	.word	0x0800484b
 8003cc4:	08004297 	.word	0x08004297
 8003cc8:	0800484b 	.word	0x0800484b
 8003ccc:	0800484b 	.word	0x0800484b
 8003cd0:	0800484b 	.word	0x0800484b
 8003cd4:	0800484b 	.word	0x0800484b
 8003cd8:	0800484b 	.word	0x0800484b
 8003cdc:	0800484b 	.word	0x0800484b
 8003ce0:	0800484b 	.word	0x0800484b
 8003ce4:	0800484b 	.word	0x0800484b
 8003ce8:	0800484b 	.word	0x0800484b
 8003cec:	0800484b 	.word	0x0800484b
 8003cf0:	0800484b 	.word	0x0800484b
 8003cf4:	0800484b 	.word	0x0800484b
 8003cf8:	0800484b 	.word	0x0800484b
 8003cfc:	0800484b 	.word	0x0800484b
 8003d00:	0800484b 	.word	0x0800484b
 8003d04:	08004319 	.word	0x08004319
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b40      	cmp	r3, #64	@ 0x40
 8003d0c:	f000 83e6 	beq.w	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003d10:	f000 bd9b 	b.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	0007a120 	.word	0x0007a120
 8003d1c:	0800c0b4 	.word	0x0800c0b4
 8003d20:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d2a:	f000 ff83 	bl	8004c34 <RCCEx_GetSAIxPeriphCLKFreq>
 8003d2e:	61f8      	str	r0, [r7, #28]
      break;
 8003d30:	f000 bd8e 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003d34:	69b9      	ldr	r1, [r7, #24]
 8003d36:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d3a:	f000 ff7b 	bl	8004c34 <RCCEx_GetSAIxPeriphCLKFreq>
 8003d3e:	61f8      	str	r0, [r7, #28]
      break;
 8003d40:	f000 bd86 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003d44:	4b9a      	ldr	r3, [pc, #616]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003d4e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d56:	d015      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d5e:	f200 8092 	bhi.w	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d68:	d029      	beq.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d70:	f200 8089 	bhi.w	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d07b      	beq.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d80:	d04a      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003d82:	e080      	b.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d84:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d17d      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d90:	4b87      	ldr	r3, [pc, #540]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003d9c:	4b84      	ldr	r3, [pc, #528]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003da8:	4b81      	ldr	r3, [pc, #516]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	61fb      	str	r3, [r7, #28]
          break;
 8003dbc:	e066      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dca:	d162      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003dcc:	4b78      	ldr	r3, [pc, #480]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd8:	d15b      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003dda:	4b75      	ldr	r3, [pc, #468]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	fb03 f202 	mul.w	r2, r3, r2
 8003dee:	4b70      	ldr	r3, [pc, #448]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	3301      	adds	r3, #1
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003e00:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	0d5b      	lsrs	r3, r3, #21
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	61fb      	str	r3, [r7, #28]
          break;
 8003e16:	e03c      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e18:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e24:	d138      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003e26:	4b62      	ldr	r3, [pc, #392]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e32:	d131      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003e34:	4b5e      	ldr	r3, [pc, #376]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e3e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	fb03 f202 	mul.w	r2, r3, r2
 8003e48:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3301      	adds	r3, #1
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003e5a:	4b55      	ldr	r3, [pc, #340]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	0d5b      	lsrs	r3, r3, #21
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	3301      	adds	r3, #1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
          break;
 8003e70:	e012      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003e72:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d10e      	bne.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003e80:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003e82:	61fb      	str	r3, [r7, #28]
          break;
 8003e84:	e00b      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003e86:	bf00      	nop
 8003e88:	f000 bce2 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e8c:	bf00      	nop
 8003e8e:	f000 bcdf 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e92:	bf00      	nop
 8003e94:	f000 bcdc 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e98:	bf00      	nop
 8003e9a:	f000 bcd9 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e9e:	bf00      	nop
        break;
 8003ea0:	f000 bcd6 	b.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003ea4:	4b42      	ldr	r3, [pc, #264]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb2:	d13d      	bne.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ec0:	f040 84c5 	bne.w	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed0:	f040 84bd 	bne.w	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003ed4:	4b36      	ldr	r3, [pc, #216]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ede:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	fb03 f202 	mul.w	r2, r3, r2
 8003ee8:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003efa:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	0edb      	lsrs	r3, r3, #27
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003f0c:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003f18:	2311      	movs	r3, #17
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e001      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003f1e:	2307      	movs	r3, #7
 8003f20:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	61fb      	str	r3, [r7, #28]
      break;
 8003f2c:	f000 bc8f 	b.w	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003f30:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f36:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003f3a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f42:	d016      	beq.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f4a:	f200 809b 	bhi.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f54:	d032      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5c:	f200 8092 	bhi.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8084 	beq.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f6e:	d052      	beq.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003f70:	e088      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	f040 8084 	bne.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003f8c:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	e005      	b.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	4a03      	ldr	r2, [pc, #12]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003faa:	61fb      	str	r3, [r7, #28]
          break;
 8003fac:	e06c      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800c0b4 	.word	0x0800c0b4
 8003fb8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003fbc:	4ba5      	ldr	r3, [pc, #660]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fc8:	d160      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003fca:	4ba2      	ldr	r3, [pc, #648]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fd6:	d159      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003fd8:	4b9e      	ldr	r3, [pc, #632]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	fb03 f202 	mul.w	r2, r3, r2
 8003fec:	4b99      	ldr	r3, [pc, #612]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003ffe:	4b95      	ldr	r3, [pc, #596]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	0d5b      	lsrs	r3, r3, #21
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	3301      	adds	r3, #1
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	61fb      	str	r3, [r7, #28]
          break;
 8004014:	e03a      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004016:	4b8f      	ldr	r3, [pc, #572]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004022:	d135      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004024:	4b8b      	ldr	r3, [pc, #556]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004030:	d12e      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004032:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800403c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	fb03 f202 	mul.w	r2, r3, r2
 8004046:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	3301      	adds	r3, #1
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004058:	4b7e      	ldr	r3, [pc, #504]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	0d5b      	lsrs	r3, r3, #21
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	61fb      	str	r3, [r7, #28]
          break;
 800406e:	e00f      	b.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004070:	4b78      	ldr	r3, [pc, #480]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d10a      	bne.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004080:	61fb      	str	r3, [r7, #28]
          break;
 8004082:	e007      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8004084:	bf00      	nop
 8004086:	e3e2      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004088:	bf00      	nop
 800408a:	e3e0      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800408c:	bf00      	nop
 800408e:	e3de      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004090:	bf00      	nop
 8004092:	e3dc      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004094:	bf00      	nop
      break;
 8004096:	e3da      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004098:	4b6e      	ldr	r3, [pc, #440]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d827      	bhi.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80040aa:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040c9 	.word	0x080040c9
 80040b8:	080040d1 	.word	0x080040d1
 80040bc:	080040e5 	.word	0x080040e5
          frequency = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7ff f84c 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80040c4:	61f8      	str	r0, [r7, #28]
          break;
 80040c6:	e01d      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80040c8:	f7fe ff9c 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 80040cc:	61f8      	str	r0, [r7, #28]
          break;
 80040ce:	e019      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040d0:	4b60      	ldr	r3, [pc, #384]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040dc:	d10f      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80040de:	4b5f      	ldr	r3, [pc, #380]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80040e0:	61fb      	str	r3, [r7, #28]
          break;
 80040e2:	e00c      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f6:	61fb      	str	r3, [r7, #28]
          break;
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80040fa:	bf00      	nop
 80040fc:	e3a8      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040fe:	bf00      	nop
 8004100:	e3a6      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004102:	bf00      	nop
        break;
 8004104:	e3a4      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004106:	4b53      	ldr	r3, [pc, #332]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	d83a      	bhi.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004155 	.word	0x08004155
 8004124:	0800418f 	.word	0x0800418f
 8004128:	0800418f 	.word	0x0800418f
 800412c:	0800418f 	.word	0x0800418f
 8004130:	0800415d 	.word	0x0800415d
 8004134:	0800418f 	.word	0x0800418f
 8004138:	0800418f 	.word	0x0800418f
 800413c:	0800418f 	.word	0x0800418f
 8004140:	08004165 	.word	0x08004165
 8004144:	0800418f 	.word	0x0800418f
 8004148:	0800418f 	.word	0x0800418f
 800414c:	0800418f 	.word	0x0800418f
 8004150:	08004179 	.word	0x08004179
          frequency = HAL_RCC_GetPCLK1Freq();
 8004154:	f7fe ffec 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004158:	61f8      	str	r0, [r7, #28]
          break;
 800415a:	e01d      	b.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800415c:	f7fe ff52 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8004160:	61f8      	str	r0, [r7, #28]
          break;
 8004162:	e019      	b.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004164:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004170:	d10f      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8004172:	4b3a      	ldr	r3, [pc, #232]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004174:	61fb      	str	r3, [r7, #28]
          break;
 8004176:	e00c      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004178:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d107      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418a:	61fb      	str	r3, [r7, #28]
          break;
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800418e:	bf00      	nop
 8004190:	e35e      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004192:	bf00      	nop
 8004194:	e35c      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004196:	bf00      	nop
        break;
 8004198:	e35a      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800419a:	4b2e      	ldr	r3, [pc, #184]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041a4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b30      	cmp	r3, #48	@ 0x30
 80041aa:	d021      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b30      	cmp	r3, #48	@ 0x30
 80041b0:	d829      	bhi.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d011      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d823      	bhi.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d004      	beq.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80041ca:	e01c      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe ffb0 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 80041d0:	61f8      	str	r0, [r7, #28]
          break;
 80041d2:	e01d      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80041d4:	f7fe ff16 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 80041d8:	61f8      	str	r0, [r7, #28]
          break;
 80041da:	e019      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e8:	d10f      	bne.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80041ea:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80041ec:	61fb      	str	r3, [r7, #28]
          break;
 80041ee:	e00c      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041f0:	4b18      	ldr	r3, [pc, #96]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d107      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	61fb      	str	r3, [r7, #28]
          break;
 8004204:	e003      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8004206:	bf00      	nop
 8004208:	e322      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800420a:	bf00      	nop
 800420c:	e320      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800420e:	bf00      	nop
        break;
 8004210:	e31e      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800421c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2bc0      	cmp	r3, #192	@ 0xc0
 8004222:	d027      	beq.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2bc0      	cmp	r3, #192	@ 0xc0
 8004228:	d82f      	bhi.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b80      	cmp	r3, #128	@ 0x80
 800422e:	d017      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b80      	cmp	r3, #128	@ 0x80
 8004234:	d829      	bhi.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d004      	beq.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8004242:	e022      	b.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe ff74 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004248:	61f8      	str	r0, [r7, #28]
          break;
 800424a:	e023      	b.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800424c:	f7fe feda 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8004250:	61f8      	str	r0, [r7, #28]
          break;
 8004252:	e01f      	b.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004254:	40021000 	.word	0x40021000
 8004258:	02dc6c00 	.word	0x02dc6c00
 800425c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004260:	4b9b      	ldr	r3, [pc, #620]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426c:	d10f      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800426e:	4b99      	ldr	r3, [pc, #612]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004270:	61fb      	str	r3, [r7, #28]
          break;
 8004272:	e00c      	b.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004274:	4b96      	ldr	r3, [pc, #600]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d107      	bne.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004286:	61fb      	str	r3, [r7, #28]
          break;
 8004288:	e003      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800428a:	bf00      	nop
 800428c:	e2e0      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800428e:	bf00      	nop
 8004290:	e2de      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004292:	bf00      	nop
        break;
 8004294:	e2dc      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004296:	4b8e      	ldr	r3, [pc, #568]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a8:	d025      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b0:	d82c      	bhi.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b8:	d013      	beq.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c0:	d824      	bhi.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ce:	d004      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80042d0:	e01c      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042d2:	f7fe ff2d 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 80042d6:	61f8      	str	r0, [r7, #28]
          break;
 80042d8:	e01d      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80042da:	f7fe fe93 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 80042de:	61f8      	str	r0, [r7, #28]
          break;
 80042e0:	e019      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042e2:	4b7b      	ldr	r3, [pc, #492]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ee:	d10f      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80042f0:	4b78      	ldr	r3, [pc, #480]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80042f2:	61fb      	str	r3, [r7, #28]
          break;
 80042f4:	e00c      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042f6:	4b76      	ldr	r3, [pc, #472]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d107      	bne.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004308:	61fb      	str	r3, [r7, #28]
          break;
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800430c:	bf00      	nop
 800430e:	e29f      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004310:	bf00      	nop
 8004312:	e29d      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004314:	bf00      	nop
        break;
 8004316:	e29b      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004318:	4b6d      	ldr	r3, [pc, #436]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004322:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800432a:	d025      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004332:	d82c      	bhi.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800433a:	d013      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004342:	d824      	bhi.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004350:	d004      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004352:	e01c      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004354:	f7fe feec 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004358:	61f8      	str	r0, [r7, #28]
          break;
 800435a:	e01d      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800435c:	f7fe fe52 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8004360:	61f8      	str	r0, [r7, #28]
          break;
 8004362:	e019      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004364:	4b5a      	ldr	r3, [pc, #360]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d10f      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004372:	4b58      	ldr	r3, [pc, #352]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004374:	61fb      	str	r3, [r7, #28]
          break;
 8004376:	e00c      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004378:	4b55      	ldr	r3, [pc, #340]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d107      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800438a:	61fb      	str	r3, [r7, #28]
          break;
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800438e:	bf00      	nop
 8004390:	e25e      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004392:	bf00      	nop
 8004394:	e25c      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004396:	bf00      	nop
        break;
 8004398:	e25a      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800439a:	4b4d      	ldr	r3, [pc, #308]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043a4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ac:	d007      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043b4:	d12f      	bne.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80043b6:	f7fe fe25 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 80043ba:	61f8      	str	r0, [r7, #28]
          break;
 80043bc:	e02e      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ca:	d126      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80043cc:	4b40      	ldr	r3, [pc, #256]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80043d8:	4b3d      	ldr	r3, [pc, #244]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	fb03 f202 	mul.w	r2, r3, r2
 80043ec:	4b38      	ldr	r3, [pc, #224]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	3301      	adds	r3, #1
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80043fe:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	0e5b      	lsrs	r3, r3, #25
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	3301      	adds	r3, #1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	61fb      	str	r3, [r7, #28]
          break;
 8004414:	e001      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004416:	bf00      	nop
 8004418:	e21a      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800441a:	bf00      	nop
        break;
 800441c:	e218      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800441e:	4b2c      	ldr	r3, [pc, #176]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004420:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fe fe94 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004434:	61f8      	str	r0, [r7, #28]
        break;
 8004436:	e20b      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004438:	f7fe fde4 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 800443c:	61f8      	str	r0, [r7, #28]
        break;
 800443e:	e207      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004440:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004446:	f003 0318 	and.w	r3, r3, #24
 800444a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b10      	cmp	r3, #16
 8004450:	d010      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b10      	cmp	r3, #16
 8004456:	d834      	bhi.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d024      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004464:	e02d      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800446c:	f000 fbe2 	bl	8004c34 <RCCEx_GetSAIxPeriphCLKFreq>
 8004470:	61f8      	str	r0, [r7, #28]
          break;
 8004472:	e02b      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004474:	4b16      	ldr	r3, [pc, #88]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b02      	cmp	r3, #2
 800447e:	d122      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004480:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800448c:	4b10      	ldr	r3, [pc, #64]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	e005      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004498:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	4a0c      	ldr	r2, [pc, #48]	@ (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80044a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044aa:	61fb      	str	r3, [r7, #28]
          break;
 80044ac:	e00b      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044ae:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ba:	d106      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80044be:	61fb      	str	r3, [r7, #28]
          break;
 80044c0:	e003      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80044c2:	bf00      	nop
 80044c4:	e1c4      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044c6:	bf00      	nop
 80044c8:	e1c2      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044ca:	bf00      	nop
        break;
 80044cc:	e1c0      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	0800c0b4 	.word	0x0800c0b4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80044dc:	4b96      	ldr	r3, [pc, #600]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044e6:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ee:	d013      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f6:	d819      	bhi.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004504:	d004      	beq.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8004506:	e011      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe fe12 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 800450c:	61f8      	str	r0, [r7, #28]
          break;
 800450e:	e010      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004510:	f7fe fd78 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8004514:	61f8      	str	r0, [r7, #28]
          break;
 8004516:	e00c      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004518:	4b87      	ldr	r3, [pc, #540]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004524:	d104      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8004526:	4b85      	ldr	r3, [pc, #532]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004528:	61fb      	str	r3, [r7, #28]
          break;
 800452a:	e001      	b.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800452c:	bf00      	nop
 800452e:	e18f      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004530:	bf00      	nop
        break;
 8004532:	e18d      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004534:	4b80      	ldr	r3, [pc, #512]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800453e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004546:	d013      	beq.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454e:	d819      	bhi.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455c:	d004      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800455e:	e011      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004560:	f7fe fde6 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004564:	61f8      	str	r0, [r7, #28]
          break;
 8004566:	e010      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004568:	f7fe fd4c 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 800456c:	61f8      	str	r0, [r7, #28]
          break;
 800456e:	e00c      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004570:	4b71      	ldr	r3, [pc, #452]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457c:	d104      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800457e:	4b6f      	ldr	r3, [pc, #444]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004580:	61fb      	str	r3, [r7, #28]
          break;
 8004582:	e001      	b.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004584:	bf00      	nop
 8004586:	e163      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004588:	bf00      	nop
        break;
 800458a:	e161      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800458c:	4b6a      	ldr	r3, [pc, #424]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004596:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800459e:	d013      	beq.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045a6:	d819      	bhi.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b4:	d004      	beq.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80045b6:	e011      	b.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fe fdba 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 80045bc:	61f8      	str	r0, [r7, #28]
          break;
 80045be:	e010      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80045c0:	f7fe fd20 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 80045c4:	61f8      	str	r0, [r7, #28]
          break;
 80045c6:	e00c      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045c8:	4b5b      	ldr	r3, [pc, #364]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d4:	d104      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80045d6:	4b59      	ldr	r3, [pc, #356]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80045d8:	61fb      	str	r3, [r7, #28]
          break;
 80045da:	e001      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80045dc:	bf00      	nop
 80045de:	e137      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045e0:	bf00      	nop
        break;
 80045e2:	e135      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80045e4:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d011      	beq.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d818      	bhi.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d004      	beq.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004608:	e011      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800460a:	f7fe fd91 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 800460e:	61f8      	str	r0, [r7, #28]
          break;
 8004610:	e010      	b.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fcf7 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8004616:	61f8      	str	r0, [r7, #28]
          break;
 8004618:	e00c      	b.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800461a:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004626:	d104      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004628:	4b44      	ldr	r3, [pc, #272]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800462a:	61fb      	str	r3, [r7, #28]
          break;
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800462e:	bf00      	nop
 8004630:	e10e      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004632:	bf00      	nop
        break;
 8004634:	e10c      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004636:	4b40      	ldr	r3, [pc, #256]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004640:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004648:	d02c      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004650:	d833      	bhi.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004658:	d01a      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004660:	d82b      	bhi.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800466e:	d004      	beq.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004670:	e023      	b.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004672:	f7fe fd5d 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004676:	61f8      	str	r0, [r7, #28]
          break;
 8004678:	e026      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800467a:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800467c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d11a      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004688:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800468c:	61fb      	str	r3, [r7, #28]
          break;
 800468e:	e016      	b.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004690:	4b29      	ldr	r3, [pc, #164]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469c:	d111      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800469e:	4b27      	ldr	r3, [pc, #156]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80046a0:	61fb      	str	r3, [r7, #28]
          break;
 80046a2:	e00e      	b.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046a4:	4b24      	ldr	r3, [pc, #144]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d109      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80046b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b6:	61fb      	str	r3, [r7, #28]
          break;
 80046b8:	e005      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80046ba:	bf00      	nop
 80046bc:	e0c8      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046be:	bf00      	nop
 80046c0:	e0c6      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046c2:	bf00      	nop
 80046c4:	e0c4      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046c6:	bf00      	nop
        break;
 80046c8:	e0c2      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80046ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80046d4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046dc:	d030      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046e4:	d837      	bhi.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ec:	d01a      	beq.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f4:	d82f      	bhi.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004702:	d004      	beq.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004704:	e027      	b.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004706:	f7fe fd13 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 800470a:	61f8      	str	r0, [r7, #28]
          break;
 800470c:	e02a      	b.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800470e:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11e      	bne.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800471c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004720:	61fb      	str	r3, [r7, #28]
          break;
 8004722:	e01a      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d115      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8004732:	4b02      	ldr	r3, [pc, #8]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004734:	61fb      	str	r3, [r7, #28]
          break;
 8004736:	e012      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004738:	40021000 	.word	0x40021000
 800473c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004740:	4b46      	ldr	r3, [pc, #280]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d109      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004752:	61fb      	str	r3, [r7, #28]
          break;
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004756:	bf00      	nop
 8004758:	e07a      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800475a:	bf00      	nop
 800475c:	e078      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800475e:	bf00      	nop
 8004760:	e076      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004762:	bf00      	nop
        break;
 8004764:	e074      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004766:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004768:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800476c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004770:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004778:	d02c      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004780:	d855      	bhi.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800478e:	d004      	beq.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004790:	e04d      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004792:	f7fe fc37 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8004796:	61f8      	str	r0, [r7, #28]
          break;
 8004798:	e04e      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800479a:	4b30      	ldr	r3, [pc, #192]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d145      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80047a6:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80047b2:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	e005      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80047be:	4b27      	ldr	r3, [pc, #156]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	4a25      	ldr	r2, [pc, #148]	@ (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80047cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d0:	61fb      	str	r3, [r7, #28]
          break;
 80047d2:	e02e      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80047d4:	4b21      	ldr	r3, [pc, #132]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047e0:	d129      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ee:	d122      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047fa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	fb03 f202 	mul.w	r2, r3, r2
 8004804:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	3301      	adds	r3, #1
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004816:	4b11      	ldr	r3, [pc, #68]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	0d5b      	lsrs	r3, r3, #21
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	3301      	adds	r3, #1
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	61fb      	str	r3, [r7, #28]
          break;
 800482c:	e003      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800482e:	bf00      	nop
 8004830:	e00e      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004832:	bf00      	nop
 8004834:	e00c      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004836:	bf00      	nop
        break;
 8004838:	e00a      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800483a:	bf00      	nop
 800483c:	e008      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800483e:	bf00      	nop
 8004840:	e006      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004842:	bf00      	nop
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800484e:	bf00      	nop
    }
  }

  return(frequency);
 8004850:	69fb      	ldr	r3, [r7, #28]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	0800c0b4 	.word	0x0800c0b4

08004864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004872:	4b72      	ldr	r3, [pc, #456]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00e      	beq.n	800489c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800487e:	4b6f      	ldr	r3, [pc, #444]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0203 	and.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d103      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
       ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d142      	bne.n	800491c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
 800489a:	e03f      	b.n	800491c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d018      	beq.n	80048d6 <RCCEx_PLLSAI1_Config+0x72>
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d825      	bhi.n	80048f4 <RCCEx_PLLSAI1_Config+0x90>
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d002      	beq.n	80048b2 <RCCEx_PLLSAI1_Config+0x4e>
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d009      	beq.n	80048c4 <RCCEx_PLLSAI1_Config+0x60>
 80048b0:	e020      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048b2:	4b62      	ldr	r3, [pc, #392]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11d      	bne.n	80048fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c2:	e01a      	b.n	80048fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048c4:	4b5d      	ldr	r3, [pc, #372]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d4:	e013      	b.n	80048fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048d6:	4b59      	ldr	r3, [pc, #356]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048e2:	4b56      	ldr	r3, [pc, #344]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048f2:	e006      	b.n	8004902 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e004      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048fa:	bf00      	nop
 80048fc:	e002      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004902:	bf00      	nop
    }

    if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800490a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4949      	ldr	r1, [pc, #292]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 8086 	bne.w	8004a30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004924:	4b45      	ldr	r3, [pc, #276]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a44      	ldr	r2, [pc, #272]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 800492a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800492e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004930:	f7fd f80a 	bl	8001948 <HAL_GetTick>
 8004934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004936:	e009      	b.n	800494c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004938:	f7fd f806 	bl	8001948 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d902      	bls.n	800494c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	73fb      	strb	r3, [r7, #15]
        break;
 800494a:	e005      	b.n	8004958 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800494c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ef      	bne.n	8004938 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d168      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d113      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004964:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	4b35      	ldr	r3, [pc, #212]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1dc>)
 800496a:	4013      	ands	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	0211      	lsls	r1, r2, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	06d2      	lsls	r2, r2, #27
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6852      	ldr	r2, [r2, #4]
 800497e:	3a01      	subs	r2, #1
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	430a      	orrs	r2, r1
 8004984:	492d      	ldr	r1, [pc, #180]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004986:	4313      	orrs	r3, r2
 8004988:	610b      	str	r3, [r1, #16]
 800498a:	e02d      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d115      	bne.n	80049be <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004992:	4b2a      	ldr	r3, [pc, #168]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6892      	ldr	r2, [r2, #8]
 800499e:	0211      	lsls	r1, r2, #8
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6912      	ldr	r2, [r2, #16]
 80049a4:	0852      	lsrs	r2, r2, #1
 80049a6:	3a01      	subs	r2, #1
 80049a8:	0552      	lsls	r2, r2, #21
 80049aa:	4311      	orrs	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6852      	ldr	r2, [r2, #4]
 80049b0:	3a01      	subs	r2, #1
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	430a      	orrs	r2, r1
 80049b6:	4921      	ldr	r1, [pc, #132]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	610b      	str	r3, [r1, #16]
 80049bc:	e014      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049be:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6892      	ldr	r2, [r2, #8]
 80049ca:	0211      	lsls	r1, r2, #8
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6952      	ldr	r2, [r2, #20]
 80049d0:	0852      	lsrs	r2, r2, #1
 80049d2:	3a01      	subs	r2, #1
 80049d4:	0652      	lsls	r2, r2, #25
 80049d6:	4311      	orrs	r1, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6852      	ldr	r2, [r2, #4]
 80049dc:	3a01      	subs	r2, #1
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	430a      	orrs	r2, r1
 80049e2:	4916      	ldr	r1, [pc, #88]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049e8:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fc ffa8 	bl	8001948 <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fc:	f7fc ffa4 	bl	8001948 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a0e:	e005      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ef      	beq.n	80049fc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	4904      	ldr	r1, [pc, #16]	@ (8004a3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	07ff800f 	.word	0x07ff800f
 8004a44:	ff9f800f 	.word	0xff9f800f
 8004a48:	f9ff800f 	.word	0xf9ff800f

08004a4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a5a:	4b72      	ldr	r3, [pc, #456]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a66:	4b6f      	ldr	r3, [pc, #444]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0203 	and.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d103      	bne.n	8004a7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
       ||
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d142      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e03f      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d018      	beq.n	8004abe <RCCEx_PLLSAI2_Config+0x72>
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d825      	bhi.n	8004adc <RCCEx_PLLSAI2_Config+0x90>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d002      	beq.n	8004a9a <RCCEx_PLLSAI2_Config+0x4e>
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d009      	beq.n	8004aac <RCCEx_PLLSAI2_Config+0x60>
 8004a98:	e020      	b.n	8004adc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a9a:	4b62      	ldr	r3, [pc, #392]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11d      	bne.n	8004ae2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aaa:	e01a      	b.n	8004ae2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aac:	4b5d      	ldr	r3, [pc, #372]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004abc:	e013      	b.n	8004ae6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004abe:	4b59      	ldr	r3, [pc, #356]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aca:	4b56      	ldr	r3, [pc, #344]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ada:	e006      	b.n	8004aea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae0:	e004      	b.n	8004aec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004af2:	4b4c      	ldr	r3, [pc, #304]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4949      	ldr	r1, [pc, #292]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8086 	bne.w	8004c18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b0c:	4b45      	ldr	r3, [pc, #276]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a44      	ldr	r2, [pc, #272]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b18:	f7fc ff16 	bl	8001948 <HAL_GetTick>
 8004b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b1e:	e009      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b20:	f7fc ff12 	bl	8001948 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d902      	bls.n	8004b34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	73fb      	strb	r3, [r7, #15]
        break;
 8004b32:	e005      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b34:	4b3b      	ldr	r3, [pc, #236]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ef      	bne.n	8004b20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d168      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b4c:	4b35      	ldr	r3, [pc, #212]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6892      	ldr	r2, [r2, #8]
 8004b58:	0211      	lsls	r1, r2, #8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	06d2      	lsls	r2, r2, #27
 8004b60:	4311      	orrs	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6852      	ldr	r2, [r2, #4]
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	492d      	ldr	r1, [pc, #180]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	614b      	str	r3, [r1, #20]
 8004b72:	e02d      	b.n	8004bd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d115      	bne.n	8004ba6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6892      	ldr	r2, [r2, #8]
 8004b86:	0211      	lsls	r1, r2, #8
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6912      	ldr	r2, [r2, #16]
 8004b8c:	0852      	lsrs	r2, r2, #1
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	0552      	lsls	r2, r2, #21
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6852      	ldr	r2, [r2, #4]
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0112      	lsls	r2, r2, #4
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	4921      	ldr	r1, [pc, #132]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	614b      	str	r3, [r1, #20]
 8004ba4:	e014      	b.n	8004bd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6892      	ldr	r2, [r2, #8]
 8004bb2:	0211      	lsls	r1, r2, #8
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6952      	ldr	r2, [r2, #20]
 8004bb8:	0852      	lsrs	r2, r2, #1
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	0652      	lsls	r2, r2, #25
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6852      	ldr	r2, [r2, #4]
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	4916      	ldr	r1, [pc, #88]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bd0:	4b14      	ldr	r3, [pc, #80]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a13      	ldr	r2, [pc, #76]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fc feb4 	bl	8001948 <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004be2:	e009      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004be4:	f7fc feb0 	bl	8001948 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d902      	bls.n	8004bf8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8004bf6:	e005      	b.n	8004c04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	4904      	ldr	r1, [pc, #16]	@ (8004c24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	07ff800f 	.word	0x07ff800f
 8004c2c:	ff9f800f 	.word	0xff9f800f
 8004c30:	f9ff800f 	.word	0xf9ff800f

08004c34 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	@ 0x24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c50:	d10b      	bne.n	8004c6a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004c52:	4b7e      	ldr	r3, [pc, #504]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c58:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004c5c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b60      	cmp	r3, #96	@ 0x60
 8004c62:	d112      	bne.n	8004c8a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c64:	4b7a      	ldr	r3, [pc, #488]	@ (8004e50 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e00f      	b.n	8004c8a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c70:	d10b      	bne.n	8004c8a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004c72:	4b76      	ldr	r3, [pc, #472]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c7c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c84:	d101      	bne.n	8004c8a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004c86:	4b72      	ldr	r3, [pc, #456]	@ (8004e50 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004c88:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 80d6 	bne.w	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d003      	beq.n	8004ca4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca2:	d13b      	bne.n	8004d1c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ca4:	4b69      	ldr	r3, [pc, #420]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cb0:	f040 80c4 	bne.w	8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004cb4:	4b65      	ldr	r3, [pc, #404]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80bd 	beq.w	8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cc2:	4b62      	ldr	r3, [pc, #392]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	3301      	adds	r3, #1
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	0edb      	lsrs	r3, r3, #27
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004cf4:	4b55      	ldr	r3, [pc, #340]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004d00:	2311      	movs	r3, #17
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e001      	b.n	8004d0a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004d06:	2307      	movs	r3, #7
 8004d08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d1a:	e08f      	b.n	8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d13a      	bne.n	8004d98 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004d22:	4b4a      	ldr	r3, [pc, #296]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d2e:	f040 8086 	bne.w	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004d32:	4b46      	ldr	r3, [pc, #280]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d07f      	beq.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004d3e:	4b43      	ldr	r3, [pc, #268]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	3301      	adds	r3, #1
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d52:	4b3e      	ldr	r3, [pc, #248]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	0edb      	lsrs	r3, r3, #27
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004d70:	4b36      	ldr	r3, [pc, #216]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004d7c:	2311      	movs	r3, #17
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e001      	b.n	8004d86 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004d82:	2307      	movs	r3, #7
 8004d84:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	fb03 f202 	mul.w	r2, r3, r2
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	e052      	b.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b80      	cmp	r3, #128	@ 0x80
 8004d9c:	d003      	beq.n	8004da6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da4:	d109      	bne.n	8004dba <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004da6:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db2:	d144      	bne.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004db6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004db8:	e041      	b.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d003      	beq.n	8004dc8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc6:	d13a      	bne.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004dc8:	4b20      	ldr	r3, [pc, #128]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd4:	d133      	bne.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02d      	beq.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004de2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	3301      	adds	r3, #1
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e00:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	0edb      	lsrs	r3, r3, #27
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004e14:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004e20:	2311      	movs	r3, #17
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e001      	b.n	8004e2a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004e26:	2307      	movs	r3, #7
 8004e28:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	fb03 f202 	mul.w	r2, r3, r2
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	e000      	b.n	8004e3e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004e3c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3724      	adds	r7, #36	@ 0x24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	001fff68 	.word	0x001fff68
 8004e54:	00f42400 	.word	0x00f42400

08004e58 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	@ 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e1c7      	b.n	80051fa <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d10e      	bne.n	8004e92 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a81      	ldr	r2, [pc, #516]	@ (8005080 <HAL_SAI_Init+0x228>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d107      	bne.n	8004e8e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d103      	bne.n	8004e8e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1b3      	b.n	80051fa <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc fbc8 	bl	800163c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f9b1 	bl	8005214 <SAI_Disable>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e19e      	b.n	80051fa <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d00c      	beq.n	8004ee6 <HAL_SAI_Init+0x8e>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d80d      	bhi.n	8004eec <HAL_SAI_Init+0x94>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SAI_Init+0x82>
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d003      	beq.n	8004ee0 <HAL_SAI_Init+0x88>
 8004ed8:	e008      	b.n	8004eec <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ede:	e008      	b.n	8004ef2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ee4:	e005      	b.n	8004ef2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004ee6:	2320      	movs	r3, #32
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004eea:	e002      	b.n	8004ef2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ef0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d81d      	bhi.n	8004f36 <HAL_SAI_Init+0xde>
 8004efa:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <HAL_SAI_Init+0xa8>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f17 	.word	0x08004f17
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	08004f27 	.word	0x08004f27
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
      break;
 8004f14:	e012      	b.n	8004f3c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f1a:	61fb      	str	r3, [r7, #28]
      break;
 8004f1c:	e00e      	b.n	8004f3c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f22:	61fb      	str	r3, [r7, #28]
      break;
 8004f24:	e00a      	b.n	8004f3c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f2a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004f34:	e002      	b.n	8004f3c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
      break;
 8004f3a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a4f      	ldr	r2, [pc, #316]	@ (8005080 <HAL_SAI_Init+0x228>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_SAI_Init+0xf8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005084 <HAL_SAI_Init+0x22c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d103      	bne.n	8004f58 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004f50:	4a4d      	ldr	r2, [pc, #308]	@ (8005088 <HAL_SAI_Init+0x230>)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e002      	b.n	8004f5e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004f58:	4a4c      	ldr	r2, [pc, #304]	@ (800508c <HAL_SAI_Init+0x234>)
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d073      	beq.n	800504e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a45      	ldr	r2, [pc, #276]	@ (8005080 <HAL_SAI_Init+0x228>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_SAI_Init+0x122>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a43      	ldr	r2, [pc, #268]	@ (8005084 <HAL_SAI_Init+0x22c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d105      	bne.n	8004f86 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004f7e:	f7fe fd51 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f82:	61b8      	str	r0, [r7, #24]
 8004f84:	e004      	b.n	8004f90 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004f86:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004f8a:	f7fe fd4b 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f8e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f98:	d120      	bne.n	8004fdc <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d102      	bne.n	8004fa8 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004fa2:	2340      	movs	r3, #64	@ 0x40
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	e00a      	b.n	8004fbe <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d103      	bne.n	8004fb8 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	e002      	b.n	8004fbe <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4619      	mov	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e017      	b.n	800500c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fe4:	d101      	bne.n	8004fea <HAL_SAI_Init+0x192>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e000      	b.n	8004fec <HAL_SAI_Init+0x194>
 8004fea:	2301      	movs	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	fbb1 f3f3 	udiv	r3, r1, r3
 800500a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4a20      	ldr	r2, [pc, #128]	@ (8005090 <HAL_SAI_Init+0x238>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	08da      	lsrs	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800501a:	6979      	ldr	r1, [r7, #20]
 800501c:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <HAL_SAI_Init+0x238>)
 800501e:	fba3 2301 	umull	r2, r3, r3, r1
 8005022:	08da      	lsrs	r2, r3, #3
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	1aca      	subs	r2, r1, r3
 800502e:	2a08      	cmp	r2, #8
 8005030:	d904      	bls.n	800503c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	2b04      	cmp	r3, #4
 8005042:	d104      	bne.n	800504e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	085a      	lsrs	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_SAI_Init+0x206>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d109      	bne.n	8005072 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_SAI_Init+0x212>
 8005066:	2300      	movs	r3, #0
 8005068:	e001      	b.n	800506e <HAL_SAI_Init+0x216>
 800506a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	e012      	b.n	8005098 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10c      	bne.n	8005094 <HAL_SAI_Init+0x23c>
 800507a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800507e:	e00a      	b.n	8005096 <HAL_SAI_Init+0x23e>
 8005080:	40015404 	.word	0x40015404
 8005084:	40015424 	.word	0x40015424
 8005088:	40015400 	.word	0x40015400
 800508c:	40015800 	.word	0x40015800
 8005090:	cccccccd 	.word	0xcccccccd
 8005094:	2300      	movs	r3, #0
 8005096:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b58      	ldr	r3, [pc, #352]	@ (8005204 <HAL_SAI_Init+0x3ac>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050bc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c2:	431a      	orrs	r2, r3
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80050d0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050dc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	051b      	lsls	r3, r3, #20
 80050e4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80050ea:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005102:	f023 030f 	bic.w	r3, r3, #15
 8005106:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b35      	ldr	r3, [pc, #212]	@ (8005208 <HAL_SAI_Init+0x3b0>)
 8005132:	400b      	ands	r3, r1
 8005134:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6899      	ldr	r1, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005140:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005146:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800514c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8005152:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005158:	3b01      	subs	r3, #1
 800515a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800515c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68d9      	ldr	r1, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005174:	400b      	ands	r3, r1
 8005176:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68d9      	ldr	r1, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005186:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800518e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005194:	3b01      	subs	r3, #1
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a19      	ldr	r2, [pc, #100]	@ (800520c <HAL_SAI_Init+0x3b4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d119      	bne.n	80051e0 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80051ac:	4b18      	ldr	r3, [pc, #96]	@ (8005210 <HAL_SAI_Init+0x3b8>)
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <HAL_SAI_Init+0x3b8>)
 80051b2:	f023 0301 	bic.w	r3, r3, #1
 80051b6:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	3b01      	subs	r3, #1
 80051cc:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80051ce:	4910      	ldr	r1, [pc, #64]	@ (8005210 <HAL_SAI_Init+0x3b8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80051d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <HAL_SAI_Init+0x3b8>)
 80051d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <HAL_SAI_Init+0x3b8>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3728      	adds	r7, #40	@ 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	f805c010 	.word	0xf805c010
 8005208:	fff88000 	.word	0xfff88000
 800520c:	40015404 	.word	0x40015404
 8005210:	40015400 	.word	0x40015400

08005214 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800521c:	4b18      	ldr	r3, [pc, #96]	@ (8005280 <SAI_Disable+0x6c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <SAI_Disable+0x70>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	0b1b      	lsrs	r3, r3, #12
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800523e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	72fb      	strb	r3, [r7, #11]
      break;
 800525a:	e009      	b.n	8005270 <SAI_Disable+0x5c>
    }
    count--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b01      	subs	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e7      	bne.n	8005240 <SAI_Disable+0x2c>

  return status;
 8005270:	7afb      	ldrb	r3, [r7, #11]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000000 	.word	0x20000000
 8005284:	95cbec1b 	.word	0x95cbec1b

08005288 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	@ 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e083      	b.n	80053a2 <HAL_SD_Init+0x11a>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fb ff05 	bl	80010bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2203      	movs	r2, #3
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f876 	bl	80053ac <HAL_SD_InitCard>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06b      	b.n	80053a2 <HAL_SD_Init+0x11a>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fab1 	bl	8005838 <HAL_SD_GetCardStatus>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e060      	b.n	80053a2 <HAL_SD_Init+0x11a>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80052e0:	7e3b      	ldrb	r3, [r7, #24]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80052e6:	7e7b      	ldrb	r3, [r7, #25]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10a      	bne.n	800530a <HAL_SD_Init+0x82>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <HAL_SD_Init+0x78>
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005308:	e00b      	b.n	8005322 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d104      	bne.n	800531c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005318:	65da      	str	r2, [r3, #92]	@ 0x5c
 800531a:	e002      	b.n	8005322 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fb3b 	bl	80059a4 <HAL_SD_ConfigWideBusOperation>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e034      	b.n	80053a2 <HAL_SD_Init+0x11a>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005338:	f7fc fb06 	bl	8001948 <HAL_GetTick>
 800533c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800533e:	e014      	b.n	800536a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005340:	f7fc fb02 	bl	8001948 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d10c      	bne.n	800536a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e01b      	b.n	80053a2 <HAL_SD_Init+0x11a>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc2e 	bl	8005bcc <HAL_SD_GetCardState>
 8005370:	4603      	mov	r3, r0
 8005372:	2b04      	cmp	r3, #4
 8005374:	d1e4      	bne.n	8005340 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fb11 	bl	80059a4 <HAL_SD_ConfigWideBusOperation>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e00a      	b.n	80053a2 <HAL_SD_Init+0x11a>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3728      	adds	r7, #40	@ 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053ac:	b5b0      	push	{r4, r5, r7, lr}
 80053ae:	b08e      	sub	sp, #56	@ 0x38
 80053b0:	af04      	add	r7, sp, #16
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80053c4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80053c8:	f7fe fb2c 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e079      	b.n	80054dc <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	4a3d      	ldr	r2, [pc, #244]	@ (80054e4 <HAL_SD_InitCard+0x138>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0210 	orr.w	r2, r2, #16
 8005412:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681d      	ldr	r5, [r3, #0]
 8005418:	466c      	mov	r4, sp
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542c:	4628      	mov	r0, r5
 800542e:	f002 f9f5 	bl	800781c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f002 fa27 	bl	800788a <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005448:	4a27      	ldr	r2, [pc, #156]	@ (80054e8 <HAL_SD_InitCard+0x13c>)
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	3301      	adds	r3, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f7fc fa84 	bl	8001960 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fc97 	bl	8005d8c <SD_PowerON>
 800545e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e02e      	b.n	80054dc <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fbc4 	bl	8005c0c <SD_InitCard>
 8005484:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e01b      	b.n	80054dc <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 fa83 	bl	80079b8 <SDMMC_CmdBlockLength>
 80054b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00f      	beq.n	80054da <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a0b      	ldr	r2, [pc, #44]	@ (80054ec <HAL_SD_InitCard+0x140>)
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3728      	adds	r7, #40	@ 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bdb0      	pop	{r4, r5, r7, pc}
 80054e4:	014f8b59 	.word	0x014f8b59
 80054e8:	00012110 	.word	0x00012110
 80054ec:	1fe00fff 	.word	0x1fe00fff

080054f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fe:	0f9b      	lsrs	r3, r3, #30
 8005500:	b2da      	uxtb	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550a:	0e9b      	lsrs	r3, r3, #26
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	b2da      	uxtb	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551c:	0e1b      	lsrs	r3, r3, #24
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	b2da      	uxtb	r2, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552e:	0c1b      	lsrs	r3, r3, #16
 8005530:	b2da      	uxtb	r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	b2da      	uxtb	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005546:	b2da      	uxtb	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005550:	0d1b      	lsrs	r3, r3, #20
 8005552:	b29a      	uxth	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	b2da      	uxtb	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800556e:	0bdb      	lsrs	r3, r3, #15
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005580:	0b9b      	lsrs	r3, r3, #14
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	b2da      	uxtb	r2, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005592:	0b5b      	lsrs	r3, r3, #13
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	b2da      	uxtb	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a4:	0b1b      	lsrs	r3, r3, #12
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2200      	movs	r2, #0
 80055b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d163      	bne.n	8005688 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055c4:	009a      	lsls	r2, r3, #2
 80055c6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055ca:	4013      	ands	r3, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055d0:	0f92      	lsrs	r2, r2, #30
 80055d2:	431a      	orrs	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055dc:	0edb      	lsrs	r3, r3, #27
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055ee:	0e1b      	lsrs	r3, r3, #24
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005600:	0d5b      	lsrs	r3, r3, #21
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	b2da      	uxtb	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005612:	0c9b      	lsrs	r3, r3, #18
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	b2da      	uxtb	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005624:	0bdb      	lsrs	r3, r3, #15
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	b2da      	uxtb	r2, r3
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	7e1b      	ldrb	r3, [r3, #24]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	3302      	adds	r3, #2
 8005648:	2201      	movs	r2, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005652:	fb03 f202 	mul.w	r2, r3, r2
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	7a1b      	ldrb	r3, [r3, #8]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2201      	movs	r2, #1
 8005666:	409a      	lsls	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005674:	0a52      	lsrs	r2, r2, #9
 8005676:	fb03 f202 	mul.w	r2, r3, r2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005684:	659a      	str	r2, [r3, #88]	@ 0x58
 8005686:	e031      	b.n	80056ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d11d      	bne.n	80056cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	431a      	orrs	r2, r3
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	3301      	adds	r3, #1
 80056ac:	029a      	lsls	r2, r3, #10
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80056ca:	e00f      	b.n	80056ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a58      	ldr	r2, [pc, #352]	@ (8005834 <HAL_SD_GetCardCSD+0x344>)
 80056d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e09d      	b.n	8005828 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056f0:	0b9b      	lsrs	r3, r3, #14
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800570a:	b2da      	uxtb	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571a:	b2da      	uxtb	r2, r3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005724:	0fdb      	lsrs	r3, r3, #31
 8005726:	b2da      	uxtb	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005730:	0f5b      	lsrs	r3, r3, #29
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	b2da      	uxtb	r2, r3
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005742:	0e9b      	lsrs	r3, r3, #26
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	b2da      	uxtb	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005754:	0d9b      	lsrs	r3, r3, #22
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	b2da      	uxtb	r2, r3
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005766:	0d5b      	lsrs	r3, r3, #21
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005782:	0c1b      	lsrs	r3, r3, #16
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005796:	0bdb      	lsrs	r3, r3, #15
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057aa:	0b9b      	lsrs	r3, r3, #14
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057be:	0b5b      	lsrs	r3, r3, #13
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d2:	0b1b      	lsrs	r3, r3, #12
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e6:	0a9b      	lsrs	r3, r3, #10
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	b2da      	uxtb	r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005816:	b2da      	uxtb	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	1fe00fff 	.word	0x1fe00fff

08005838 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b094      	sub	sp, #80	@ 0x50
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fba8 	bl	8005fa4 <SD_SendSDStatus>
 8005854:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005858:	2b00      	cmp	r3, #0
 800585a:	d011      	beq.n	8005880 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a4f      	ldr	r2, [pc, #316]	@ (80059a0 <HAL_SD_GetCardStatus+0x168>)
 8005862:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800587e:	e070      	b.n	8005962 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	099b      	lsrs	r3, r3, #6
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	b2da      	uxtb	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	0e1b      	lsrs	r3, r3, #24
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	061a      	lsls	r2, r3, #24
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058c6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80058d0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0e1b      	lsrs	r3, r3, #24
 80058d6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	0d1b      	lsrs	r3, r3, #20
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	b29b      	uxth	r3, r3
 8005904:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005908:	b29a      	uxth	r2, r3
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	b29b      	uxth	r3, r3
 8005912:	4313      	orrs	r3, r2
 8005914:	b29a      	uxth	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	0a9b      	lsrs	r3, r3, #10
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005924:	b2da      	uxtb	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	b2da      	uxtb	r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	b2da      	uxtb	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	b2da      	uxtb	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	0e1b      	lsrs	r3, r3, #24
 800595c:	b2da      	uxtb	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800596a:	4618      	mov	r0, r3
 800596c:	f002 f824 	bl	80079b8 <SDMMC_CmdBlockLength>
 8005970:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a08      	ldr	r2, [pc, #32]	@ (80059a0 <HAL_SD_GetCardStatus+0x168>)
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8005994:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005998:	4618      	mov	r0, r3
 800599a:	3750      	adds	r7, #80	@ 0x50
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	1fe00fff 	.word	0x1fe00fff

080059a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80059a4:	b5b0      	push	{r4, r5, r7, lr}
 80059a6:	b090      	sub	sp, #64	@ 0x40
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2203      	movs	r2, #3
 80059b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d02e      	beq.n	8005a22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ca:	d106      	bne.n	80059da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80059d8:	e029      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059e0:	d10a      	bne.n	80059f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fbd6 	bl	8006194 <SD_WideBus_Enable>
 80059e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80059f6:	e01a      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fc13 	bl	800622a <SD_WideBus_Disable>
 8005a04:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a12:	e00c      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a20:	e005      	b.n	8005a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a60      	ldr	r2, [pc, #384]	@ (8005bbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a44:	e097      	b.n	8005b76 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005a46:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005a4a:	f7fd ffeb 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a4e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8086 	beq.w	8005b64 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	4952      	ldr	r1, [pc, #328]	@ (8005bc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005a76:	fba1 1303 	umull	r1, r3, r1, r3
 8005a7a:	0e1b      	lsrs	r3, r3, #24
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d303      	bcc.n	8005a88 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	e05a      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a90:	d103      	bne.n	8005a9a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	e051      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa2:	d126      	bne.n	8005af2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10e      	bne.n	8005aca <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	4a45      	ldr	r2, [pc, #276]	@ (8005bc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d906      	bls.n	8005ac2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	4a42      	ldr	r2, [pc, #264]	@ (8005bc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	0e5b      	lsrs	r3, r3, #25
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	e03d      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e039      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8005bc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d906      	bls.n	8005aea <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	4a38      	ldr	r2, [pc, #224]	@ (8005bc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	0e5b      	lsrs	r3, r3, #25
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e029      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e025      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10e      	bne.n	8005b18 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	4a32      	ldr	r2, [pc, #200]	@ (8005bc8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d906      	bls.n	8005b10 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	0e1b      	lsrs	r3, r3, #24
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e016      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	e012      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	4a28      	ldr	r2, [pc, #160]	@ (8005bc8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d906      	bls.n	8005b38 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	4a24      	ldr	r2, [pc, #144]	@ (8005bc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	0e1b      	lsrs	r3, r3, #24
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	e002      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681d      	ldr	r5, [r3, #0]
 8005b48:	466c      	mov	r4, sp
 8005b4a:	f107 0318 	add.w	r3, r7, #24
 8005b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f001 fe5d 	bl	800781c <SDMMC_Init>
 8005b62:	e008      	b.n	8005b76 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 ff1a 	bl	80079b8 <SDMMC_CmdBlockLength>
 8005b84:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005b92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3730      	adds	r7, #48	@ 0x30
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	1fe00fff 	.word	0x1fe00fff
 8005bc0:	55e63b89 	.word	0x55e63b89
 8005bc4:	02faf080 	.word	0x02faf080
 8005bc8:	017d7840 	.word	0x017d7840

08005bcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fab0 	bl	8006144 <SD_SendStatus>
 8005be4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0a5b      	lsrs	r3, r3, #9
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005c02:	693b      	ldr	r3, [r7, #16]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c0c:	b5b0      	push	{r4, r5, r7, lr}
 8005c0e:	b090      	sub	sp, #64	@ 0x40
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005c14:	2301      	movs	r3, #1
 8005c16:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fe46 	bl	80078ae <SDMMC_GetPowerState>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d102      	bne.n	8005c2e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c28:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005c2c:	e0a9      	b.n	8005d82 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d02e      	beq.n	8005c94 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 ffc9 	bl	8007bd2 <SDMMC_CmdSendCID>
 8005c40:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <SD_InitCard+0x40>
    {
      return errorstate;
 8005c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4a:	e09a      	b.n	8005d82 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fe71 	bl	800793a <SDMMC_GetResponse>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2104      	movs	r1, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fe68 	bl	800793a <SDMMC_GetResponse>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2108      	movs	r1, #8
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fe5f 	bl	800793a <SDMMC_GetResponse>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	210c      	movs	r1, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fe56 	bl	800793a <SDMMC_GetResponse>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d00d      	beq.n	8005cb8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f107 020e 	add.w	r2, r7, #14
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 ffd2 	bl	8007c50 <SDMMC_CmdSetRelAdd>
 8005cac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <SD_InitCard+0xac>
    {
      return errorstate;
 8005cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb6:	e064      	b.n	8005d82 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d036      	beq.n	8005d2e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f001 ff9b 	bl	8007c10 <SDMMC_CmdSendCSD>
 8005cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <SD_InitCard+0xda>
    {
      return errorstate;
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	e04d      	b.n	8005d82 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fe24 	bl	800793a <SDMMC_GetResponse>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fe1b 	bl	800793a <SDMMC_GetResponse>
 8005d04:	4602      	mov	r2, r0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2108      	movs	r1, #8
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fe12 	bl	800793a <SDMMC_GetResponse>
 8005d16:	4602      	mov	r2, r0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	210c      	movs	r1, #12
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fe09 	bl	800793a <SDMMC_GetResponse>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2104      	movs	r1, #4
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fe00 	bl	800793a <SDMMC_GetResponse>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	0d1a      	lsrs	r2, r3, #20
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005d42:	f107 0310 	add.w	r3, r7, #16
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fbd1 	bl	80054f0 <HAL_SD_GetCardCSD>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d58:	e013      	b.n	8005d82 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	2200      	movs	r2, #0
 8005d66:	461c      	mov	r4, r3
 8005d68:	4615      	mov	r5, r2
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	4608      	mov	r0, r1
 8005d70:	f001 fe45 	bl	80079fe <SDMMC_CmdSelDesel>
 8005d74:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <SD_InitCard+0x174>
  {
    return errorstate;
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d7e:	e000      	b.n	8005d82 <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3740      	adds	r7, #64	@ 0x40
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005d8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005da0:	f7fb fdd2 	bl	8001948 <HAL_GetTick>
 8005da4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fe4b 	bl	8007a46 <SDMMC_CmdGoIdleState>
 8005db0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <SD_PowerON+0x30>
  {
    return errorstate;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	e0ed      	b.n	8005f98 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fe5e 	bl	8007a82 <SDMMC_CmdOperCond>
 8005dc6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 fe34 	bl	8007a46 <SDMMC_CmdGoIdleState>
 8005dde:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <SD_PowerON+0x64>
    {
      return errorstate;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	e0d6      	b.n	8005f98 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d137      	bne.n	8005e68 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fe5f 	bl	8007ac2 <SDMMC_CmdAppCommand>
 8005e04:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02d      	beq.n	8005e68 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e10:	e0c2      	b.n	8005f98 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fe52 	bl	8007ac2 <SDMMC_CmdAppCommand>
 8005e1e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <SD_PowerON+0x9e>
    {
      return errorstate;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	e0b6      	b.n	8005f98 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	495c      	ldr	r1, [pc, #368]	@ (8005fa0 <SD_PowerON+0x214>)
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fe69 	bl	8007b08 <SDMMC_CmdAppOperCommand>
 8005e36:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e42:	e0a9      	b.n	8005f98 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 fd75 	bl	800793a <SDMMC_GetResponse>
 8005e50:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	0fdb      	lsrs	r3, r3, #31
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <SD_PowerON+0xd2>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <SD_PowerON+0xd4>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]

    count++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d802      	bhi.n	8005e78 <SD_PowerON+0xec>
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0cc      	beq.n	8005e12 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d902      	bls.n	8005e88 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e86:	e087      	b.n	8005f98 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d07e      	beq.n	8005f90 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d17a      	bne.n	8005f96 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d075      	beq.n	8005f96 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0208 	orr.w	r2, r2, #8
 8005ec0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 ff29 	bl	8007d1e <SDMMC_CmdVoltageSwitch>
 8005ecc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00c      	beq.n	8005eee <SD_PowerON+0x162>
        {
          return errorstate;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	e05f      	b.n	8005f98 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ed8:	f7fb fd36 	bl	8001948 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d102      	bne.n	8005eee <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8005ee8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005eec:	e054      	b.n	8005f98 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ef8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005efc:	d1ec      	bne.n	8005ed8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f16:	d002      	beq.n	8005f1e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005f18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005f1c:	e03c      	b.n	8005f98 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f000 fa9e 	bl	8006460 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0204 	orr.w	r2, r2, #4
 8005f32:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005f34:	e00a      	b.n	8005f4c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f36:	f7fb fd07 	bl	8001948 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d102      	bne.n	8005f4c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8005f46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f4a:	e025      	b.n	8005f98 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f5a:	d1ec      	bne.n	8005f36 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f74:	d102      	bne.n	8005f7c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005f76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f7a:	e00d      	b.n	8005f98 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2213      	movs	r2, #19
 8005f82:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f8e:	e002      	b.n	8005f96 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	c1100000 	.word	0xc1100000

08005fa4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	@ 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fae:	f7fb fccb 	bl	8001948 <HAL_GetTick>
 8005fb2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 fcbb 	bl	800793a <SDMMC_GetResponse>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fce:	d102      	bne.n	8005fd6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005fd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fd4:	e0b0      	b.n	8006138 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2140      	movs	r1, #64	@ 0x40
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fceb 	bl	80079b8 <SDMMC_CmdBlockLength>
 8005fe2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	e0a0      	b.n	8006138 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f001 fd5d 	bl	8007ac2 <SDMMC_CmdAppCommand>
 8006008:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	e08d      	b.n	8006138 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006022:	2340      	movs	r3, #64	@ 0x40
 8006024:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006026:	2360      	movs	r3, #96	@ 0x60
 8006028:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800602a:	2302      	movs	r3, #2
 800602c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006032:	2301      	movs	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f107 0208 	add.w	r2, r7, #8
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fc8d 	bl	8007960 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fe45 	bl	8007cda <SDMMC_CmdStatusRegister>
 8006050:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d02b      	beq.n	80060b0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	e069      	b.n	8006138 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d013      	beq.n	800609a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006072:	2300      	movs	r3, #0
 8006074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006076:	e00d      	b.n	8006094 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f001 fbf7 	bl	8007870 <SDMMC_ReadFIFO>
 8006082:	4602      	mov	r2, r0
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	601a      	str	r2, [r3, #0]
        pData++;
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	3304      	adds	r3, #4
 800608c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	3301      	adds	r3, #1
 8006092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	2b07      	cmp	r3, #7
 8006098:	d9ee      	bls.n	8006078 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800609a:	f7fb fc55 	bl	8001948 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d102      	bne.n	80060b0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80060aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060ae:	e043      	b.n	8006138 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0d2      	beq.n	8006064 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80060cc:	2308      	movs	r3, #8
 80060ce:	e033      	b.n	8006138 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80060de:	2302      	movs	r3, #2
 80060e0:	e02a      	b.n	8006138 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d017      	beq.n	8006120 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80060f0:	2320      	movs	r3, #32
 80060f2:	e021      	b.n	8006138 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fbb9 	bl	8007870 <SDMMC_ReadFIFO>
 80060fe:	4602      	mov	r2, r0
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	601a      	str	r2, [r3, #0]
    pData++;
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	3304      	adds	r3, #4
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800610a:	f7fb fc1d 	bl	8001948 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d102      	bne.n	8006120 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800611a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800611e:	e00b      	b.n	8006138 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e2      	bne.n	80060f4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a03      	ldr	r2, [pc, #12]	@ (8006140 <SD_SendSDStatus+0x19c>)
 8006134:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3730      	adds	r7, #48	@ 0x30
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	18000f3a 	.word	0x18000f3a

08006144 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006154:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006158:	e018      	b.n	800618c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f001 fd94 	bl	8007c94 <SDMMC_CmdSendStatus>
 800616c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e009      	b.n	800618c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f001 fbdb 	bl	800793a <SDMMC_GetResponse>
 8006184:	4602      	mov	r2, r0
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fbc5 	bl	800793a <SDMMC_GetResponse>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061ba:	d102      	bne.n	80061c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80061c0:	e02f      	b.n	8006222 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f879 	bl	80062c0 <SD_FindSCR>
 80061ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	e023      	b.n	8006222 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01c      	beq.n	800621e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f001 fc66 	bl	8007ac2 <SDMMC_CmdAppCommand>
 80061f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	e00f      	b.n	8006222 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2102      	movs	r1, #2
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fc9d 	bl	8007b48 <SDMMC_CmdBusWidth>
 800620e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	e003      	b.n	8006222 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800621a:	2300      	movs	r3, #0
 800621c:	e001      	b.n	8006222 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800621e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2100      	movs	r1, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f001 fb7a 	bl	800793a <SDMMC_GetResponse>
 8006246:	4603      	mov	r3, r0
 8006248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800624c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006250:	d102      	bne.n	8006258 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006256:	e02f      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f82e 	bl	80062c0 <SD_FindSCR>
 8006264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	e023      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01c      	beq.n	80062b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f001 fc1b 	bl	8007ac2 <SDMMC_CmdAppCommand>
 800628c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	e00f      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fc52 	bl	8007b48 <SDMMC_CmdBusWidth>
 80062a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	e003      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e001      	b.n	80062b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08e      	sub	sp, #56	@ 0x38
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062ca:	f7fb fb3d 	bl	8001948 <HAL_GetTick>
 80062ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80062d4:	2300      	movs	r3, #0
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2108      	movs	r1, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 fb66 	bl	80079b8 <SDMMC_CmdBlockLength>
 80062ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	e0ad      	b.n	8006454 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f001 fbdc 	bl	8007ac2 <SDMMC_CmdAppCommand>
 800630a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	e09e      	b.n	8006454 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800631c:	2308      	movs	r3, #8
 800631e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006320:	2330      	movs	r3, #48	@ 0x30
 8006322:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006324:	2302      	movs	r3, #2
 8006326:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800632c:	2301      	movs	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f107 0210 	add.w	r2, r7, #16
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f001 fb10 	bl	8007960 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fc22 	bl	8007b8e <SDMMC_CmdSendSCR>
 800634a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d027      	beq.n	80063a2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	e07e      	b.n	8006454 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d113      	bne.n	800638c <SD_FindSCR+0xcc>
 8006364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006366:	2b00      	cmp	r3, #0
 8006368:	d110      	bne.n	800638c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fa7e 	bl	8007870 <SDMMC_ReadFIFO>
 8006374:	4603      	mov	r3, r0
 8006376:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fa77 	bl	8007870 <SDMMC_ReadFIFO>
 8006382:	4603      	mov	r3, r0
 8006384:	60fb      	str	r3, [r7, #12]
      index++;
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	3301      	adds	r3, #1
 800638a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800638c:	f7fb fadc 	bl	8001948 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d102      	bne.n	80063a2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800639c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80063a0:	e058      	b.n	8006454 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0d1      	beq.n	8006356 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2208      	movs	r2, #8
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063c8:	2308      	movs	r3, #8
 80063ca:	e043      	b.n	8006454 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2202      	movs	r2, #2
 80063e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063e2:	2302      	movs	r3, #2
 80063e4:	e036      	b.n	8006454 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2220      	movs	r2, #32
 80063fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80063fc:	2320      	movs	r3, #32
 80063fe:	e029      	b.n	8006454 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a15      	ldr	r2, [pc, #84]	@ (800645c <SD_FindSCR+0x19c>)
 8006406:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	061a      	lsls	r2, r3, #24
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006414:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800641e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	601a      	str	r2, [r3, #0]
    scr++;
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	3304      	adds	r3, #4
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	061a      	lsls	r2, r3, #24
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800643c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006446:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	0e1b      	lsrs	r3, r3, #24
 800644c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3738      	adds	r7, #56	@ 0x38
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	18000f3a 	.word	0x18000f3a

08006460 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e095      	b.n	80065b4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d108      	bne.n	80064a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006498:	d009      	beq.n	80064ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	61da      	str	r2, [r3, #28]
 80064a0:	e005      	b.n	80064ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fa fe7b 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ee:	d902      	bls.n	80064f6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e002      	b.n	80064fc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006504:	d007      	beq.n	8006516 <HAL_SPI_Init+0xa0>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800650e:	d002      	beq.n	8006516 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006558:	ea42 0103 	orr.w	r1, r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	0c1b      	lsrs	r3, r3, #16
 8006572:	f003 0204 	and.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006592:	ea42 0103 	orr.w	r1, r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e038      	b.n	8006644 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7fb f81e 	bl	8001628 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3308      	adds	r3, #8
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	f000 ffee 	bl	80075d8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	461a      	mov	r2, r3
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	f001 f880 	bl	800770c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6858      	ldr	r0, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	f001 f8c4 	bl	80077a6 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	6892      	ldr	r2, [r2, #8]
 8006626:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	6892      	ldr	r2, [r2, #8]
 8006632:	f041 0101 	orr.w	r1, r1, #1
 8006636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e042      	b.n	80066e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fa fe09 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2224      	movs	r2, #36	@ 0x24
 800667a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fc7c 	bl	8006f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f97d 	bl	800699c <UART_SetConfig>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e01b      	b.n	80066e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fcfb 	bl	80070d8 <UART_CheckIdleState>
 80066e2:	4603      	mov	r3, r0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006702:	2b20      	cmp	r3, #32
 8006704:	d17b      	bne.n	80067fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_UART_Transmit+0x26>
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e074      	b.n	8006800 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2221      	movs	r2, #33	@ 0x21
 8006722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006726:	f7fb f90f 	bl	8001948 <HAL_GetTick>
 800672a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006744:	d108      	bne.n	8006758 <HAL_UART_Transmit+0x6c>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	e003      	b.n	8006760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006760:	e030      	b.n	80067c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2200      	movs	r2, #0
 800676a:	2180      	movs	r1, #128	@ 0x80
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fd5d 	bl	800722c <UART_WaitOnFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e03d      	b.n	8006800 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	881a      	ldrh	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006796:	b292      	uxth	r2, r2
 8006798:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	3302      	adds	r3, #2
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	e007      	b.n	80067b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1c8      	bne.n	8006762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	2140      	movs	r1, #64	@ 0x40
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fd26 	bl	800722c <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e006      	b.n	8006800 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3720      	adds	r7, #32
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	@ 0x28
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	4613      	mov	r3, r2
 8006816:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800681e:	2b20      	cmp	r3, #32
 8006820:	f040 80b6 	bne.w	8006990 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Receive+0x28>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0ae      	b.n	8006992 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2222      	movs	r2, #34	@ 0x22
 8006840:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800684a:	f7fb f87d 	bl	8001948 <HAL_GetTick>
 800684e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006868:	d10e      	bne.n	8006888 <HAL_UART_Receive+0x80>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <HAL_UART_Receive+0x76>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006878:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800687c:	e02d      	b.n	80068da <HAL_UART_Receive+0xd2>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	22ff      	movs	r2, #255	@ 0xff
 8006882:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006886:	e028      	b.n	80068da <HAL_UART_Receive+0xd2>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10d      	bne.n	80068ac <HAL_UART_Receive+0xa4>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_UART_Receive+0x9a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	22ff      	movs	r2, #255	@ 0xff
 800689c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068a0:	e01b      	b.n	80068da <HAL_UART_Receive+0xd2>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	227f      	movs	r2, #127	@ 0x7f
 80068a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068aa:	e016      	b.n	80068da <HAL_UART_Receive+0xd2>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068b4:	d10d      	bne.n	80068d2 <HAL_UART_Receive+0xca>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_UART_Receive+0xc0>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	227f      	movs	r2, #127	@ 0x7f
 80068c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068c6:	e008      	b.n	80068da <HAL_UART_Receive+0xd2>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	223f      	movs	r2, #63	@ 0x3f
 80068cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068d0:	e003      	b.n	80068da <HAL_UART_Receive+0xd2>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80068e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ea:	d108      	bne.n	80068fe <HAL_UART_Receive+0xf6>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e003      	b.n	8006906 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006906:	e037      	b.n	8006978 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2200      	movs	r2, #0
 8006910:	2120      	movs	r1, #32
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fc8a 	bl	800722c <UART_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e033      	b.n	8006992 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006936:	b29a      	uxth	r2, r3
 8006938:	8a7b      	ldrh	r3, [r7, #18]
 800693a:	4013      	ands	r3, r2
 800693c:	b29a      	uxth	r2, r3
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	3302      	adds	r3, #2
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e00d      	b.n	8006966 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006950:	b29b      	uxth	r3, r3
 8006952:	b2da      	uxtb	r2, r3
 8006954:	8a7b      	ldrh	r3, [r7, #18]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	4013      	ands	r3, r2
 800695a:	b2da      	uxtb	r2, r3
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	3301      	adds	r3, #1
 8006964:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1c1      	bne.n	8006908 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	e000      	b.n	8006992 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800699c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a0:	b08c      	sub	sp, #48	@ 0x30
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4baa      	ldr	r3, [pc, #680]	@ (8006c74 <UART_SetConfig+0x2d8>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a9f      	ldr	r2, [pc, #636]	@ (8006c78 <UART_SetConfig+0x2dc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a04:	4313      	orrs	r3, r2
 8006a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	f023 010f 	bic.w	r1, r3, #15
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a90      	ldr	r2, [pc, #576]	@ (8006c7c <UART_SetConfig+0x2e0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d125      	bne.n	8006a8c <UART_SetConfig+0xf0>
 8006a40:	4b8f      	ldr	r3, [pc, #572]	@ (8006c80 <UART_SetConfig+0x2e4>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d81a      	bhi.n	8006a84 <UART_SetConfig+0xe8>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <UART_SetConfig+0xb8>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a65 	.word	0x08006a65
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a7d 	.word	0x08006a7d
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e116      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e112      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	e10e      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e10a      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8a:	e106      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a7c      	ldr	r2, [pc, #496]	@ (8006c84 <UART_SetConfig+0x2e8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d138      	bne.n	8006b08 <UART_SetConfig+0x16c>
 8006a96:	4b7a      	ldr	r3, [pc, #488]	@ (8006c80 <UART_SetConfig+0x2e4>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9c:	f003 030c 	and.w	r3, r3, #12
 8006aa0:	2b0c      	cmp	r3, #12
 8006aa2:	d82d      	bhi.n	8006b00 <UART_SetConfig+0x164>
 8006aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <UART_SetConfig+0x110>)
 8006aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aaa:	bf00      	nop
 8006aac:	08006ae1 	.word	0x08006ae1
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	08006b01 	.word	0x08006b01
 8006ab8:	08006b01 	.word	0x08006b01
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006b01 	.word	0x08006b01
 8006ac4:	08006b01 	.word	0x08006b01
 8006ac8:	08006b01 	.word	0x08006b01
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b01 	.word	0x08006b01
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae6:	e0d8      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aee:	e0d4      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af6:	e0d0      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afe:	e0cc      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b06:	e0c8      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8006c88 <UART_SetConfig+0x2ec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d125      	bne.n	8006b5e <UART_SetConfig+0x1c2>
 8006b12:	4b5b      	ldr	r3, [pc, #364]	@ (8006c80 <UART_SetConfig+0x2e4>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b1c:	2b30      	cmp	r3, #48	@ 0x30
 8006b1e:	d016      	beq.n	8006b4e <UART_SetConfig+0x1b2>
 8006b20:	2b30      	cmp	r3, #48	@ 0x30
 8006b22:	d818      	bhi.n	8006b56 <UART_SetConfig+0x1ba>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d00a      	beq.n	8006b3e <UART_SetConfig+0x1a2>
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d814      	bhi.n	8006b56 <UART_SetConfig+0x1ba>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <UART_SetConfig+0x19a>
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d008      	beq.n	8006b46 <UART_SetConfig+0x1aa>
 8006b34:	e00f      	b.n	8006b56 <UART_SetConfig+0x1ba>
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3c:	e0ad      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b44:	e0a9      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b46:	2304      	movs	r3, #4
 8006b48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4c:	e0a5      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b4e:	2308      	movs	r3, #8
 8006b50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b54:	e0a1      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b56:	2310      	movs	r3, #16
 8006b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5c:	e09d      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a4a      	ldr	r2, [pc, #296]	@ (8006c8c <UART_SetConfig+0x2f0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d125      	bne.n	8006bb4 <UART_SetConfig+0x218>
 8006b68:	4b45      	ldr	r3, [pc, #276]	@ (8006c80 <UART_SetConfig+0x2e4>)
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b74:	d016      	beq.n	8006ba4 <UART_SetConfig+0x208>
 8006b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b78:	d818      	bhi.n	8006bac <UART_SetConfig+0x210>
 8006b7a:	2b80      	cmp	r3, #128	@ 0x80
 8006b7c:	d00a      	beq.n	8006b94 <UART_SetConfig+0x1f8>
 8006b7e:	2b80      	cmp	r3, #128	@ 0x80
 8006b80:	d814      	bhi.n	8006bac <UART_SetConfig+0x210>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <UART_SetConfig+0x1f0>
 8006b86:	2b40      	cmp	r3, #64	@ 0x40
 8006b88:	d008      	beq.n	8006b9c <UART_SetConfig+0x200>
 8006b8a:	e00f      	b.n	8006bac <UART_SetConfig+0x210>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b92:	e082      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b94:	2302      	movs	r3, #2
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9a:	e07e      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba2:	e07a      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006baa:	e076      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006bac:	2310      	movs	r3, #16
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb2:	e072      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a35      	ldr	r2, [pc, #212]	@ (8006c90 <UART_SetConfig+0x2f4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d12a      	bne.n	8006c14 <UART_SetConfig+0x278>
 8006bbe:	4b30      	ldr	r3, [pc, #192]	@ (8006c80 <UART_SetConfig+0x2e4>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bcc:	d01a      	beq.n	8006c04 <UART_SetConfig+0x268>
 8006bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd2:	d81b      	bhi.n	8006c0c <UART_SetConfig+0x270>
 8006bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bd8:	d00c      	beq.n	8006bf4 <UART_SetConfig+0x258>
 8006bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bde:	d815      	bhi.n	8006c0c <UART_SetConfig+0x270>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <UART_SetConfig+0x250>
 8006be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be8:	d008      	beq.n	8006bfc <UART_SetConfig+0x260>
 8006bea:	e00f      	b.n	8006c0c <UART_SetConfig+0x270>
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf2:	e052      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfa:	e04e      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c02:	e04a      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c04:	2308      	movs	r3, #8
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	e046      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c12:	e042      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a17      	ldr	r2, [pc, #92]	@ (8006c78 <UART_SetConfig+0x2dc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d13a      	bne.n	8006c94 <UART_SetConfig+0x2f8>
 8006c1e:	4b18      	ldr	r3, [pc, #96]	@ (8006c80 <UART_SetConfig+0x2e4>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c2c:	d01a      	beq.n	8006c64 <UART_SetConfig+0x2c8>
 8006c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c32:	d81b      	bhi.n	8006c6c <UART_SetConfig+0x2d0>
 8006c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c38:	d00c      	beq.n	8006c54 <UART_SetConfig+0x2b8>
 8006c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c3e:	d815      	bhi.n	8006c6c <UART_SetConfig+0x2d0>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <UART_SetConfig+0x2b0>
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c48:	d008      	beq.n	8006c5c <UART_SetConfig+0x2c0>
 8006c4a:	e00f      	b.n	8006c6c <UART_SetConfig+0x2d0>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e022      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c54:	2302      	movs	r3, #2
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e01e      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e01a      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c64:	2308      	movs	r3, #8
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e016      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c72:	e012      	b.n	8006c9a <UART_SetConfig+0x2fe>
 8006c74:	cfff69f3 	.word	0xcfff69f3
 8006c78:	40008000 	.word	0x40008000
 8006c7c:	40013800 	.word	0x40013800
 8006c80:	40021000 	.word	0x40021000
 8006c84:	40004400 	.word	0x40004400
 8006c88:	40004800 	.word	0x40004800
 8006c8c:	40004c00 	.word	0x40004c00
 8006c90:	40005000 	.word	0x40005000
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4aae      	ldr	r2, [pc, #696]	@ (8006f58 <UART_SetConfig+0x5bc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	f040 8097 	bne.w	8006dd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d823      	bhi.n	8006cf6 <UART_SetConfig+0x35a>
 8006cae:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <UART_SetConfig+0x318>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006cf7 	.word	0x08006cf7
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006cf7 	.word	0x08006cf7
 8006cc4:	08006ce7 	.word	0x08006ce7
 8006cc8:	08006cf7 	.word	0x08006cf7
 8006ccc:	08006cf7 	.word	0x08006cf7
 8006cd0:	08006cf7 	.word	0x08006cf7
 8006cd4:	08006cef 	.word	0x08006cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd8:	f7fc fa2a 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8006cdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cde:	e010      	b.n	8006d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce0:	4b9e      	ldr	r3, [pc, #632]	@ (8006f5c <UART_SetConfig+0x5c0>)
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ce4:	e00d      	b.n	8006d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce6:	f7fc f98d 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8006cea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cec:	e009      	b.n	8006d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf4:	e005      	b.n	8006d02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8130 	beq.w	8006f6a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	4a94      	ldr	r2, [pc, #592]	@ (8006f60 <UART_SetConfig+0x5c4>)
 8006d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d305      	bcc.n	8006d3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d903      	bls.n	8006d42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d40:	e113      	b.n	8006f6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	2200      	movs	r2, #0
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	60fa      	str	r2, [r7, #12]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	4a84      	ldr	r2, [pc, #528]	@ (8006f60 <UART_SetConfig+0x5c4>)
 8006d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2200      	movs	r2, #0
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d64:	f7f9 fa9c 	bl	80002a0 <__aeabi_uldivmod>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	020b      	lsls	r3, r1, #8
 8006d7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d7e:	0202      	lsls	r2, r0, #8
 8006d80:	6979      	ldr	r1, [r7, #20]
 8006d82:	6849      	ldr	r1, [r1, #4]
 8006d84:	0849      	lsrs	r1, r1, #1
 8006d86:	2000      	movs	r0, #0
 8006d88:	460c      	mov	r4, r1
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	eb12 0804 	adds.w	r8, r2, r4
 8006d90:	eb43 0905 	adc.w	r9, r3, r5
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	469a      	mov	sl, r3
 8006d9c:	4693      	mov	fp, r2
 8006d9e:	4652      	mov	r2, sl
 8006da0:	465b      	mov	r3, fp
 8006da2:	4640      	mov	r0, r8
 8006da4:	4649      	mov	r1, r9
 8006da6:	f7f9 fa7b 	bl	80002a0 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4613      	mov	r3, r2
 8006db0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006db8:	d308      	bcc.n	8006dcc <UART_SetConfig+0x430>
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc0:	d204      	bcs.n	8006dcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e0ce      	b.n	8006f6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dd2:	e0ca      	b.n	8006f6a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ddc:	d166      	bne.n	8006eac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006dde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d827      	bhi.n	8006e36 <UART_SetConfig+0x49a>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <UART_SetConfig+0x450>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e21 	.word	0x08006e21
 8006df8:	08006e37 	.word	0x08006e37
 8006dfc:	08006e27 	.word	0x08006e27
 8006e00:	08006e37 	.word	0x08006e37
 8006e04:	08006e37 	.word	0x08006e37
 8006e08:	08006e37 	.word	0x08006e37
 8006e0c:	08006e2f 	.word	0x08006e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e10:	f7fc f98e 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8006e14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e16:	e014      	b.n	8006e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e18:	f7fc f9a0 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e1e:	e010      	b.n	8006e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e20:	4b4e      	ldr	r3, [pc, #312]	@ (8006f5c <UART_SetConfig+0x5c0>)
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e24:	e00d      	b.n	8006e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fc f8ed 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8006e2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e2c:	e009      	b.n	8006e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e34:	e005      	b.n	8006e42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8090 	beq.w	8006f6a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	4a44      	ldr	r2, [pc, #272]	@ (8006f60 <UART_SetConfig+0x5c4>)
 8006e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e5c:	005a      	lsls	r2, r3, #1
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	441a      	add	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	2b0f      	cmp	r3, #15
 8006e74:	d916      	bls.n	8006ea4 <UART_SetConfig+0x508>
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e7c:	d212      	bcs.n	8006ea4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f023 030f 	bic.w	r3, r3, #15
 8006e86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	8bfb      	ldrh	r3, [r7, #30]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	8bfa      	ldrh	r2, [r7, #30]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	e062      	b.n	8006f6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006eaa:	e05e      	b.n	8006f6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d828      	bhi.n	8006f06 <UART_SetConfig+0x56a>
 8006eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ebc <UART_SetConfig+0x520>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	08006f07 	.word	0x08006f07
 8006ecc:	08006ef7 	.word	0x08006ef7
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006f07 	.word	0x08006f07
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fc f926 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ee6:	e014      	b.n	8006f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee8:	f7fc f938 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8006eec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eee:	e010      	b.n	8006f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <UART_SetConfig+0x5c0>)
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ef4:	e00d      	b.n	8006f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fc f885 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8006efa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006efc:	e009      	b.n	8006f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f04:	e005      	b.n	8006f12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f10:	bf00      	nop
    }

    if (pclk != 0U)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d028      	beq.n	8006f6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	4a10      	ldr	r2, [pc, #64]	@ (8006f60 <UART_SetConfig+0x5c4>)
 8006f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f22:	461a      	mov	r2, r3
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	441a      	add	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	2b0f      	cmp	r3, #15
 8006f40:	d910      	bls.n	8006f64 <UART_SetConfig+0x5c8>
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f48:	d20c      	bcs.n	8006f64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60da      	str	r2, [r3, #12]
 8006f54:	e009      	b.n	8006f6a <UART_SetConfig+0x5ce>
 8006f56:	bf00      	nop
 8006f58:	40008000 	.word	0x40008000
 8006f5c:	00f42400 	.word	0x00f42400
 8006f60:	0800c0e4 	.word	0x0800c0e4
      }
      else
      {
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2200      	movs	r2, #0
 8006f84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3730      	adds	r7, #48	@ 0x30
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01a      	beq.n	80070aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007092:	d10a      	bne.n	80070aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
  }
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b098      	sub	sp, #96	@ 0x60
 80070dc:	af02      	add	r7, sp, #8
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e8:	f7fa fc2e 	bl	8001948 <HAL_GetTick>
 80070ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d12f      	bne.n	800715c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007104:	2200      	movs	r2, #0
 8007106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f88e 	bl	800722c <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d022      	beq.n	800715c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800712a:	653b      	str	r3, [r7, #80]	@ 0x50
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007134:	647b      	str	r3, [r7, #68]	@ 0x44
 8007136:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800713a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e063      	b.n	8007224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b04      	cmp	r3, #4
 8007168:	d149      	bne.n	80071fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800716a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007172:	2200      	movs	r2, #0
 8007174:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f857 	bl	800722c <UART_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d03c      	beq.n	80071fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	623b      	str	r3, [r7, #32]
   return(result);
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e6      	bne.n	8007184 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f023 0301 	bic.w	r3, r3, #1
 80071cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071d6:	61fa      	str	r2, [r7, #28]
 80071d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	69b9      	ldr	r1, [r7, #24]
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	617b      	str	r3, [r7, #20]
   return(result);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e5      	bne.n	80071b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e012      	b.n	8007224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3758      	adds	r7, #88	@ 0x58
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800723c:	e04f      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d04b      	beq.n	80072de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007246:	f7fa fb7f 	bl	8001948 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	429a      	cmp	r2, r3
 8007254:	d302      	bcc.n	800725c <UART_WaitOnFlagUntilTimeout+0x30>
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e04e      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d037      	beq.n	80072de <UART_WaitOnFlagUntilTimeout+0xb2>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b80      	cmp	r3, #128	@ 0x80
 8007272:	d034      	beq.n	80072de <UART_WaitOnFlagUntilTimeout+0xb2>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b40      	cmp	r3, #64	@ 0x40
 8007278:	d031      	beq.n	80072de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b08      	cmp	r3, #8
 8007286:	d110      	bne.n	80072aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2208      	movs	r2, #8
 800728e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f838 	bl	8007306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2208      	movs	r2, #8
 800729a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e029      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b8:	d111      	bne.n	80072de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f81e 	bl	8007306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e00f      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	bf0c      	ite	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	2300      	movne	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d0a0      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007306:	b480      	push	{r7}
 8007308:	b095      	sub	sp, #84	@ 0x54
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732c:	643b      	str	r3, [r7, #64]	@ 0x40
 800732e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007332:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e6      	bne.n	800730e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3308      	adds	r3, #8
 8007346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007356:	f023 0301 	bic.w	r3, r3, #1
 800735a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007366:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800736a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e3      	bne.n	8007340 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d118      	bne.n	80073b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	60bb      	str	r3, [r7, #8]
   return(result);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	647b      	str	r3, [r7, #68]	@ 0x44
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073c6:	bf00      	nop
 80073c8:	3754      	adds	r7, #84	@ 0x54
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e027      	b.n	8007438 <HAL_UARTEx_DisableFifoMode+0x66>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	@ 0x24
 80073f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007416:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007458:	2302      	movs	r3, #2
 800745a:	e02d      	b.n	80074b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2224      	movs	r2, #36	@ 0x24
 8007468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f84f 	bl	800753c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e02d      	b.n	8007534 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	@ 0x24
 80074e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f811 	bl	800753c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007548:	2b00      	cmp	r3, #0
 800754a:	d108      	bne.n	800755e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800755c:	e031      	b.n	80075c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800755e:	2308      	movs	r3, #8
 8007560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007562:	2308      	movs	r3, #8
 8007564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	0e5b      	lsrs	r3, r3, #25
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	0f5b      	lsrs	r3, r3, #29
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	7b3a      	ldrb	r2, [r7, #12]
 800758a:	4911      	ldr	r1, [pc, #68]	@ (80075d0 <UARTEx_SetNbDataToProcess+0x94>)
 800758c:	5c8a      	ldrb	r2, [r1, r2]
 800758e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007592:	7b3a      	ldrb	r2, [r7, #12]
 8007594:	490f      	ldr	r1, [pc, #60]	@ (80075d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007598:	fb93 f3f2 	sdiv	r3, r3, r2
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	7b7a      	ldrb	r2, [r7, #13]
 80075a8:	4909      	ldr	r1, [pc, #36]	@ (80075d0 <UARTEx_SetNbDataToProcess+0x94>)
 80075aa:	5c8a      	ldrb	r2, [r1, r2]
 80075ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075b0:	7b7a      	ldrb	r2, [r7, #13]
 80075b2:	4908      	ldr	r1, [pc, #32]	@ (80075d4 <UARTEx_SetNbDataToProcess+0x98>)
 80075b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075c2:	bf00      	nop
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	0800c0fc 	.word	0x0800c0fc
 80075d4:	0800c104 	.word	0x0800c104

080075d8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	f023 0101 	bic.w	r1, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d102      	bne.n	8007608 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007602:	2340      	movs	r3, #64	@ 0x40
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	e001      	b.n	800760c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007618:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800761e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007624:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800762a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007630:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007636:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800763c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8007642:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8007648:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800767a:	4b23      	ldr	r3, [pc, #140]	@ (8007708 <FMC_NORSRAM_Init+0x130>)
 800767c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007684:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800768c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8007694:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800769c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	43db      	mvns	r3, r3
 80076ac:	ea02 0103 	and.w	r1, r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4319      	orrs	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c6:	d10c      	bne.n	80076e2 <FMC_NORSRAM_Init+0x10a>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d006      	beq.n	80076f8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	0008fb7f 	.word	0x0008fb7f

0800770c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8007722:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800772a:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8007732:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800773a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	3b01      	subs	r3, #1
 8007742:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8007744:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	3b02      	subs	r3, #2
 800774c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800774e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800775a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800776a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800776e:	d113      	bne.n	8007798 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007778:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	3b01      	subs	r3, #1
 8007780:	051b      	lsls	r3, r3, #20
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	431a      	orrs	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
 80077b2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ba:	d121      	bne.n	8007800 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4319      	orrs	r1, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	4319      	orrs	r1, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	079b      	lsls	r3, r3, #30
 80077e2:	4319      	orrs	r1, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	4319      	orrs	r1, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	430b      	orrs	r3, r1
 80077f2:	ea42 0103 	orr.w	r1, r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80077fe:	e005      	b.n	800780c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800781c:	b084      	sub	sp, #16
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	f107 001c 	add.w	r0, r7, #28
 800782a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007832:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007834:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007836:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 800783a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 800783e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 8007842:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	4b07      	ldr	r3, [pc, #28]	@ (800786c <SDMMC_Init+0x50>)
 8007850:	4013      	ands	r3, r2
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	b004      	add	sp, #16
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	ffc02c00 	.word	0xffc02c00

08007870 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f043 0203 	orr.w	r2, r3, #3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800789e:	2002      	movs	r0, #2
 80078a0:	f7fa f85e 	bl	8001960 <HAL_Delay>

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0303 	and.w	r3, r3, #3
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80078f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80078f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	4b06      	ldr	r3, [pc, #24]	@ (800791c <SDMMC_SendCommand+0x50>)
 8007904:	4013      	ands	r3, r2
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	fffee0c0 	.word	0xfffee0c0

08007920 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	b2db      	uxtb	r3, r3
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3314      	adds	r3, #20
 8007948:	461a      	mov	r2, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	4413      	add	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007986:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800798c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007992:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0

}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80079c6:	2310      	movs	r3, #16
 80079c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079d0:	2300      	movs	r3, #0
 80079d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079da:	f107 0308 	add.w	r3, r7, #8
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff ff73 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80079e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ea:	2110      	movs	r1, #16
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9b9 	bl	8007d64 <SDMMC_GetCmdResp1>
 80079f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f4:	69fb      	ldr	r3, [r7, #28]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b08a      	sub	sp, #40	@ 0x28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a0e:	2307      	movs	r3, #7
 8007a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a20:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a22:	f107 0310 	add.w	r3, r7, #16
 8007a26:	4619      	mov	r1, r3
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7ff ff4f 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a32:	2107      	movs	r1, #7
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f995 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007a3a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3728      	adds	r7, #40	@ 0x28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b088      	sub	sp, #32
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007a56:	2300      	movs	r3, #0
 8007a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a64:	f107 0308 	add.w	r3, r7, #8
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff ff2e 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fbb9 	bl	80081e8 <SDMMC_GetCmdError>
 8007a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b088      	sub	sp, #32
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a8a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007a8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a90:	2308      	movs	r3, #8
 8007a92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007aa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aa4:	f107 0308 	add.w	r3, r7, #8
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff ff0e 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fb4b 	bl	800814c <SDMMC_GetCmdResp7>
 8007ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b088      	sub	sp, #32
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ad0:	2337      	movs	r3, #55	@ 0x37
 8007ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ae2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ae4:	f107 0308 	add.w	r3, r7, #8
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff feee 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af4:	2137      	movs	r1, #55	@ 0x37
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f934 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afe:	69fb      	ldr	r3, [r7, #28]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b16:	2329      	movs	r3, #41	@ 0x29
 8007b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fecb 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa50 	bl	8007fdc <SDMMC_GetCmdResp3>
 8007b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007b56:	2306      	movs	r3, #6
 8007b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff feab 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7a:	2106      	movs	r1, #6
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f8f1 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b84:	69fb      	ldr	r3, [r7, #28]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007b9a:	2333      	movs	r3, #51	@ 0x33
 8007b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe89 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bbe:	2133      	movs	r1, #51	@ 0x33
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f8cf 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007bc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3720      	adds	r7, #32
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b088      	sub	sp, #32
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007bde:	2302      	movs	r3, #2
 8007be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007be2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007be6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fe67 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9a2 	bl	8007f48 <SDMMC_GetCmdResp2>
 8007c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c06:	69fb      	ldr	r3, [r7, #28]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007c1e:	2309      	movs	r3, #9
 8007c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007c22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff fe47 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f982 	bl	8007f48 <SDMMC_GetCmdResp2>
 8007c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c46:	69fb      	ldr	r3, [r7, #28]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff fe27 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	2103      	movs	r1, #3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9ea 	bl	800805c <SDMMC_GetCmdResp6>
 8007c88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ca2:	230d      	movs	r3, #13
 8007ca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007caa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff fe05 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cc6:	210d      	movs	r1, #13
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f84b 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b088      	sub	sp, #32
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007ce6:	230d      	movs	r3, #13
 8007ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cfa:	f107 0308 	add.w	r3, r7, #8
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff fde3 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d0a:	210d      	movs	r1, #13
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f829 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d14:	69fb      	ldr	r3, [r7, #28]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b088      	sub	sp, #32
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007d2a:	230b      	movs	r3, #11
 8007d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fdc1 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4e:	210b      	movs	r1, #11
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f807 	bl	8007d64 <SDMMC_GetCmdResp1>
 8007d56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d58:	69fb      	ldr	r3, [r7, #28]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d72:	4b70      	ldr	r3, [pc, #448]	@ (8007f34 <SDMMC_GetCmdResp1+0x1d0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a70      	ldr	r2, [pc, #448]	@ (8007f38 <SDMMC_GetCmdResp1+0x1d4>)
 8007d78:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7c:	0a5a      	lsrs	r2, r3, #9
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	61fa      	str	r2, [r7, #28]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007d94:	e0c9      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d9a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	4b67      	ldr	r3, [pc, #412]	@ (8007f3c <SDMMC_GetCmdResp1+0x1d8>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0ef      	beq.n	8007d86 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1ea      	bne.n	8007d86 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	e0b1      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0a6      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a58      	ldr	r2, [pc, #352]	@ (8007f40 <SDMMC_GetCmdResp1+0x1dc>)
 8007de0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff fd9c 	bl	8007920 <SDMMC_GetCommandResponse>
 8007de8:	4603      	mov	r3, r0
 8007dea:	461a      	mov	r2, r3
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d001      	beq.n	8007df6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e099      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007df6:	2100      	movs	r1, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fd9e 	bl	800793a <SDMMC_GetResponse>
 8007dfe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4b50      	ldr	r3, [pc, #320]	@ (8007f44 <SDMMC_GetCmdResp1+0x1e0>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e08d      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da02      	bge.n	8007e1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e18:	e087      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e24:	2340      	movs	r3, #64	@ 0x40
 8007e26:	e080      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e32:	2380      	movs	r3, #128	@ 0x80
 8007e34:	e079      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e44:	e071      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e54:	e069      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e64:	e061      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e74:	e059      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e84:	e051      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e94:	e049      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ea0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ea4:	e041      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eb4:	e039      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007ec4:	e031      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ed0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007ed4:	e029      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ee0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ee4:	e021      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007ef0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007ef4:	e019      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007f00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f04:	e011      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007f10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007f14:	e009      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f20:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007f24:	e001      	b.n	8007f2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000000 	.word	0x20000000
 8007f38:	10624dd3 	.word	0x10624dd3
 8007f3c:	00200045 	.word	0x00200045
 8007f40:	002000c5 	.word	0x002000c5
 8007f44:	fdffe008 	.word	0xfdffe008

08007f48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f50:	4b1f      	ldr	r3, [pc, #124]	@ (8007fd0 <SDMMC_GetCmdResp2+0x88>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd4 <SDMMC_GetCmdResp2+0x8c>)
 8007f56:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5a:	0a5b      	lsrs	r3, r3, #9
 8007f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	60fa      	str	r2, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f74:	e026      	b.n	8007fc4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0ef      	beq.n	8007f66 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ea      	bne.n	8007f66 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fa2:	2304      	movs	r3, #4
 8007fa4:	e00e      	b.n	8007fc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e003      	b.n	8007fc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a06      	ldr	r2, [pc, #24]	@ (8007fd8 <SDMMC_GetCmdResp2+0x90>)
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000000 	.word	0x20000000
 8007fd4:	10624dd3 	.word	0x10624dd3
 8007fd8:	002000c5 	.word	0x002000c5

08007fdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8008050 <SDMMC_GetCmdResp3+0x74>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8008054 <SDMMC_GetCmdResp3+0x78>)
 8007fea:	fba2 2303 	umull	r2, r3, r2, r3
 8007fee:	0a5b      	lsrs	r3, r3, #9
 8007ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff4:	fb02 f303 	mul.w	r3, r2, r3
 8007ff8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1e5a      	subs	r2, r3, #1
 8007ffe:	60fa      	str	r2, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008008:	e01b      	b.n	8008042 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0ef      	beq.n	8007ffa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ea      	bne.n	8007ffa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2204      	movs	r2, #4
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008036:	2304      	movs	r3, #4
 8008038:	e003      	b.n	8008042 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a06      	ldr	r2, [pc, #24]	@ (8008058 <SDMMC_GetCmdResp3+0x7c>)
 800803e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	20000000 	.word	0x20000000
 8008054:	10624dd3 	.word	0x10624dd3
 8008058:	002000c5 	.word	0x002000c5

0800805c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	460b      	mov	r3, r1
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800806a:	4b35      	ldr	r3, [pc, #212]	@ (8008140 <SDMMC_GetCmdResp6+0xe4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a35      	ldr	r2, [pc, #212]	@ (8008144 <SDMMC_GetCmdResp6+0xe8>)
 8008070:	fba2 2303 	umull	r2, r3, r2, r3
 8008074:	0a5b      	lsrs	r3, r3, #9
 8008076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	1e5a      	subs	r2, r3, #1
 8008084:	61fa      	str	r2, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800808a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800808e:	e052      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008094:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0ef      	beq.n	8008080 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1ea      	bne.n	8008080 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2204      	movs	r2, #4
 80080ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080bc:	2304      	movs	r3, #4
 80080be:	e03a      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2201      	movs	r2, #1
 80080d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e02f      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff fc22 	bl	8007920 <SDMMC_GetCommandResponse>
 80080dc:	4603      	mov	r3, r0
 80080de:	461a      	mov	r2, r3
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d001      	beq.n	80080ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e025      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4a16      	ldr	r2, [pc, #88]	@ (8008148 <SDMMC_GetCmdResp6+0xec>)
 80080ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80080f0:	2100      	movs	r1, #0
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff fc21 	bl	800793a <SDMMC_GetResponse>
 80080f8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d106      	bne.n	8008112 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800810e:	2300      	movs	r3, #0
 8008110:	e011      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800811c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008120:	e009      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800812c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008130:	e001      	b.n	8008136 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008132:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000000 	.word	0x20000000
 8008144:	10624dd3 	.word	0x10624dd3
 8008148:	002000c5 	.word	0x002000c5

0800814c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008154:	4b22      	ldr	r3, [pc, #136]	@ (80081e0 <SDMMC_GetCmdResp7+0x94>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a22      	ldr	r2, [pc, #136]	@ (80081e4 <SDMMC_GetCmdResp7+0x98>)
 800815a:	fba2 2303 	umull	r2, r3, r2, r3
 800815e:	0a5b      	lsrs	r3, r3, #9
 8008160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008164:	fb02 f303 	mul.w	r3, r2, r3
 8008168:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	1e5a      	subs	r2, r3, #1
 800816e:	60fa      	str	r2, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008174:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008178:	e02c      	b.n	80081d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0ef      	beq.n	800816a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1ea      	bne.n	800816a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2204      	movs	r2, #4
 80081a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081a6:	2304      	movs	r3, #4
 80081a8:	e014      	b.n	80081d4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081bc:	2301      	movs	r3, #1
 80081be:	e009      	b.n	80081d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2240      	movs	r2, #64	@ 0x40
 80081d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80081d2:	2300      	movs	r3, #0

}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	20000000 	.word	0x20000000
 80081e4:	10624dd3 	.word	0x10624dd3

080081e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081f0:	4b11      	ldr	r3, [pc, #68]	@ (8008238 <SDMMC_GetCmdError+0x50>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a11      	ldr	r2, [pc, #68]	@ (800823c <SDMMC_GetCmdError+0x54>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	0a5b      	lsrs	r3, r3, #9
 80081fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008200:	fb02 f303 	mul.w	r3, r2, r3
 8008204:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	1e5a      	subs	r2, r3, #1
 800820a:	60fa      	str	r2, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008210:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008214:	e009      	b.n	800822a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800821a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f1      	beq.n	8008206 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a06      	ldr	r2, [pc, #24]	@ (8008240 <SDMMC_GetCmdError+0x58>)
 8008226:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20000000 	.word	0x20000000
 800823c:	10624dd3 	.word	0x10624dd3
 8008240:	002000c5 	.word	0x002000c5

08008244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008244:	b084      	sub	sp, #16
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	f107 001c 	add.w	r0, r7, #28
 8008252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa68 	bl	8008738 <USB_CoreReset>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800826c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008280:	e005      	b.n	800828e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800829a:	b004      	add	sp, #16
 800829c:	4770      	bx	lr

0800829e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d115      	bne.n	800830e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082ee:	200a      	movs	r0, #10
 80082f0:	f7f9 fb36 	bl	8001960 <HAL_Delay>
      ms += 10U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	330a      	adds	r3, #10
 80082f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa0e 	bl	800871c <USB_GetMode>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d01e      	beq.n	8008344 <USB_SetCurrentMode+0x84>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2bc7      	cmp	r3, #199	@ 0xc7
 800830a:	d9f0      	bls.n	80082ee <USB_SetCurrentMode+0x2e>
 800830c:	e01a      	b.n	8008344 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d115      	bne.n	8008340 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008320:	200a      	movs	r0, #10
 8008322:	f7f9 fb1d 	bl	8001960 <HAL_Delay>
      ms += 10U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	330a      	adds	r3, #10
 800832a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9f5 	bl	800871c <USB_GetMode>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <USB_SetCurrentMode+0x84>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2bc7      	cmp	r3, #199	@ 0xc7
 800833c:	d9f0      	bls.n	8008320 <USB_SetCurrentMode+0x60>
 800833e:	e001      	b.n	8008344 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e005      	b.n	8008350 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2bc8      	cmp	r3, #200	@ 0xc8
 8008348:	d101      	bne.n	800834e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008358:	b084      	sub	sp, #16
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	e009      	b.n	800838c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	3340      	adds	r3, #64	@ 0x40
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b0e      	cmp	r3, #14
 8008390:	d9f2      	bls.n	8008378 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008392:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11c      	bne.n	80083d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	e005      	b.n	80083e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083e6:	461a      	mov	r2, r3
 80083e8:	2300      	movs	r3, #0
 80083ea:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083ec:	2103      	movs	r1, #3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f95a 	bl	80086a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083f4:	2110      	movs	r1, #16
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f8f6 	bl	80085e8 <USB_FlushTxFifo>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f920 	bl	800864c <USB_FlushRxFifo>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800841c:	461a      	mov	r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	461a      	mov	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008434:	461a      	mov	r2, r3
 8008436:	2300      	movs	r3, #0
 8008438:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	e043      	b.n	80084c8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008456:	d118      	bne.n	800848a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	461a      	mov	r2, r3
 800846c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	e013      	b.n	800849c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008480:	461a      	mov	r2, r3
 8008482:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e008      	b.n	800849c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008496:	461a      	mov	r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a8:	461a      	mov	r2, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ba:	461a      	mov	r2, r3
 80084bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	3301      	adds	r3, #1
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084cc:	461a      	mov	r2, r3
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d3b5      	bcc.n	8008440 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	e043      	b.n	8008562 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f0:	d118      	bne.n	8008524 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	e013      	b.n	8008536 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851a:	461a      	mov	r2, r3
 800851c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	e008      	b.n	8008536 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	2300      	movs	r3, #0
 8008534:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008542:	461a      	mov	r2, r3
 8008544:	2300      	movs	r3, #0
 8008546:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008554:	461a      	mov	r2, r3
 8008556:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800855a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	3301      	adds	r3, #1
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008566:	461a      	mov	r2, r3
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4293      	cmp	r3, r2
 800856c:	d3b5      	bcc.n	80084da <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800857c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008580:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800858e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f043 0210 	orr.w	r2, r3, #16
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	4b10      	ldr	r3, [pc, #64]	@ (80085e4 <USB_DevInit+0x28c>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	f043 0208 	orr.w	r2, r3, #8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d107      	bne.n	80085d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085cc:	f043 0304 	orr.w	r3, r3, #4
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e0:	b004      	add	sp, #16
 80085e2:	4770      	bx	lr
 80085e4:	803c3800 	.word	0x803c3800

080085e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008602:	d901      	bls.n	8008608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e01b      	b.n	8008640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	daf2      	bge.n	80085f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	019b      	lsls	r3, r3, #6
 8008618:	f043 0220 	orr.w	r2, r3, #32
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800862c:	d901      	bls.n	8008632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e006      	b.n	8008640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b20      	cmp	r3, #32
 800863c:	d0f0      	beq.n	8008620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008664:	d901      	bls.n	800866a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e018      	b.n	800869c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	daf2      	bge.n	8008658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2210      	movs	r2, #16
 800867a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3301      	adds	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008688:	d901      	bls.n	800868e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e006      	b.n	800869c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b10      	cmp	r3, #16
 8008698:	d0f0      	beq.n	800867c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c8:	4313      	orrs	r3, r2
 80086ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80086da:	b480      	push	{r7}
 80086dc:	b085      	sub	sp, #20
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008708:	f043 0302 	orr.w	r3, r3, #2
 800870c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	f003 0301 	and.w	r3, r3, #1
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008750:	d901      	bls.n	8008756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e01b      	b.n	800878e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	daf2      	bge.n	8008744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f043 0201 	orr.w	r2, r3, #1
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800877a:	d901      	bls.n	8008780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e006      	b.n	800878e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	d0f0      	beq.n	800876e <USB_CoreReset+0x36>

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d009      	beq.n	80087c0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80087ac:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80087ae:	461a      	mov	r2, r3
        err.type, err.code);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	4807      	ldr	r0, [pc, #28]	@ (80087d8 <ai_log_err+0x3c>)
 80087ba:	f002 fbed 	bl	800af98 <iprintf>
 80087be:	e009      	b.n	80087d4 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80087c0:	793b      	ldrb	r3, [r7, #4]
 80087c2:	4619      	mov	r1, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80087ca:	461a      	mov	r2, r3
 80087cc:	4803      	ldr	r0, [pc, #12]	@ (80087dc <ai_log_err+0x40>)
 80087ce:	f002 fbe3 	bl	800af98 <iprintf>

  do {} while (1);
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <ai_log_err+0x38>
 80087d8:	0800bec0 	.word	0x0800bec0
 80087dc:	0800bef4 	.word	0x0800bef4

080087e0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_mlp_predict_failure_create_and_init(&mlp_predict_failure, act_addr, NULL);
 80087e8:	2200      	movs	r2, #0
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4828      	ldr	r0, [pc, #160]	@ (8008890 <ai_boostrap+0xb0>)
 80087ee:	f000 fb8b 	bl	8008f08 <ai_mlp_predict_failure_create_and_init>
 80087f2:	4603      	mov	r3, r0
 80087f4:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80087f6:	7b3b      	ldrb	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_mlp_predict_failure_create_and_init");
 80087fc:	4925      	ldr	r1, [pc, #148]	@ (8008894 <ai_boostrap+0xb4>)
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff ffcc 	bl	800879c <ai_log_err>
    return -1;
 8008804:	f04f 33ff 	mov.w	r3, #4294967295
 8008808:	e03e      	b.n	8008888 <ai_boostrap+0xa8>
  }

  ai_input = ai_mlp_predict_failure_inputs_get(mlp_predict_failure, NULL);
 800880a:	4b21      	ldr	r3, [pc, #132]	@ (8008890 <ai_boostrap+0xb0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fbf7 	bl	8009004 <ai_mlp_predict_failure_inputs_get>
 8008816:	4603      	mov	r3, r0
 8008818:	4a1f      	ldr	r2, [pc, #124]	@ (8008898 <ai_boostrap+0xb8>)
 800881a:	6013      	str	r3, [r2, #0]
  ai_output = ai_mlp_predict_failure_outputs_get(mlp_predict_failure, NULL);
 800881c:	4b1c      	ldr	r3, [pc, #112]	@ (8008890 <ai_boostrap+0xb0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fc08 	bl	8009038 <ai_mlp_predict_failure_outputs_get>
 8008828:	4603      	mov	r3, r0
 800882a:	4a1c      	ldr	r2, [pc, #112]	@ (800889c <ai_boostrap+0xbc>)
 800882c:	6013      	str	r3, [r2, #0]

#if defined(AI_MLP_PREDICT_FAILURE_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_MLP_PREDICT_FAILURE_IN_NUM; idx++) {
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e00f      	b.n	8008854 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8008834:	4b18      	ldr	r3, [pc, #96]	@ (8008898 <ai_boostrap+0xb8>)
 8008836:	6819      	ldr	r1, [r3, #0]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	4916      	ldr	r1, [pc, #88]	@ (80088a0 <ai_boostrap+0xc0>)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MLP_PREDICT_FAILURE_IN_NUM; idx++) {
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	3301      	adds	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	ddec      	ble.n	8008834 <ai_boostrap+0x54>

#if defined(AI_MLP_PREDICT_FAILURE_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_MLP_PREDICT_FAILURE_OUT_NUM; idx++) {
 800885a:	2300      	movs	r3, #0
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	e00f      	b.n	8008880 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8008860:	4b0e      	ldr	r3, [pc, #56]	@ (800889c <ai_boostrap+0xbc>)
 8008862:	6819      	ldr	r1, [r3, #0]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4613      	mov	r3, r2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	440b      	add	r3, r1
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	490c      	ldr	r1, [pc, #48]	@ (80088a4 <ai_boostrap+0xc4>)
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MLP_PREDICT_FAILURE_OUT_NUM; idx++) {
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	ddec      	ble.n	8008860 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_MLP_PREDICT_FAILURE_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200014e0 	.word	0x200014e0
 8008894:	0800bf24 	.word	0x0800bf24
 8008898:	200014e4 	.word	0x200014e4
 800889c:	200014e8 	.word	0x200014e8
 80088a0:	200011d4 	.word	0x200011d4
 80088a4:	200011d8 	.word	0x200011d8

080088a8 <ai_run>:

static int ai_run(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_mlp_predict_failure_run(mlp_predict_failure, ai_input, ai_output);
 80088ae:	4b0f      	ldr	r3, [pc, #60]	@ (80088ec <ai_run+0x44>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a0f      	ldr	r2, [pc, #60]	@ (80088f0 <ai_run+0x48>)
 80088b4:	6811      	ldr	r1, [r2, #0]
 80088b6:	4a0f      	ldr	r2, [pc, #60]	@ (80088f4 <ai_run+0x4c>)
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fc12 	bl	80090e4 <ai_mlp_predict_failure_run>
 80088c0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d00c      	beq.n	80088e2 <ai_run+0x3a>
    ai_log_err(ai_mlp_predict_failure_get_error(mlp_predict_failure),
 80088c8:	4b08      	ldr	r3, [pc, #32]	@ (80088ec <ai_run+0x44>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 faf9 	bl	8008ec4 <ai_mlp_predict_failure_get_error>
 80088d2:	4603      	mov	r3, r0
 80088d4:	4908      	ldr	r1, [pc, #32]	@ (80088f8 <ai_run+0x50>)
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff ff60 	bl	800879c <ai_log_err>
        "ai_mlp_predict_failure_run");
    return -1;
 80088dc:	f04f 33ff 	mov.w	r3, #4294967295
 80088e0:	e000      	b.n	80088e4 <ai_run+0x3c>
  }

  return 0;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	200014e0 	.word	0x200014e0
 80088f0:	200014e4 	.word	0x200014e4
 80088f4:	200014e8 	.word	0x200014e8
 80088f8:	0800bf4c 	.word	0x0800bf4c

080088fc <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8 *data[])

{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	f6ad 4d68 	subw	sp, sp, #3176	@ 0xc68
 8008902:	af00      	add	r7, sp, #0
 8008904:	f607 4368 	addw	r3, r7, #3176	@ 0xc68
 8008908:	f6a3 4364 	subw	r3, r3, #3172	@ 0xc64
 800890c:	6018      	str	r0, [r3, #0]

    // 1. Variables for data acquisition

    //

    unsigned char tmp[BYTES_IN_FLOATS] = {0};
 800890e:	f607 4368 	addw	r3, r7, #3176	@ 0xc68
 8008912:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 8008916:	4618      	mov	r0, r3
 8008918:	f44f 6344 	mov.w	r3, #3136	@ 0xc40
 800891c:	461a      	mov	r2, r3
 800891e:	2100      	movs	r1, #0
 8008920:	f002 fc82 	bl	800b228 <memset>

    int num_elements = sizeof(tmp) / sizeof(tmp[0]);
 8008924:	f44f 6344 	mov.w	r3, #3136	@ 0xc40
 8008928:	f8c7 3c58 	str.w	r3, [r7, #3160]	@ 0xc58

    int num_floats = num_elements / 4;
 800892c:	f8d7 3c58 	ldr.w	r3, [r7, #3160]	@ 0xc58
 8008930:	2b00      	cmp	r3, #0
 8008932:	da00      	bge.n	8008936 <acquire_and_process_data+0x3a>
 8008934:	3303      	adds	r3, #3
 8008936:	109b      	asrs	r3, r3, #2
 8008938:	f8c7 3c54 	str.w	r3, [r7, #3156]	@ 0xc54

    // 2. Receive data from UART

    //

    HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t *)tmp, sizeof(tmp), TIMEOUT);
 800893c:	f107 0110 	add.w	r1, r7, #16
 8008940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008944:	f44f 6244 	mov.w	r2, #3136	@ 0xc40
 8008948:	483d      	ldr	r0, [pc, #244]	@ (8008a40 <acquire_and_process_data+0x144>)
 800894a:	f7fd ff5d 	bl	8006808 <HAL_UART_Receive>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 3c53 	strb.w	r3, [r7, #3155]	@ 0xc53

    // Check the return status of HAL_UART_Receive

    if (status != HAL_OK)
 8008954:	f897 3c53 	ldrb.w	r3, [r7, #3155]	@ 0xc53
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <acquire_and_process_data+0x70>

    {

      printf("Failed to receive data from UART. Error code: %d\n", status);
 800895c:	f897 3c53 	ldrb.w	r3, [r7, #3155]	@ 0xc53
 8008960:	4619      	mov	r1, r3
 8008962:	4838      	ldr	r0, [pc, #224]	@ (8008a44 <acquire_and_process_data+0x148>)
 8008964:	f002 fb18 	bl	800af98 <iprintf>

      return (1);
 8008968:	2301      	movs	r3, #1
 800896a:	e063      	b.n	8008a34 <acquire_and_process_data+0x138>

    // 3. Reconstruct floats from bytes

    //

    if (num_elements % 4 != 0)
 800896c:	f8d7 3c58 	ldr.w	r3, [r7, #3160]	@ 0xc58
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <acquire_and_process_data+0x86>

    {

      printf("The array length is not a multiple of 4 bytes. Cannot reconstruct floats.\n");
 8008978:	4833      	ldr	r0, [pc, #204]	@ (8008a48 <acquire_and_process_data+0x14c>)
 800897a:	f002 fb75 	bl	800b068 <puts>

      return (1);
 800897e:	2301      	movs	r3, #1
 8008980:	e058      	b.n	8008a34 <acquire_and_process_data+0x138>

    }

    for (size_t i = 0; i < num_floats; i++)
 8008982:	2300      	movs	r3, #0
 8008984:	f8c7 3c64 	str.w	r3, [r7, #3172]	@ 0xc64
 8008988:	e04d      	b.n	8008a26 <acquire_and_process_data+0x12a>

    {

      unsigned char bytes[4] = {0};
 800898a:	f607 4368 	addw	r3, r7, #3176	@ 0xc68
 800898e:	f6a3 435c 	subw	r3, r3, #3164	@ 0xc5c
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]

      // Reconstruction of the bytes

      for (size_t j = 0; j < 4; j++)
 8008996:	2300      	movs	r3, #0
 8008998:	f8c7 3c60 	str.w	r3, [r7, #3168]	@ 0xc60
 800899c:	e018      	b.n	80089d0 <acquire_and_process_data+0xd4>

      {

        bytes[j] = tmp[i * 4 + j];
 800899e:	f8d7 3c64 	ldr.w	r3, [r7, #3172]	@ 0xc64
 80089a2:	009a      	lsls	r2, r3, #2
 80089a4:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	@ 0xc60
 80089a8:	4413      	add	r3, r2
 80089aa:	f607 4268 	addw	r2, r7, #3176	@ 0xc68
 80089ae:	f6a2 4258 	subw	r2, r2, #3160	@ 0xc58
 80089b2:	5cd1      	ldrb	r1, [r2, r3]
 80089b4:	f607 4368 	addw	r3, r7, #3176	@ 0xc68
 80089b8:	f6a3 425c 	subw	r2, r3, #3164	@ 0xc5c
 80089bc:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	@ 0xc60
 80089c0:	4413      	add	r3, r2
 80089c2:	460a      	mov	r2, r1
 80089c4:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < 4; j++)
 80089c6:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	@ 0xc60
 80089ca:	3301      	adds	r3, #1
 80089cc:	f8c7 3c60 	str.w	r3, [r7, #3168]	@ 0xc60
 80089d0:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	@ 0xc60
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d9e2      	bls.n	800899e <acquire_and_process_data+0xa2>

      }

      // Store the bytes in 'data'

      for (size_t k = 0; k < 4; k++)
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 3c5c 	str.w	r3, [r7, #3164]	@ 0xc5c
 80089de:	e019      	b.n	8008a14 <acquire_and_process_data+0x118>

      {

        ((uint8_t *)data)[(i * 4 + k)] = bytes[k];
 80089e0:	f8d7 3c64 	ldr.w	r3, [r7, #3172]	@ 0xc64
 80089e4:	009a      	lsls	r2, r3, #2
 80089e6:	f8d7 3c5c 	ldr.w	r3, [r7, #3164]	@ 0xc5c
 80089ea:	4413      	add	r3, r2
 80089ec:	f607 4268 	addw	r2, r7, #3176	@ 0xc68
 80089f0:	f6a2 4264 	subw	r2, r2, #3172	@ 0xc64
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	4413      	add	r3, r2
 80089f8:	f607 4268 	addw	r2, r7, #3176	@ 0xc68
 80089fc:	f6a2 415c 	subw	r1, r2, #3164	@ 0xc5c
 8008a00:	f8d7 2c5c 	ldr.w	r2, [r7, #3164]	@ 0xc5c
 8008a04:	440a      	add	r2, r1
 8008a06:	7812      	ldrb	r2, [r2, #0]
 8008a08:	701a      	strb	r2, [r3, #0]
      for (size_t k = 0; k < 4; k++)
 8008a0a:	f8d7 3c5c 	ldr.w	r3, [r7, #3164]	@ 0xc5c
 8008a0e:	3301      	adds	r3, #1
 8008a10:	f8c7 3c5c 	str.w	r3, [r7, #3164]	@ 0xc5c
 8008a14:	f8d7 3c5c 	ldr.w	r3, [r7, #3164]	@ 0xc5c
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d9e1      	bls.n	80089e0 <acquire_and_process_data+0xe4>
    for (size_t i = 0; i < num_floats; i++)
 8008a1c:	f8d7 3c64 	ldr.w	r3, [r7, #3172]	@ 0xc64
 8008a20:	3301      	adds	r3, #1
 8008a22:	f8c7 3c64 	str.w	r3, [r7, #3172]	@ 0xc64
 8008a26:	f8d7 3c54 	ldr.w	r3, [r7, #3156]	@ 0xc54
 8008a2a:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	@ 0xc64
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d3ab      	bcc.n	800898a <acquire_and_process_data+0x8e>

      }

    }

    return (0);
 8008a32:	2300      	movs	r3, #0

}
 8008a34:	4618      	mov	r0, r3
 8008a36:	f607 4768 	addw	r7, r7, #3176	@ 0xc68
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000b68 	.word	0x20000b68
 8008a44:	0800bf68 	.word	0x0800bf68
 8008a48:	0800bf9c 	.word	0x0800bf9c

08008a4c <post_process>:

int post_process(ai_i8 *data[])

{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b094      	sub	sp, #80	@ 0x50
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]

    // Get the output data

    //

    if (data == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <post_process+0x18>

    {

      printf("The output data is NULL.\n");
 8008a5a:	4838      	ldr	r0, [pc, #224]	@ (8008b3c <post_process+0xf0>)
 8008a5c:	f002 fb04 	bl	800b068 <puts>

      return (1);
 8008a60:	2301      	movs	r3, #1
 8008a62:	e067      	b.n	8008b34 <post_process+0xe8>

    }

    uint8_t *output = data;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	647b      	str	r3, [r7, #68]	@ 0x44

    // An array to store the float outputs

    float outs[CLASS_NUMBER] = {0.0};
 8008a68:	f107 0318 	add.w	r3, r7, #24
 8008a6c:	2228      	movs	r2, #40	@ 0x28
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 fbd9 	bl	800b228 <memset>

    uint8_t outs_uint8[CLASS_NUMBER] = {0};
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	811a      	strh	r2, [r3, #8]

    /* Convert the probability to float */

    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8008a82:	2300      	movs	r3, #0
 8008a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a86:	e03a      	b.n	8008afe <post_process+0xb2>

    {

      uint8_t temp[4] = {0};
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60bb      	str	r3, [r7, #8]

      // Extract 4 bytes to reconstruct a float

      for (size_t j = 0; j < 4; j++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a90:	e00f      	b.n	8008ab2 <post_process+0x66>

      {

        temp[j] = output[i * 4 + j];
 8008a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a94:	009a      	lsls	r2, r3, #2
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	4413      	add	r3, r2
 8008a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a9c:	4413      	add	r3, r2
 8008a9e:	7819      	ldrb	r1, [r3, #0]
 8008aa0:	f107 0208 	add.w	r2, r7, #8
 8008aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aa6:	4413      	add	r3, r2
 8008aa8:	460a      	mov	r2, r1
 8008aaa:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < 4; j++)
 8008aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aae:	3301      	adds	r3, #1
 8008ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d9ec      	bls.n	8008a92 <post_process+0x46>

      }

      // Reconstruct the float from the bytes

      outs[i] = *(float *)&temp;
 8008ab8:	f107 0308 	add.w	r3, r7, #8
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	3350      	adds	r3, #80	@ 0x50
 8008ac4:	443b      	add	r3, r7
 8008ac6:	3b38      	subs	r3, #56	@ 0x38
 8008ac8:	601a      	str	r2, [r3, #0]

      // Convert the float to uint8_t for UART transmission

      outs_uint8[i] = (char)(outs[i] * 255);
 8008aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	3350      	adds	r3, #80	@ 0x50
 8008ad0:	443b      	add	r3, r7
 8008ad2:	3b38      	subs	r3, #56	@ 0x38
 8008ad4:	edd3 7a00 	vldr	s15, [r3]
 8008ad8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008b40 <post_process+0xf4>
 8008adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ae4:	edc7 7a00 	vstr	s15, [r7]
 8008ae8:	783b      	ldrb	r3, [r7, #0]
 8008aea:	b2d9      	uxtb	r1, r3
 8008aec:	f107 020c 	add.w	r2, r7, #12
 8008af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af2:	4413      	add	r3, r2
 8008af4:	460a      	mov	r2, r1
 8008af6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8008af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afa:	3301      	adds	r3, #1
 8008afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b00:	2b09      	cmp	r3, #9
 8008b02:	d9c1      	bls.n	8008a88 <post_process+0x3c>

// Transmit the output data

//

HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)outs_uint8, sizeof(outs_uint8), TIMEOUT);
 8008b04:	f107 010c 	add.w	r1, r7, #12
 8008b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008b0c:	220a      	movs	r2, #10
 8008b0e:	480d      	ldr	r0, [pc, #52]	@ (8008b44 <post_process+0xf8>)
 8008b10:	f7fd fdec 	bl	80066ec <HAL_UART_Transmit>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

// Check the return status of HAL_UART_Transmit

if (status != HAL_OK)
 8008b1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <post_process+0xe6>

{

printf("Failed to transmit data to UART. Error code: %d\n", status);
 8008b22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b26:	4619      	mov	r1, r3
 8008b28:	4807      	ldr	r0, [pc, #28]	@ (8008b48 <post_process+0xfc>)
 8008b2a:	f002 fa35 	bl	800af98 <iprintf>

return (1);
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <post_process+0xe8>

}

return 0;
 8008b32:	2300      	movs	r3, #0

}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3750      	adds	r7, #80	@ 0x50
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	0800bfe8 	.word	0x0800bfe8
 8008b40:	437f0000 	.word	0x437f0000
 8008b44:	20000b68 	.word	0x20000b68
 8008b48:	0800c004 	.word	0x0800c004

08008b4c <synchronize_UART>:

void synchronize_UART(void)

{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0

    bool is_synced = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	71fb      	strb	r3, [r7, #7]

    unsigned char rx[2] = {0};
 8008b56:	2300      	movs	r3, #0
 8008b58:	80bb      	strh	r3, [r7, #4]

    unsigned char tx[2] = {ACKNOWLEDGE, 0};
 8008b5a:	23cd      	movs	r3, #205	@ 0xcd
 8008b5c:	803b      	strh	r3, [r7, #0]

    while (!is_synced)
 8008b5e:	e012      	b.n	8008b86 <synchronize_UART+0x3a>

    {

      HAL_UART_Receive(&huart2, (uint8_t *)rx, sizeof(rx), TIMEOUT);
 8008b60:	1d39      	adds	r1, r7, #4
 8008b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008b66:	2202      	movs	r2, #2
 8008b68:	480c      	ldr	r0, [pc, #48]	@ (8008b9c <synchronize_UART+0x50>)
 8008b6a:	f7fd fe4d 	bl	8006808 <HAL_UART_Receive>

      if (rx[0] == SYNCHRONISATION)
 8008b6e:	793b      	ldrb	r3, [r7, #4]
 8008b70:	2bab      	cmp	r3, #171	@ 0xab
 8008b72:	d108      	bne.n	8008b86 <synchronize_UART+0x3a>

      {

        HAL_UART_Transmit(&huart2, (uint8_t *)tx, sizeof(tx), TIMEOUT);
 8008b74:	4639      	mov	r1, r7
 8008b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	4807      	ldr	r0, [pc, #28]	@ (8008b9c <synchronize_UART+0x50>)
 8008b7e:	f7fd fdb5 	bl	80066ec <HAL_UART_Transmit>

        is_synced = 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	71fb      	strb	r3, [r7, #7]
    while (!is_synced)
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	f083 0301 	eor.w	r3, r3, #1
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <synchronize_UART+0x14>

      }

    }

    return;
 8008b92:	bf00      	nop

}
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000b68 	.word	0x20000b68

08008ba0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8008ba4:	4803      	ldr	r0, [pc, #12]	@ (8008bb4 <MX_X_CUBE_AI_Init+0x14>)
 8008ba6:	f002 fa5f 	bl	800b068 <puts>

  ai_boostrap(data_activations0);
 8008baa:	4803      	ldr	r0, [pc, #12]	@ (8008bb8 <MX_X_CUBE_AI_Init+0x18>)
 8008bac:	f7ff fe18 	bl	80087e0 <ai_boostrap>
    /* USER CODE END 5 */
}
 8008bb0:	bf00      	nop
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	0800c038 	.word	0x0800c038
 8008bb8:	2000000c 	.word	0x2000000c

08008bbc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */

  int res = -1;
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	60fb      	str	r3, [r7, #12]

  uint8_t *in_data = ai_input[0].data;
 8008bc8:	4b19      	ldr	r3, [pc, #100]	@ (8008c30 <MX_X_CUBE_AI_Process+0x74>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	60bb      	str	r3, [r7, #8]

  uint8_t *out_data = ai_output[0].data;
 8008bd0:	4b18      	ldr	r3, [pc, #96]	@ (8008c34 <MX_X_CUBE_AI_Process+0x78>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	607b      	str	r3, [r7, #4]

  synchronize_UART();
 8008bd8:	f7ff ffb8 	bl	8008b4c <synchronize_UART>

  if (mlp_predict_failure) {
 8008bdc:	4b16      	ldr	r3, [pc, #88]	@ (8008c38 <MX_X_CUBE_AI_Process+0x7c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d013      	beq.n	8008c0c <MX_X_CUBE_AI_Process+0x50>

    do {

      /* 1 - acquire and pre-process input data */

      res = acquire_and_process_data(in_data);
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f7ff fe89 	bl	80088fc <acquire_and_process_data>
 8008bea:	60f8      	str	r0, [r7, #12]

      /* 2 - process the data - call inference engine */

      if (res == 0)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <MX_X_CUBE_AI_Process+0x3c>

        res = ai_run();
 8008bf2:	f7ff fe59 	bl	80088a8 <ai_run>
 8008bf6:	60f8      	str	r0, [r7, #12]

      /* 3- post-process the predictions */

      if (res == 0)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <MX_X_CUBE_AI_Process+0x4a>

        res = post_process(out_data);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff ff24 	bl	8008a4c <post_process>
 8008c04:	60f8      	str	r0, [r7, #12]

    } while (res==0);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0eb      	beq.n	8008be4 <MX_X_CUBE_AI_Process+0x28>

  }

  if (res) {
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <MX_X_CUBE_AI_Process+0x6c>

    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8008c12:	2311      	movs	r3, #17
 8008c14:	703b      	strb	r3, [r7, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2210      	movs	r2, #16
 8008c1a:	f362 231f 	bfi	r3, r2, #8, #24
 8008c1e:	603b      	str	r3, [r7, #0]

    ai_log_err(err, "Process has FAILED");
 8008c20:	4906      	ldr	r1, [pc, #24]	@ (8008c3c <MX_X_CUBE_AI_Process+0x80>)
 8008c22:	6838      	ldr	r0, [r7, #0]
 8008c24:	f7ff fdba 	bl	800879c <ai_log_err>

  }

    /* USER CODE END 6 */
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	200014e4 	.word	0x200014e4
 8008c34:	200014e8 	.word	0x200014e8
 8008c38:	200014e0 	.word	0x200014e0
 8008c3c:	0800c058 	.word	0x0800c058

08008c40 <mlp_predict_failure_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mlp_predict_failure_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_mlp_predict_failure_activations_map, 1, params)) {
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4837      	ldr	r0, [pc, #220]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c50:	f000 fb22 	bl	8009298 <ai_platform_get_activations_map>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d05d      	beq.n	8008d16 <mlp_predict_failure_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    
    input_4_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 236);
 8008c5a:	4b34      	ldr	r3, [pc, #208]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	33ec      	adds	r3, #236	@ 0xec
 8008c60:	4a33      	ldr	r2, [pc, #204]	@ (8008d30 <mlp_predict_failure_configure_activations+0xf0>)
 8008c62:	6093      	str	r3, [r2, #8]
    input_4_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 236);
 8008c64:	4b31      	ldr	r3, [pc, #196]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	33ec      	adds	r3, #236	@ 0xec
 8008c6a:	4a31      	ldr	r2, [pc, #196]	@ (8008d30 <mlp_predict_failure_configure_activations+0xf0>)
 8008c6c:	60d3      	str	r3, [r2, #12]
    dense_11_dense_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c76:	4a2f      	ldr	r2, [pc, #188]	@ (8008d34 <mlp_predict_failure_configure_activations+0xf4>)
 8008c78:	6093      	str	r3, [r2, #8]
    dense_11_dense_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c82:	4a2c      	ldr	r2, [pc, #176]	@ (8008d34 <mlp_predict_failure_configure_activations+0xf4>)
 8008c84:	60d3      	str	r3, [r2, #12]
    dense_11_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008c86:	4b29      	ldr	r3, [pc, #164]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d38 <mlp_predict_failure_configure_activations+0xf8>)
 8008c90:	6093      	str	r3, [r2, #8]
    dense_11_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008c92:	4b26      	ldr	r3, [pc, #152]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c9a:	4a27      	ldr	r2, [pc, #156]	@ (8008d38 <mlp_predict_failure_configure_activations+0xf8>)
 8008c9c:	60d3      	str	r3, [r2, #12]
    dense_12_dense_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 0);
 8008c9e:	4b23      	ldr	r3, [pc, #140]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a26      	ldr	r2, [pc, #152]	@ (8008d3c <mlp_predict_failure_configure_activations+0xfc>)
 8008ca4:	6093      	str	r3, [r2, #8]
    dense_12_dense_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 0);
 8008ca6:	4b21      	ldr	r3, [pc, #132]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a24      	ldr	r2, [pc, #144]	@ (8008d3c <mlp_predict_failure_configure_activations+0xfc>)
 8008cac:	60d3      	str	r3, [r2, #12]
    dense_12_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 0);
 8008cae:	4b1f      	ldr	r3, [pc, #124]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a23      	ldr	r2, [pc, #140]	@ (8008d40 <mlp_predict_failure_configure_activations+0x100>)
 8008cb4:	6093      	str	r3, [r2, #8]
    dense_12_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 0);
 8008cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a21      	ldr	r2, [pc, #132]	@ (8008d40 <mlp_predict_failure_configure_activations+0x100>)
 8008cbc:	60d3      	str	r3, [r2, #12]
    dense_13_dense_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d44 <mlp_predict_failure_configure_activations+0x104>)
 8008cc8:	6093      	str	r3, [r2, #8]
    dense_13_dense_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008cca:	4b18      	ldr	r3, [pc, #96]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d44 <mlp_predict_failure_configure_activations+0x104>)
 8008cd4:	60d3      	str	r3, [r2, #12]
    dense_13_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008cd6:	4b15      	ldr	r3, [pc, #84]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008cde:	4a1a      	ldr	r2, [pc, #104]	@ (8008d48 <mlp_predict_failure_configure_activations+0x108>)
 8008ce0:	6093      	str	r3, [r2, #8]
    dense_13_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 256);
 8008ce2:	4b12      	ldr	r3, [pc, #72]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008cea:	4a17      	ldr	r2, [pc, #92]	@ (8008d48 <mlp_predict_failure_configure_activations+0x108>)
 8008cec:	60d3      	str	r3, [r2, #12]
    dense_14_dense_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 0);
 8008cee:	4b0f      	ldr	r3, [pc, #60]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a16      	ldr	r2, [pc, #88]	@ (8008d4c <mlp_predict_failure_configure_activations+0x10c>)
 8008cf4:	6093      	str	r3, [r2, #8]
    dense_14_dense_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 0);
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a14      	ldr	r2, [pc, #80]	@ (8008d4c <mlp_predict_failure_configure_activations+0x10c>)
 8008cfc:	60d3      	str	r3, [r2, #12]
    dense_14_output_array.data = AI_PTR(g_mlp_predict_failure_activations_map[0] + 20);
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3314      	adds	r3, #20
 8008d04:	4a12      	ldr	r2, [pc, #72]	@ (8008d50 <mlp_predict_failure_configure_activations+0x110>)
 8008d06:	6093      	str	r3, [r2, #8]
    dense_14_output_array.data_start = AI_PTR(g_mlp_predict_failure_activations_map[0] + 20);
 8008d08:	4b08      	ldr	r3, [pc, #32]	@ (8008d2c <mlp_predict_failure_configure_activations+0xec>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3314      	adds	r3, #20
 8008d0e:	4a10      	ldr	r2, [pc, #64]	@ (8008d50 <mlp_predict_failure_configure_activations+0x110>)
 8008d10:	60d3      	str	r3, [r2, #12]
    return true;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e005      	b.n	8008d22 <mlp_predict_failure_configure_activations+0xe2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008d16:	2213      	movs	r2, #19
 8008d18:	2130      	movs	r1, #48	@ 0x30
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fb3e 	bl	800939c <ai_platform_network_set_error>
  return false;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200014ec 	.word	0x200014ec
 8008d30:	20000010 	.word	0x20000010
 8008d34:	20000020 	.word	0x20000020
 8008d38:	20000030 	.word	0x20000030
 8008d3c:	20000040 	.word	0x20000040
 8008d40:	20000050 	.word	0x20000050
 8008d44:	20000060 	.word	0x20000060
 8008d48:	20000070 	.word	0x20000070
 8008d4c:	20000080 	.word	0x20000080
 8008d50:	20000090 	.word	0x20000090

08008d54 <mlp_predict_failure_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mlp_predict_failure_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_mlp_predict_failure_weights_map, 1, params)) {
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	2101      	movs	r1, #1
 8008d62:	484f      	ldr	r0, [pc, #316]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008d64:	f000 fa44 	bl	80091f0 <ai_platform_get_weights_map>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 808e 	beq.w	8008e8c <mlp_predict_failure_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    dense_11_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008d70:	4b4c      	ldr	r3, [pc, #304]	@ (8008ea4 <mlp_predict_failure_configure_weights+0x150>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d78:	4a4a      	ldr	r2, [pc, #296]	@ (8008ea4 <mlp_predict_failure_configure_weights+0x150>)
 8008d7a:	6013      	str	r3, [r2, #0]
    dense_11_dense_weights_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 0);
 8008d7c:	4b48      	ldr	r3, [pc, #288]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a48      	ldr	r2, [pc, #288]	@ (8008ea4 <mlp_predict_failure_configure_weights+0x150>)
 8008d82:	6093      	str	r3, [r2, #8]
    dense_11_dense_weights_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 0);
 8008d84:	4b46      	ldr	r3, [pc, #280]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a46      	ldr	r2, [pc, #280]	@ (8008ea4 <mlp_predict_failure_configure_weights+0x150>)
 8008d8a:	60d3      	str	r3, [r2, #12]
    dense_11_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008d8c:	4b46      	ldr	r3, [pc, #280]	@ (8008ea8 <mlp_predict_failure_configure_weights+0x154>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d94:	4a44      	ldr	r2, [pc, #272]	@ (8008ea8 <mlp_predict_failure_configure_weights+0x154>)
 8008d96:	6013      	str	r3, [r2, #0]
    dense_11_dense_bias_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 640);
 8008d98:	4b41      	ldr	r3, [pc, #260]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8008da0:	4a41      	ldr	r2, [pc, #260]	@ (8008ea8 <mlp_predict_failure_configure_weights+0x154>)
 8008da2:	6093      	str	r3, [r2, #8]
    dense_11_dense_bias_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 640);
 8008da4:	4b3e      	ldr	r3, [pc, #248]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8008dac:	4a3e      	ldr	r2, [pc, #248]	@ (8008ea8 <mlp_predict_failure_configure_weights+0x154>)
 8008dae:	60d3      	str	r3, [r2, #12]
    dense_12_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008db0:	4b3e      	ldr	r3, [pc, #248]	@ (8008eac <mlp_predict_failure_configure_weights+0x158>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008db8:	4a3c      	ldr	r2, [pc, #240]	@ (8008eac <mlp_predict_failure_configure_weights+0x158>)
 8008dba:	6013      	str	r3, [r2, #0]
    dense_12_dense_weights_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 768);
 8008dbc:	4b38      	ldr	r3, [pc, #224]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008dc4:	4a39      	ldr	r2, [pc, #228]	@ (8008eac <mlp_predict_failure_configure_weights+0x158>)
 8008dc6:	6093      	str	r3, [r2, #8]
    dense_12_dense_weights_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 768);
 8008dc8:	4b35      	ldr	r3, [pc, #212]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008dd0:	4a36      	ldr	r2, [pc, #216]	@ (8008eac <mlp_predict_failure_configure_weights+0x158>)
 8008dd2:	60d3      	str	r3, [r2, #12]
    dense_12_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008dd4:	4b36      	ldr	r3, [pc, #216]	@ (8008eb0 <mlp_predict_failure_configure_weights+0x15c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ddc:	4a34      	ldr	r2, [pc, #208]	@ (8008eb0 <mlp_predict_failure_configure_weights+0x15c>)
 8008dde:	6013      	str	r3, [r2, #0]
    dense_12_dense_bias_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 8960);
 8008de0:	4b2f      	ldr	r3, [pc, #188]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8008de8:	4a31      	ldr	r2, [pc, #196]	@ (8008eb0 <mlp_predict_failure_configure_weights+0x15c>)
 8008dea:	6093      	str	r3, [r2, #8]
    dense_12_dense_bias_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 8960);
 8008dec:	4b2c      	ldr	r3, [pc, #176]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8008df4:	4a2e      	ldr	r2, [pc, #184]	@ (8008eb0 <mlp_predict_failure_configure_weights+0x15c>)
 8008df6:	60d3      	str	r3, [r2, #12]
    dense_13_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008df8:	4b2e      	ldr	r3, [pc, #184]	@ (8008eb4 <mlp_predict_failure_configure_weights+0x160>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e00:	4a2c      	ldr	r2, [pc, #176]	@ (8008eb4 <mlp_predict_failure_configure_weights+0x160>)
 8008e02:	6013      	str	r3, [r2, #0]
    dense_13_dense_weights_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 9216);
 8008e04:	4b26      	ldr	r3, [pc, #152]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8008e0c:	4a29      	ldr	r2, [pc, #164]	@ (8008eb4 <mlp_predict_failure_configure_weights+0x160>)
 8008e0e:	6093      	str	r3, [r2, #8]
    dense_13_dense_weights_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 9216);
 8008e10:	4b23      	ldr	r3, [pc, #140]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8008e18:	4a26      	ldr	r2, [pc, #152]	@ (8008eb4 <mlp_predict_failure_configure_weights+0x160>)
 8008e1a:	60d3      	str	r3, [r2, #12]
    dense_13_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e1c:	4b26      	ldr	r3, [pc, #152]	@ (8008eb8 <mlp_predict_failure_configure_weights+0x164>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e24:	4a24      	ldr	r2, [pc, #144]	@ (8008eb8 <mlp_predict_failure_configure_weights+0x164>)
 8008e26:	6013      	str	r3, [r2, #0]
    dense_13_dense_bias_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 41984);
 8008e28:	4b1d      	ldr	r3, [pc, #116]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f503 4324 	add.w	r3, r3, #41984	@ 0xa400
 8008e30:	4a21      	ldr	r2, [pc, #132]	@ (8008eb8 <mlp_predict_failure_configure_weights+0x164>)
 8008e32:	6093      	str	r3, [r2, #8]
    dense_13_dense_bias_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 41984);
 8008e34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f503 4324 	add.w	r3, r3, #41984	@ 0xa400
 8008e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb8 <mlp_predict_failure_configure_weights+0x164>)
 8008e3e:	60d3      	str	r3, [r2, #12]
    dense_14_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e40:	4b1e      	ldr	r3, [pc, #120]	@ (8008ebc <mlp_predict_failure_configure_weights+0x168>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e48:	4a1c      	ldr	r2, [pc, #112]	@ (8008ebc <mlp_predict_failure_configure_weights+0x168>)
 8008e4a:	6013      	str	r3, [r2, #0]
    dense_14_dense_weights_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 42496);
 8008e4c:	4b14      	ldr	r3, [pc, #80]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f503 4326 	add.w	r3, r3, #42496	@ 0xa600
 8008e54:	4a19      	ldr	r2, [pc, #100]	@ (8008ebc <mlp_predict_failure_configure_weights+0x168>)
 8008e56:	6093      	str	r3, [r2, #8]
    dense_14_dense_weights_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 42496);
 8008e58:	4b11      	ldr	r3, [pc, #68]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f503 4326 	add.w	r3, r3, #42496	@ 0xa600
 8008e60:	4a16      	ldr	r2, [pc, #88]	@ (8008ebc <mlp_predict_failure_configure_weights+0x168>)
 8008e62:	60d3      	str	r3, [r2, #12]
    dense_14_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e64:	4b16      	ldr	r3, [pc, #88]	@ (8008ec0 <mlp_predict_failure_configure_weights+0x16c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e6c:	4a14      	ldr	r2, [pc, #80]	@ (8008ec0 <mlp_predict_failure_configure_weights+0x16c>)
 8008e6e:	6013      	str	r3, [r2, #0]
    dense_14_dense_bias_array.data = AI_PTR(g_mlp_predict_failure_weights_map[0] + 45056);
 8008e70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8008e78:	4a11      	ldr	r2, [pc, #68]	@ (8008ec0 <mlp_predict_failure_configure_weights+0x16c>)
 8008e7a:	6093      	str	r3, [r2, #8]
    dense_14_dense_bias_array.data_start = AI_PTR(g_mlp_predict_failure_weights_map[0] + 45056);
 8008e7c:	4b08      	ldr	r3, [pc, #32]	@ (8008ea0 <mlp_predict_failure_configure_weights+0x14c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8008e84:	4a0e      	ldr	r2, [pc, #56]	@ (8008ec0 <mlp_predict_failure_configure_weights+0x16c>)
 8008e86:	60d3      	str	r3, [r2, #12]
    return true;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e005      	b.n	8008e98 <mlp_predict_failure_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008e8c:	2212      	movs	r2, #18
 8008e8e:	2130      	movs	r1, #48	@ 0x30
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa83 	bl	800939c <ai_platform_network_set_error>
  return false;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	200014f0 	.word	0x200014f0
 8008ea4:	200000a0 	.word	0x200000a0
 8008ea8:	200000b0 	.word	0x200000b0
 8008eac:	200000c0 	.word	0x200000c0
 8008eb0:	200000d0 	.word	0x200000d0
 8008eb4:	200000e0 	.word	0x200000e0
 8008eb8:	200000f0 	.word	0x200000f0
 8008ebc:	20000100 	.word	0x20000100
 8008ec0:	20000110 	.word	0x20000110

08008ec4 <ai_mlp_predict_failure_get_error>:
}


AI_API_ENTRY
ai_error ai_mlp_predict_failure_get_error(ai_handle network)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fa59 	bl	8009384 <ai_platform_network_get_error>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <ai_mlp_predict_failure_create>:


AI_API_ENTRY
ai_error ai_mlp_predict_failure_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	2305      	movs	r3, #5
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4a04      	ldr	r2, [pc, #16]	@ (8008f04 <ai_mlp_predict_failure_create+0x28>)
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fb41 	bl	800957c <ai_platform_network_create>
 8008efa:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000880 	.word	0x20000880

08008f08 <ai_mlp_predict_failure_create_and_init>:


AI_API_ENTRY
ai_error ai_mlp_predict_failure_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b094      	sub	sp, #80	@ 0x50
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_mlp_predict_failure_create(network, AI_MLP_PREDICT_FAILURE_DATA_CONFIG);
 8008f14:	2100      	movs	r1, #0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff ffe0 	bl	8008edc <ai_mlp_predict_failure_create>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8008f20:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <ai_mlp_predict_failure_create_and_init+0x24>
    return err;
 8008f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f2a:	e067      	b.n	8008ffc <ai_mlp_predict_failure_create_and_init+0xf4>
  }
  
  if (ai_mlp_predict_failure_data_params_get(&params) != true) {
 8008f2c:	f107 0310 	add.w	r3, r7, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f8e7 	bl	8009104 <ai_mlp_predict_failure_data_params_get>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f083 0301 	eor.w	r3, r3, #1
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d008      	beq.n	8008f54 <ai_mlp_predict_failure_create_and_init+0x4c>
    err = ai_mlp_predict_failure_get_error(*network);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff ffbc 	bl	8008ec4 <ai_mlp_predict_failure_get_error>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8008f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f52:	e053      	b.n	8008ffc <ai_mlp_predict_failure_create_and_init+0xf4>
  }
#if defined(AI_MLP_PREDICT_FAILURE_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008f5a:	e012      	b.n	8008f82 <ai_mlp_predict_failure_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008f5c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8008f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	4413      	add	r3, r2
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	f107 0310 	add.w	r3, r7, #16
 8008f70:	330c      	adds	r3, #12
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f92c 	bl	80091d0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8008f78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <ai_mlp_predict_failure_create_and_init+0x8a>
 8008f88:	8bfb      	ldrh	r3, [r7, #30]
 8008f8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d3e4      	bcc.n	8008f5c <ai_mlp_predict_failure_create_and_init+0x54>
  }
#endif
#if defined(AI_MLP_PREDICT_FAILURE_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8008f92:	2300      	movs	r3, #0
 8008f94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008f98:	e012      	b.n	8008fc0 <ai_mlp_predict_failure_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008f9a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8008f9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	f107 0310 	add.w	r3, r7, #16
 8008fae:	3304      	adds	r3, #4
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f90d 	bl	80091d0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8008fb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008fba:	3301      	adds	r3, #1
 8008fbc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <ai_mlp_predict_failure_create_and_init+0xc8>
 8008fc6:	8afb      	ldrh	r3, [r7, #22]
 8008fc8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3e4      	bcc.n	8008f9a <ai_mlp_predict_failure_create_and_init+0x92>
  }
#endif
  if (ai_mlp_predict_failure_init(*network, &params) != true) {
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f107 0210 	add.w	r2, r7, #16
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f846 	bl	800906c <ai_mlp_predict_failure_init>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f083 0301 	eor.w	r3, r3, #1
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d006      	beq.n	8008ffa <ai_mlp_predict_failure_create_and_init+0xf2>
    err = ai_mlp_predict_failure_get_error(*network);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff ff67 	bl	8008ec4 <ai_mlp_predict_failure_get_error>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8008ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3750      	adds	r7, #80	@ 0x50
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <ai_mlp_predict_failure_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_mlp_predict_failure_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <ai_mlp_predict_failure_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009014:	4b06      	ldr	r3, [pc, #24]	@ (8009030 <ai_mlp_predict_failure_inputs_get+0x2c>)
 8009016:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a06      	ldr	r2, [pc, #24]	@ (8009034 <ai_mlp_predict_failure_inputs_get+0x30>)
 800901c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f9c1 	bl	80093a8 <ai_platform_inputs_get>
 8009026:	4603      	mov	r3, r0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000880 	.word	0x20000880
 8009034:	a1c00100 	.word	0xa1c00100

08009038 <ai_mlp_predict_failure_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_mlp_predict_failure_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <ai_mlp_predict_failure_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009048:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <ai_mlp_predict_failure_outputs_get+0x2c>)
 800904a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a06      	ldr	r2, [pc, #24]	@ (8009068 <ai_mlp_predict_failure_outputs_get+0x30>)
 8009050:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa1d 	bl	8009494 <ai_platform_outputs_get>
 800905a:	4603      	mov	r3, r0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000880 	.word	0x20000880
 8009068:	a1c00100 	.word	0xa1c00100

0800906c <ai_mlp_predict_failure_init>:


AI_API_ENTRY
ai_bool ai_mlp_predict_failure_init(
  ai_handle network, const ai_network_params* params)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fac1 	bl	8009600 <ai_platform_network_init>
 800907e:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8009080:	2301      	movs	r3, #1
 8009082:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <ai_mlp_predict_failure_init+0x22>
 800908a:	2300      	movs	r3, #0
 800908c:	e026      	b.n	80090dc <ai_mlp_predict_failure_init+0x70>
  ok &= mlp_predict_failure_configure_weights(net_ctx, params);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff fe5f 	bl	8008d54 <mlp_predict_failure_configure_weights>
 8009096:	4603      	mov	r3, r0
 8009098:	461a      	mov	r2, r3
 800909a:	7afb      	ldrb	r3, [r7, #11]
 800909c:	4013      	ands	r3, r2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bf14      	ite	ne
 80090a2:	2301      	movne	r3, #1
 80090a4:	2300      	moveq	r3, #0
 80090a6:	72fb      	strb	r3, [r7, #11]
  ok &= mlp_predict_failure_configure_activations(net_ctx, params);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff fdc8 	bl	8008c40 <mlp_predict_failure_configure_activations>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bf14      	ite	ne
 80090bc:	2301      	movne	r3, #1
 80090be:	2300      	moveq	r3, #0
 80090c0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fb6a 	bl	800979c <ai_platform_network_post_init>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	4013      	ands	r3, r2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bf14      	ite	ne
 80090d4:	2301      	movne	r3, #1
 80090d6:	2300      	moveq	r3, #0
 80090d8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80090da:	7afb      	ldrb	r3, [r7, #11]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <ai_mlp_predict_failure_run>:


AI_API_ENTRY
ai_i32 ai_mlp_predict_failure_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	68b9      	ldr	r1, [r7, #8]
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fb81 	bl	80097fc <ai_platform_network_process>
 80090fa:	4603      	mov	r3, r0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <ai_mlp_predict_failure_data_params_get>:
 * @ingroup mlp_predict_failure_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mlp_predict_failure_data_params_get(ai_network_params* params)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <ai_mlp_predict_failure_data_params_get+0x12>
 8009112:	2300      	movs	r3, #0
 8009114:	e016      	b.n	8009144 <ai_mlp_predict_failure_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8009116:	4a0d      	ldr	r2, [pc, #52]	@ (800914c <ai_mlp_predict_failure_data_params_get+0x48>)
 8009118:	f107 0310 	add.w	r3, r7, #16
 800911c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009120:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MLP_PREDICT_FAILURE_DATA_ACTIVATIONS_COUNT, g_mlp_predict_failure_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8009124:	4a0a      	ldr	r2, [pc, #40]	@ (8009150 <ai_mlp_predict_failure_data_params_get+0x4c>)
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800912e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MLP_PREDICT_FAILURE_DATA_WEIGHTS_COUNT, g_mlp_predict_failure_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8009132:	f107 0210 	add.w	r2, r7, #16
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f8ff 	bl	8009340 <ai_platform_bind_network_params>
 8009142:	4603      	mov	r3, r0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	0800c08c 	.word	0x0800c08c
 8009150:	0800c094 	.word	0x0800c094

08009154 <ai_buffer_get_size>:
 8009154:	b378      	cbz	r0, 80091b6 <ai_buffer_get_size+0x62>
 8009156:	b410      	push	{r4}
 8009158:	6803      	ldr	r3, [r0, #0]
 800915a:	4a17      	ldr	r2, [pc, #92]	@ (80091b8 <ai_buffer_get_size+0x64>)
 800915c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009160:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009164:	4293      	cmp	r3, r2
 8009166:	d01e      	beq.n	80091a6 <ai_buffer_get_size+0x52>
 8009168:	6984      	ldr	r4, [r0, #24]
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	7d03      	ldrb	r3, [r0, #20]
 800916e:	6941      	ldr	r1, [r0, #20]
 8009170:	f1a3 0301 	sub.w	r3, r3, #1
 8009174:	fab3 f383 	clz	r3, r3
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800917e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009182:	da0b      	bge.n	800919c <ai_buffer_get_size+0x48>
 8009184:	2b01      	cmp	r3, #1
 8009186:	d102      	bne.n	800918e <ai_buffer_get_size+0x3a>
 8009188:	2802      	cmp	r0, #2
 800918a:	d007      	beq.n	800919c <ai_buffer_get_size+0x48>
 800918c:	2302      	movs	r3, #2
 800918e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009192:	3301      	adds	r3, #1
 8009194:	4298      	cmp	r0, r3
 8009196:	fb01 f202 	mul.w	r2, r1, r2
 800919a:	d1f3      	bne.n	8009184 <ai_buffer_get_size+0x30>
 800919c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80091a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	2900      	cmp	r1, #0
 80091a8:	d0de      	beq.n	8009168 <ai_buffer_get_size+0x14>
 80091aa:	6984      	ldr	r4, [r0, #24]
 80091ac:	6862      	ldr	r2, [r4, #4]
 80091ae:	321f      	adds	r2, #31
 80091b0:	f022 021f 	bic.w	r2, r2, #31
 80091b4:	e7da      	b.n	800916c <ai_buffer_get_size+0x18>
 80091b6:	4770      	bx	lr
 80091b8:	000400c0 	.word	0x000400c0

080091bc <ai_buffer_array_sane>:
 80091bc:	b138      	cbz	r0, 80091ce <ai_buffer_array_sane+0x12>
 80091be:	6843      	ldr	r3, [r0, #4]
 80091c0:	b123      	cbz	r3, 80091cc <ai_buffer_array_sane+0x10>
 80091c2:	8840      	ldrh	r0, [r0, #2]
 80091c4:	3800      	subs	r0, #0
 80091c6:	bf18      	it	ne
 80091c8:	2001      	movne	r0, #1
 80091ca:	4770      	bx	lr
 80091cc:	4618      	mov	r0, r3
 80091ce:	4770      	bx	lr

080091d0 <ai_buffer_array_item_set_address>:
 80091d0:	b150      	cbz	r0, 80091e8 <ai_buffer_array_item_set_address+0x18>
 80091d2:	6843      	ldr	r3, [r0, #4]
 80091d4:	b14b      	cbz	r3, 80091ea <ai_buffer_array_item_set_address+0x1a>
 80091d6:	8840      	ldrh	r0, [r0, #2]
 80091d8:	b900      	cbnz	r0, 80091dc <ai_buffer_array_item_set_address+0xc>
 80091da:	4770      	bx	lr
 80091dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80091e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80091e4:	2001      	movs	r0, #1
 80091e6:	605a      	str	r2, [r3, #4]
 80091e8:	4770      	bx	lr
 80091ea:	4618      	mov	r0, r3
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop

080091f0 <ai_platform_get_weights_map>:
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	d037      	beq.n	8009264 <ai_platform_get_weights_map+0x74>
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	b1a0      	cbz	r0, 8009224 <ai_platform_get_weights_map+0x34>
 80091fa:	460f      	mov	r7, r1
 80091fc:	b191      	cbz	r1, 8009224 <ai_platform_get_weights_map+0x34>
 80091fe:	4b25      	ldr	r3, [pc, #148]	@ (8009294 <ai_platform_get_weights_map+0xa4>)
 8009200:	6810      	ldr	r0, [r2, #0]
 8009202:	4298      	cmp	r0, r3
 8009204:	4615      	mov	r5, r2
 8009206:	d00f      	beq.n	8009228 <ai_platform_get_weights_map+0x38>
 8009208:	6855      	ldr	r5, [r2, #4]
 800920a:	b15d      	cbz	r5, 8009224 <ai_platform_get_weights_map+0x34>
 800920c:	682e      	ldr	r6, [r5, #0]
 800920e:	429e      	cmp	r6, r3
 8009210:	d02a      	beq.n	8009268 <ai_platform_get_weights_map+0x78>
 8009212:	f1a1 0001 	sub.w	r0, r1, #1
 8009216:	6025      	str	r5, [r4, #0]
 8009218:	fab0 f080 	clz	r0, r0
 800921c:	0940      	lsrs	r0, r0, #5
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009220:	42a7      	cmp	r7, r4
 8009222:	d034      	beq.n	800928e <ai_platform_get_weights_map+0x9e>
 8009224:	2000      	movs	r0, #0
 8009226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009228:	1d10      	adds	r0, r2, #4
 800922a:	f7ff ffc7 	bl	80091bc <ai_buffer_array_sane>
 800922e:	2800      	cmp	r0, #0
 8009230:	d0f8      	beq.n	8009224 <ai_platform_get_weights_map+0x34>
 8009232:	88eb      	ldrh	r3, [r5, #6]
 8009234:	429f      	cmp	r7, r3
 8009236:	d1f5      	bne.n	8009224 <ai_platform_get_weights_map+0x34>
 8009238:	f04f 0c00 	mov.w	ip, #0
 800923c:	1f20      	subs	r0, r4, #4
 800923e:	46e6      	mov	lr, ip
 8009240:	68ab      	ldr	r3, [r5, #8]
 8009242:	4463      	add	r3, ip
 8009244:	f10c 0c1c 	add.w	ip, ip, #28
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	b12b      	cbz	r3, 8009258 <ai_platform_get_weights_map+0x68>
 800924c:	f10e 0e01 	add.w	lr, lr, #1
 8009250:	4577      	cmp	r7, lr
 8009252:	f840 3f04 	str.w	r3, [r0, #4]!
 8009256:	d1f3      	bne.n	8009240 <ai_platform_get_weights_map+0x50>
 8009258:	eba7 000e 	sub.w	r0, r7, lr
 800925c:	fab0 f080 	clz	r0, r0
 8009260:	0940      	lsrs	r0, r0, #5
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009264:	2000      	movs	r0, #0
 8009266:	4770      	bx	lr
 8009268:	1f20      	subs	r0, r4, #4
 800926a:	462a      	mov	r2, r5
 800926c:	2400      	movs	r4, #0
 800926e:	e000      	b.n	8009272 <ai_platform_get_weights_map+0x82>
 8009270:	461c      	mov	r4, r3
 8009272:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009276:	42b3      	cmp	r3, r6
 8009278:	d0d2      	beq.n	8009220 <ai_platform_get_weights_map+0x30>
 800927a:	f840 3f04 	str.w	r3, [r0, #4]!
 800927e:	1c63      	adds	r3, r4, #1
 8009280:	429f      	cmp	r7, r3
 8009282:	d1f5      	bne.n	8009270 <ai_platform_get_weights_map+0x80>
 8009284:	3402      	adds	r4, #2
 8009286:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800928a:	42b3      	cmp	r3, r6
 800928c:	d1ca      	bne.n	8009224 <ai_platform_get_weights_map+0x34>
 800928e:	2001      	movs	r0, #1
 8009290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009292:	bf00      	nop
 8009294:	a1facade 	.word	0xa1facade

08009298 <ai_platform_get_activations_map>:
 8009298:	2a00      	cmp	r2, #0
 800929a:	d038      	beq.n	800930e <ai_platform_get_activations_map+0x76>
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	4604      	mov	r4, r0
 80092a0:	b1a0      	cbz	r0, 80092cc <ai_platform_get_activations_map+0x34>
 80092a2:	460f      	mov	r7, r1
 80092a4:	b191      	cbz	r1, 80092cc <ai_platform_get_activations_map+0x34>
 80092a6:	4b25      	ldr	r3, [pc, #148]	@ (800933c <ai_platform_get_activations_map+0xa4>)
 80092a8:	6810      	ldr	r0, [r2, #0]
 80092aa:	4298      	cmp	r0, r3
 80092ac:	4615      	mov	r5, r2
 80092ae:	d00f      	beq.n	80092d0 <ai_platform_get_activations_map+0x38>
 80092b0:	6a15      	ldr	r5, [r2, #32]
 80092b2:	b15d      	cbz	r5, 80092cc <ai_platform_get_activations_map+0x34>
 80092b4:	682e      	ldr	r6, [r5, #0]
 80092b6:	429e      	cmp	r6, r3
 80092b8:	d02b      	beq.n	8009312 <ai_platform_get_activations_map+0x7a>
 80092ba:	f1a1 0001 	sub.w	r0, r1, #1
 80092be:	6025      	str	r5, [r4, #0]
 80092c0:	fab0 f080 	clz	r0, r0
 80092c4:	0940      	lsrs	r0, r0, #5
 80092c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c8:	42a7      	cmp	r7, r4
 80092ca:	d035      	beq.n	8009338 <ai_platform_get_activations_map+0xa0>
 80092cc:	2000      	movs	r0, #0
 80092ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d0:	f102 000c 	add.w	r0, r2, #12
 80092d4:	f7ff ff72 	bl	80091bc <ai_buffer_array_sane>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d0f7      	beq.n	80092cc <ai_platform_get_activations_map+0x34>
 80092dc:	89eb      	ldrh	r3, [r5, #14]
 80092de:	429f      	cmp	r7, r3
 80092e0:	d1f4      	bne.n	80092cc <ai_platform_get_activations_map+0x34>
 80092e2:	f04f 0c00 	mov.w	ip, #0
 80092e6:	1f20      	subs	r0, r4, #4
 80092e8:	46e6      	mov	lr, ip
 80092ea:	692b      	ldr	r3, [r5, #16]
 80092ec:	4463      	add	r3, ip
 80092ee:	f10c 0c1c 	add.w	ip, ip, #28
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	b12b      	cbz	r3, 8009302 <ai_platform_get_activations_map+0x6a>
 80092f6:	f10e 0e01 	add.w	lr, lr, #1
 80092fa:	4577      	cmp	r7, lr
 80092fc:	f840 3f04 	str.w	r3, [r0, #4]!
 8009300:	d1f3      	bne.n	80092ea <ai_platform_get_activations_map+0x52>
 8009302:	eba7 000e 	sub.w	r0, r7, lr
 8009306:	fab0 f080 	clz	r0, r0
 800930a:	0940      	lsrs	r0, r0, #5
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930e:	2000      	movs	r0, #0
 8009310:	4770      	bx	lr
 8009312:	1f20      	subs	r0, r4, #4
 8009314:	462a      	mov	r2, r5
 8009316:	2400      	movs	r4, #0
 8009318:	e000      	b.n	800931c <ai_platform_get_activations_map+0x84>
 800931a:	461c      	mov	r4, r3
 800931c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009320:	42b3      	cmp	r3, r6
 8009322:	d0d1      	beq.n	80092c8 <ai_platform_get_activations_map+0x30>
 8009324:	f840 3f04 	str.w	r3, [r0, #4]!
 8009328:	1c63      	adds	r3, r4, #1
 800932a:	429f      	cmp	r7, r3
 800932c:	d1f5      	bne.n	800931a <ai_platform_get_activations_map+0x82>
 800932e:	3402      	adds	r4, #2
 8009330:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009334:	42b3      	cmp	r3, r6
 8009336:	d1c9      	bne.n	80092cc <ai_platform_get_activations_map+0x34>
 8009338:	2001      	movs	r0, #1
 800933a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933c:	a1facade 	.word	0xa1facade

08009340 <ai_platform_bind_network_params>:
 8009340:	b1a0      	cbz	r0, 800936c <ai_platform_bind_network_params+0x2c>
 8009342:	b1b1      	cbz	r1, 8009372 <ai_platform_bind_network_params+0x32>
 8009344:	b1c2      	cbz	r2, 8009378 <ai_platform_bind_network_params+0x38>
 8009346:	b410      	push	{r4}
 8009348:	4603      	mov	r3, r0
 800934a:	4c0d      	ldr	r4, [pc, #52]	@ (8009380 <ai_platform_bind_network_params+0x40>)
 800934c:	f843 4b04 	str.w	r4, [r3], #4
 8009350:	f100 0c0c 	add.w	ip, r0, #12
 8009354:	c903      	ldmia	r1, {r0, r1}
 8009356:	e883 0003 	stmia.w	r3, {r0, r1}
 800935a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800935e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009362:	2301      	movs	r3, #1
 8009364:	4618      	mov	r0, r3
 8009366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	4603      	mov	r3, r0
 800936e:	4618      	mov	r0, r3
 8009370:	4770      	bx	lr
 8009372:	460b      	mov	r3, r1
 8009374:	4618      	mov	r0, r3
 8009376:	4770      	bx	lr
 8009378:	4613      	mov	r3, r2
 800937a:	4618      	mov	r0, r3
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	a1facade 	.word	0xa1facade

08009384 <ai_platform_network_get_error>:
 8009384:	4b04      	ldr	r3, [pc, #16]	@ (8009398 <ai_platform_network_get_error+0x14>)
 8009386:	6802      	ldr	r2, [r0, #0]
 8009388:	4393      	bics	r3, r2
 800938a:	d102      	bne.n	8009392 <ai_platform_network_get_error+0xe>
 800938c:	300c      	adds	r0, #12
 800938e:	f000 bc77 	b.w	8009c80 <core_get_error>
 8009392:	f241 0010 	movw	r0, #4112	@ 0x1010
 8009396:	4770      	bx	lr
 8009398:	a1c00100 	.word	0xa1c00100

0800939c <ai_platform_network_set_error>:
 800939c:	b110      	cbz	r0, 80093a4 <ai_platform_network_set_error+0x8>
 800939e:	300c      	adds	r0, #12
 80093a0:	f000 bc74 	b.w	8009c8c <core_set_error>
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop

080093a8 <ai_platform_inputs_get>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4b38      	ldr	r3, [pc, #224]	@ (8009490 <ai_platform_inputs_get+0xe8>)
 80093ae:	6802      	ldr	r2, [r0, #0]
 80093b0:	b085      	sub	sp, #20
 80093b2:	4393      	bics	r3, r2
 80093b4:	9003      	str	r0, [sp, #12]
 80093b6:	9102      	str	r1, [sp, #8]
 80093b8:	d160      	bne.n	800947c <ai_platform_inputs_get+0xd4>
 80093ba:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d04f      	beq.n	8009460 <ai_platform_inputs_get+0xb8>
 80093c0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80093c4:	f1ba 0f00 	cmp.w	sl, #0
 80093c8:	d04a      	beq.n	8009460 <ai_platform_inputs_get+0xb8>
 80093ca:	f04f 0b00 	mov.w	fp, #0
 80093ce:	465d      	mov	r5, fp
 80093d0:	e016      	b.n	8009400 <ai_platform_inputs_get+0x58>
 80093d2:	9901      	ldr	r1, [sp, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	507a      	str	r2, [r7, r1]
 80093d8:	69b1      	ldr	r1, [r6, #24]
 80093da:	684e      	ldr	r6, [r1, #4]
 80093dc:	60a3      	str	r3, [r4, #8]
 80093de:	f04f 0201 	mov.w	r2, #1
 80093e2:	7522      	strb	r2, [r4, #20]
 80093e4:	6961      	ldr	r1, [r4, #20]
 80093e6:	6020      	str	r0, [r4, #0]
 80093e8:	f369 211f 	bfi	r1, r9, #8, #24
 80093ec:	2300      	movs	r3, #0
 80093ee:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80093f2:	e9c4 1805 	strd	r1, r8, [r4, #20]
 80093f6:	f8c4 c004 	str.w	ip, [r4, #4]
 80093fa:	3501      	adds	r5, #1
 80093fc:	f10b 0b1c 	add.w	fp, fp, #28
 8009400:	f8ba 3000 	ldrh.w	r3, [sl]
 8009404:	42ab      	cmp	r3, r5
 8009406:	b2aa      	uxth	r2, r5
 8009408:	d93c      	bls.n	8009484 <ai_platform_inputs_get+0xdc>
 800940a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800940e:	00e9      	lsls	r1, r5, #3
 8009410:	9101      	str	r1, [sp, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d036      	beq.n	8009484 <ai_platform_inputs_get+0xdc>
 8009416:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800941a:	2e00      	cmp	r6, #0
 800941c:	d032      	beq.n	8009484 <ai_platform_inputs_get+0xdc>
 800941e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009422:	69b2      	ldr	r2, [r6, #24]
 8009424:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009428:	6810      	ldr	r0, [r2, #0]
 800942a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800942e:	68b3      	ldr	r3, [r6, #8]
 8009430:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8009434:	f001 fba0 	bl	800ab78 <ai_array_to_buffer_fmt>
 8009438:	69b1      	ldr	r1, [r6, #24]
 800943a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800943e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009442:	445c      	add	r4, fp
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0c8      	beq.n	80093da <ai_platform_inputs_get+0x32>
 8009448:	2100      	movs	r1, #0
 800944a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800944e:	6831      	ldr	r1, [r6, #0]
 8009450:	6059      	str	r1, [r3, #4]
 8009452:	b111      	cbz	r1, 800945a <ai_platform_inputs_get+0xb2>
 8009454:	8849      	ldrh	r1, [r1, #2]
 8009456:	2900      	cmp	r1, #0
 8009458:	d1bb      	bne.n	80093d2 <ai_platform_inputs_get+0x2a>
 800945a:	69b1      	ldr	r1, [r6, #24]
 800945c:	2300      	movs	r3, #0
 800945e:	e7bc      	b.n	80093da <ai_platform_inputs_get+0x32>
 8009460:	9803      	ldr	r0, [sp, #12]
 8009462:	2218      	movs	r2, #24
 8009464:	2111      	movs	r1, #17
 8009466:	300c      	adds	r0, #12
 8009468:	f000 fc10 	bl	8009c8c <core_set_error>
 800946c:	2200      	movs	r2, #0
 800946e:	4610      	mov	r0, r2
 8009470:	9b02      	ldr	r3, [sp, #8]
 8009472:	b103      	cbz	r3, 8009476 <ai_platform_inputs_get+0xce>
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	b005      	add	sp, #20
 8009478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947c:	2000      	movs	r0, #0
 800947e:	b005      	add	sp, #20
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	2a00      	cmp	r2, #0
 8009486:	d0eb      	beq.n	8009460 <ai_platform_inputs_get+0xb8>
 8009488:	f8da 3008 	ldr.w	r3, [sl, #8]
 800948c:	6858      	ldr	r0, [r3, #4]
 800948e:	e7ef      	b.n	8009470 <ai_platform_inputs_get+0xc8>
 8009490:	a1c00100 	.word	0xa1c00100

08009494 <ai_platform_outputs_get>:
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	4b37      	ldr	r3, [pc, #220]	@ (8009578 <ai_platform_outputs_get+0xe4>)
 800949a:	6802      	ldr	r2, [r0, #0]
 800949c:	b085      	sub	sp, #20
 800949e:	4393      	bics	r3, r2
 80094a0:	9003      	str	r0, [sp, #12]
 80094a2:	9102      	str	r1, [sp, #8]
 80094a4:	d15d      	bne.n	8009562 <ai_platform_outputs_get+0xce>
 80094a6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d94c      	bls.n	8009546 <ai_platform_outputs_get+0xb2>
 80094ac:	f04f 0b00 	mov.w	fp, #0
 80094b0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80094b4:	465d      	mov	r5, fp
 80094b6:	46d8      	mov	r8, fp
 80094b8:	e016      	b.n	80094e8 <ai_platform_outputs_get+0x54>
 80094ba:	9a01      	ldr	r2, [sp, #4]
 80094bc:	2101      	movs	r1, #1
 80094be:	50b9      	str	r1, [r7, r2]
 80094c0:	69b2      	ldr	r2, [r6, #24]
 80094c2:	6856      	ldr	r6, [r2, #4]
 80094c4:	6020      	str	r0, [r4, #0]
 80094c6:	f04f 0201 	mov.w	r2, #1
 80094ca:	7522      	strb	r2, [r4, #20]
 80094cc:	6960      	ldr	r0, [r4, #20]
 80094ce:	f8c4 c004 	str.w	ip, [r4, #4]
 80094d2:	f369 201f 	bfi	r0, r9, #8, #24
 80094d6:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80094da:	e9c4 3802 	strd	r3, r8, [r4, #8]
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	61a3      	str	r3, [r4, #24]
 80094e2:	3501      	adds	r5, #1
 80094e4:	f10b 0b1c 	add.w	fp, fp, #28
 80094e8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80094ec:	42ab      	cmp	r3, r5
 80094ee:	b2aa      	uxth	r2, r5
 80094f0:	d93b      	bls.n	800956a <ai_platform_outputs_get+0xd6>
 80094f2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80094f6:	00e9      	lsls	r1, r5, #3
 80094f8:	9101      	str	r1, [sp, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d035      	beq.n	800956a <ai_platform_outputs_get+0xd6>
 80094fe:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009502:	2e00      	cmp	r6, #0
 8009504:	d031      	beq.n	800956a <ai_platform_outputs_get+0xd6>
 8009506:	f8da 3014 	ldr.w	r3, [sl, #20]
 800950a:	69b2      	ldr	r2, [r6, #24]
 800950c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009510:	68b3      	ldr	r3, [r6, #8]
 8009512:	6810      	ldr	r0, [r2, #0]
 8009514:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8009518:	68f3      	ldr	r3, [r6, #12]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	f001 fb2c 	bl	800ab78 <ai_array_to_buffer_fmt>
 8009520:	69b2      	ldr	r2, [r6, #24]
 8009522:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8009526:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800952a:	445c      	add	r4, fp
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0c8      	beq.n	80094c2 <ai_platform_outputs_get+0x2e>
 8009530:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8009534:	6832      	ldr	r2, [r6, #0]
 8009536:	605a      	str	r2, [r3, #4]
 8009538:	b112      	cbz	r2, 8009540 <ai_platform_outputs_get+0xac>
 800953a:	8852      	ldrh	r2, [r2, #2]
 800953c:	2a00      	cmp	r2, #0
 800953e:	d1bc      	bne.n	80094ba <ai_platform_outputs_get+0x26>
 8009540:	69b2      	ldr	r2, [r6, #24]
 8009542:	2300      	movs	r3, #0
 8009544:	e7bd      	b.n	80094c2 <ai_platform_outputs_get+0x2e>
 8009546:	9803      	ldr	r0, [sp, #12]
 8009548:	2218      	movs	r2, #24
 800954a:	2111      	movs	r1, #17
 800954c:	300c      	adds	r0, #12
 800954e:	f000 fb9d 	bl	8009c8c <core_set_error>
 8009552:	2200      	movs	r2, #0
 8009554:	4610      	mov	r0, r2
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	b103      	cbz	r3, 800955c <ai_platform_outputs_get+0xc8>
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	b005      	add	sp, #20
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009562:	2000      	movs	r0, #0
 8009564:	b005      	add	sp, #20
 8009566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956a:	2a00      	cmp	r2, #0
 800956c:	d0eb      	beq.n	8009546 <ai_platform_outputs_get+0xb2>
 800956e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009572:	6858      	ldr	r0, [r3, #4]
 8009574:	e7ef      	b.n	8009556 <ai_platform_outputs_get+0xc2>
 8009576:	bf00      	nop
 8009578:	a1c00100 	.word	0xa1c00100

0800957c <ai_platform_network_create>:
 800957c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009580:	b083      	sub	sp, #12
 8009582:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8009586:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800958a:	b320      	cbz	r0, 80095d6 <ai_platform_network_create+0x5a>
 800958c:	6002      	str	r2, [r0, #0]
 800958e:	4616      	mov	r6, r2
 8009590:	461f      	mov	r7, r3
 8009592:	4604      	mov	r4, r0
 8009594:	f000 fb72 	bl	8009c7c <core_init>
 8009598:	b970      	cbnz	r0, 80095b8 <ai_platform_network_create+0x3c>
 800959a:	2530      	movs	r5, #48	@ 0x30
 800959c:	2300      	movs	r3, #0
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	2410      	movs	r4, #16
 80095a2:	4642      	mov	r2, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	4638      	mov	r0, r7
 80095a8:	f001 fb68 	bl	800ac7c <ai_version_get>
 80095ac:	60b0      	str	r0, [r6, #8]
 80095ae:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80095b2:	b003      	add	sp, #12
 80095b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b8:	2200      	movs	r2, #0
 80095ba:	4649      	mov	r1, r9
 80095bc:	4638      	mov	r0, r7
 80095be:	f001 fb5d 	bl	800ac7c <ai_version_get>
 80095c2:	2200      	movs	r2, #0
 80095c4:	4605      	mov	r5, r0
 80095c6:	2105      	movs	r1, #5
 80095c8:	2001      	movs	r0, #1
 80095ca:	f001 fb57 	bl	800ac7c <ai_version_get>
 80095ce:	4285      	cmp	r5, r0
 80095d0:	d008      	beq.n	80095e4 <ai_platform_network_create+0x68>
 80095d2:	2501      	movs	r5, #1
 80095d4:	e7e2      	b.n	800959c <ai_platform_network_create+0x20>
 80095d6:	2510      	movs	r5, #16
 80095d8:	462c      	mov	r4, r5
 80095da:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80095de:	b003      	add	sp, #12
 80095e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095e4:	4b05      	ldr	r3, [pc, #20]	@ (80095fc <ai_platform_network_create+0x80>)
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	a801      	add	r0, sp, #4
 80095ea:	f000 fb5b 	bl	8009ca4 <ai_check_custom_types>
 80095ee:	b110      	cbz	r0, 80095f6 <ai_platform_network_create+0x7a>
 80095f0:	2400      	movs	r4, #0
 80095f2:	4625      	mov	r5, r4
 80095f4:	e7d5      	b.n	80095a2 <ai_platform_network_create+0x26>
 80095f6:	2502      	movs	r5, #2
 80095f8:	e7d0      	b.n	800959c <ai_platform_network_create+0x20>
 80095fa:	bf00      	nop
 80095fc:	84048403 	.word	0x84048403

08009600 <ai_platform_network_init>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	4b63      	ldr	r3, [pc, #396]	@ (8009794 <ai_platform_network_init+0x194>)
 8009606:	6802      	ldr	r2, [r0, #0]
 8009608:	4393      	bics	r3, r2
 800960a:	b083      	sub	sp, #12
 800960c:	d156      	bne.n	80096bc <ai_platform_network_init+0xbc>
 800960e:	4604      	mov	r4, r0
 8009610:	460f      	mov	r7, r1
 8009612:	2900      	cmp	r1, #0
 8009614:	f000 80a9 	beq.w	800976a <ai_platform_network_init+0x16a>
 8009618:	680b      	ldr	r3, [r1, #0]
 800961a:	495f      	ldr	r1, [pc, #380]	@ (8009798 <ai_platform_network_init+0x198>)
 800961c:	428b      	cmp	r3, r1
 800961e:	d113      	bne.n	8009648 <ai_platform_network_init+0x48>
 8009620:	495c      	ldr	r1, [pc, #368]	@ (8009794 <ai_platform_network_init+0x194>)
 8009622:	89bd      	ldrh	r5, [r7, #12]
 8009624:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8009628:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800962c:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8009630:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8009634:	68be      	ldr	r6, [r7, #8]
 8009636:	428a      	cmp	r2, r1
 8009638:	d02c      	beq.n	8009694 <ai_platform_network_init+0x94>
 800963a:	2303      	movs	r3, #3
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	4627      	mov	r7, r4
 8009640:	4638      	mov	r0, r7
 8009642:	b003      	add	sp, #12
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	2101      	movs	r1, #1
 800964a:	4638      	mov	r0, r7
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8009652:	f7ff fd7f 	bl	8009154 <ai_buffer_get_size>
 8009656:	f107 081c 	add.w	r8, r7, #28
 800965a:	4605      	mov	r5, r0
 800965c:	2101      	movs	r1, #1
 800965e:	4640      	mov	r0, r8
 8009660:	463e      	mov	r6, r7
 8009662:	6a3f      	ldr	r7, [r7, #32]
 8009664:	f7ff fd76 	bl	8009154 <ai_buffer_get_size>
 8009668:	2d00      	cmp	r5, #0
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	bf0a      	itet	eq
 800966e:	46a9      	moveq	r9, r5
 8009670:	f04f 0901 	movne.w	r9, #1
 8009674:	462e      	moveq	r6, r5
 8009676:	b330      	cbz	r0, 80096c6 <ai_platform_network_init+0xc6>
 8009678:	2f00      	cmp	r7, #0
 800967a:	f000 8084 	beq.w	8009786 <ai_platform_network_init+0x186>
 800967e:	f04f 0a01 	mov.w	sl, #1
 8009682:	f1bb 0f00 	cmp.w	fp, #0
 8009686:	d021      	beq.n	80096cc <ai_platform_network_init+0xcc>
 8009688:	2500      	movs	r5, #0
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	4941      	ldr	r1, [pc, #260]	@ (8009794 <ai_platform_network_init+0x194>)
 800968e:	428a      	cmp	r2, r1
 8009690:	46ab      	mov	fp, r5
 8009692:	d1d2      	bne.n	800963a <ai_platform_network_init+0x3a>
 8009694:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8009696:	454a      	cmp	r2, r9
 8009698:	4a3f      	ldr	r2, [pc, #252]	@ (8009798 <ai_platform_network_init+0x198>)
 800969a:	d221      	bcs.n	80096e0 <ai_platform_network_init+0xe0>
 800969c:	4293      	cmp	r3, r2
 800969e:	d15c      	bne.n	800975a <ai_platform_network_init+0x15a>
 80096a0:	6266      	str	r6, [r4, #36]	@ 0x24
 80096a2:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80096a6:	f8a4 b020 	strh.w	fp, [r4, #32]
 80096aa:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80096ae:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80096b2:	8525      	strh	r5, [r4, #40]	@ 0x28
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fb1f 	bl	8009cf8 <ai_layers_init_all>
 80096ba:	e7be      	b.n	800963a <ai_platform_network_init+0x3a>
 80096bc:	2700      	movs	r7, #0
 80096be:	4638      	mov	r0, r7
 80096c0:	b003      	add	sp, #12
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	4680      	mov	r8, r0
 80096c8:	4682      	mov	sl, r0
 80096ca:	e7da      	b.n	8009682 <ai_platform_network_init+0x82>
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d0dc      	beq.n	800968a <ai_platform_network_init+0x8a>
 80096d0:	2212      	movs	r2, #18
 80096d2:	2110      	movs	r1, #16
 80096d4:	f104 000c 	add.w	r0, r4, #12
 80096d8:	f000 fad8 	bl	8009c8c <core_set_error>
 80096dc:	465f      	mov	r7, fp
 80096de:	e7af      	b.n	8009640 <ai_platform_network_init+0x40>
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d0dd      	beq.n	80096a0 <ai_platform_network_init+0xa0>
 80096e4:	f1b9 0f00 	cmp.w	r9, #0
 80096e8:	d018      	beq.n	800971c <ai_platform_network_init+0x11c>
 80096ea:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80096f4:	2700      	movs	r7, #0
 80096f6:	4699      	mov	r9, r3
 80096f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80096fa:	eb06 0e07 	add.w	lr, r6, r7
 80096fe:	eb03 0c07 	add.w	ip, r3, r7
 8009702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800970a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800970e:	371c      	adds	r7, #28
 8009710:	45b9      	cmp	r9, r7
 8009712:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8009716:	d1ef      	bne.n	80096f8 <ai_platform_network_init+0xf8>
 8009718:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800971c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800971e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8009722:	4553      	cmp	r3, sl
 8009724:	f8a4 b020 	strh.w	fp, [r4, #32]
 8009728:	d325      	bcc.n	8009776 <ai_platform_network_init+0x176>
 800972a:	f1ba 0f00 	cmp.w	sl, #0
 800972e:	d0be      	beq.n	80096ae <ai_platform_network_init+0xae>
 8009730:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8009734:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009738:	f04f 0c00 	mov.w	ip, #0
 800973c:	eb08 070c 	add.w	r7, r8, ip
 8009740:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009744:	4466      	add	r6, ip
 8009746:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009748:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800974c:	f10c 0c1c 	add.w	ip, ip, #28
 8009750:	45f4      	cmp	ip, lr
 8009752:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009756:	d1f1      	bne.n	800973c <ai_platform_network_init+0x13c>
 8009758:	e7a9      	b.n	80096ae <ai_platform_network_init+0xae>
 800975a:	2212      	movs	r2, #18
 800975c:	2116      	movs	r1, #22
 800975e:	f104 000c 	add.w	r0, r4, #12
 8009762:	f000 fa93 	bl	8009c8c <core_set_error>
 8009766:	2700      	movs	r7, #0
 8009768:	e76a      	b.n	8009640 <ai_platform_network_init+0x40>
 800976a:	2211      	movs	r2, #17
 800976c:	2110      	movs	r1, #16
 800976e:	300c      	adds	r0, #12
 8009770:	f000 fa8c 	bl	8009c8c <core_set_error>
 8009774:	e764      	b.n	8009640 <ai_platform_network_init+0x40>
 8009776:	2213      	movs	r2, #19
 8009778:	2116      	movs	r1, #22
 800977a:	f104 000c 	add.w	r0, r4, #12
 800977e:	f000 fa85 	bl	8009c8c <core_set_error>
 8009782:	2700      	movs	r7, #0
 8009784:	e75c      	b.n	8009640 <ai_platform_network_init+0x40>
 8009786:	2213      	movs	r2, #19
 8009788:	2110      	movs	r1, #16
 800978a:	f104 000c 	add.w	r0, r4, #12
 800978e:	f000 fa7d 	bl	8009c8c <core_set_error>
 8009792:	e755      	b.n	8009640 <ai_platform_network_init+0x40>
 8009794:	a1c00100 	.word	0xa1c00100
 8009798:	a1facade 	.word	0xa1facade

0800979c <ai_platform_network_post_init>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4b16      	ldr	r3, [pc, #88]	@ (80097f8 <ai_platform_network_post_init+0x5c>)
 80097a0:	6802      	ldr	r2, [r0, #0]
 80097a2:	ea02 0103 	and.w	r1, r2, r3
 80097a6:	4393      	bics	r3, r2
 80097a8:	d108      	bne.n	80097bc <ai_platform_network_post_init+0x20>
 80097aa:	6903      	ldr	r3, [r0, #16]
 80097ac:	f013 0502 	ands.w	r5, r3, #2
 80097b0:	4604      	mov	r4, r0
 80097b2:	d005      	beq.n	80097c0 <ai_platform_network_post_init+0x24>
 80097b4:	428a      	cmp	r2, r1
 80097b6:	d00a      	beq.n	80097ce <ai_platform_network_post_init+0x32>
 80097b8:	2001      	movs	r0, #1
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	2000      	movs	r0, #0
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	2210      	movs	r2, #16
 80097c2:	2111      	movs	r1, #17
 80097c4:	300c      	adds	r0, #12
 80097c6:	f000 fa61 	bl	8009c8c <core_set_error>
 80097ca:	4628      	mov	r0, r5
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
 80097ce:	f000 faa1 	bl	8009d14 <ai_layers_post_init_all>
 80097d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0ef      	beq.n	80097b8 <ai_platform_network_post_init+0x1c>
 80097d8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80097da:	e008      	b.n	80097ee <ai_platform_network_post_init+0x52>
 80097dc:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80097e0:	4798      	blx	r3
 80097e2:	692b      	ldr	r3, [r5, #16]
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	d0e7      	beq.n	80097b8 <ai_platform_network_post_init+0x1c>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0e5      	beq.n	80097b8 <ai_platform_network_post_init+0x1c>
 80097ec:	461d      	mov	r5, r3
 80097ee:	4629      	mov	r1, r5
 80097f0:	2000      	movs	r0, #0
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	d1f2      	bne.n	80097dc <ai_platform_network_post_init+0x40>
 80097f6:	e7df      	b.n	80097b8 <ai_platform_network_post_init+0x1c>
 80097f8:	a1c00100 	.word	0xa1c00100

080097fc <ai_platform_network_process>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	4bb5      	ldr	r3, [pc, #724]	@ (8009ad8 <ai_platform_network_process+0x2dc>)
 8009802:	4605      	mov	r5, r0
 8009804:	6800      	ldr	r0, [r0, #0]
 8009806:	b085      	sub	sp, #20
 8009808:	4383      	bics	r3, r0
 800980a:	9202      	str	r2, [sp, #8]
 800980c:	f040 8140 	bne.w	8009a90 <ai_platform_network_process+0x294>
 8009810:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8125 	beq.w	8009a62 <ai_platform_network_process+0x266>
 8009818:	692b      	ldr	r3, [r5, #16]
 800981a:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2700      	movs	r7, #0
 8009824:	2b03      	cmp	r3, #3
 8009826:	61af      	str	r7, [r5, #24]
 8009828:	f040 8137 	bne.w	8009a9a <ai_platform_network_process+0x29e>
 800982c:	2900      	cmp	r1, #0
 800982e:	f000 811e 	beq.w	8009a6e <ai_platform_network_process+0x272>
 8009832:	f1ba 0f00 	cmp.w	sl, #0
 8009836:	f000 811a 	beq.w	8009a6e <ai_platform_network_process+0x272>
 800983a:	f8ba 3000 	ldrh.w	r3, [sl]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 8115 	beq.w	8009a6e <ai_platform_network_process+0x272>
 8009844:	698b      	ldr	r3, [r1, #24]
 8009846:	9503      	str	r5, [sp, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	460e      	mov	r6, r1
 800984e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d072      	beq.n	800993c <ai_platform_network_process+0x140>
 8009856:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800985a:	2c00      	cmp	r4, #0
 800985c:	d06e      	beq.n	800993c <ai_platform_network_process+0x140>
 800985e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009862:	f8d3 9000 	ldr.w	r9, [r3]
 8009866:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800986a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800986e:	f000 81d3 	beq.w	8009c18 <ai_platform_network_process+0x41c>
 8009872:	69a3      	ldr	r3, [r4, #24]
 8009874:	2101      	movs	r1, #1
 8009876:	4630      	mov	r0, r6
 8009878:	685d      	ldr	r5, [r3, #4]
 800987a:	f7ff fc6b 	bl	8009154 <ai_buffer_get_size>
 800987e:	4285      	cmp	r5, r0
 8009880:	f0c0 8116 	bcc.w	8009ab0 <ai_platform_network_process+0x2b4>
 8009884:	68e0      	ldr	r0, [r4, #12]
 8009886:	69b1      	ldr	r1, [r6, #24]
 8009888:	68c2      	ldr	r2, [r0, #12]
 800988a:	68cb      	ldr	r3, [r1, #12]
 800988c:	429a      	cmp	r2, r3
 800988e:	f040 810f 	bne.w	8009ab0 <ai_platform_network_process+0x2b4>
 8009892:	6882      	ldr	r2, [r0, #8]
 8009894:	688b      	ldr	r3, [r1, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	f040 810a 	bne.w	8009ab0 <ai_platform_network_process+0x2b4>
 800989c:	6842      	ldr	r2, [r0, #4]
 800989e:	684b      	ldr	r3, [r1, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	f040 8105 	bne.w	8009ab0 <ai_platform_network_process+0x2b4>
 80098a6:	69a3      	ldr	r3, [r4, #24]
 80098a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098ac:	f001 f9d4 	bl	800ac58 <ai_array_get_data_byte_size>
 80098b0:	4605      	mov	r5, r0
 80098b2:	4620      	mov	r0, r4
 80098b4:	f001 f9e8 	bl	800ac88 <get_tensor_byte_size>
 80098b8:	4285      	cmp	r5, r0
 80098ba:	f0c0 80f9 	bcc.w	8009ab0 <ai_platform_network_process+0x2b4>
 80098be:	69a3      	ldr	r3, [r4, #24]
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	f001 f959 	bl	800ab78 <ai_array_to_buffer_fmt>
 80098c6:	6833      	ldr	r3, [r6, #0]
 80098c8:	4058      	eors	r0, r3
 80098ca:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80098ce:	f040 81a5 	bne.w	8009c1c <ai_platform_network_process+0x420>
 80098d2:	6873      	ldr	r3, [r6, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 819f 	beq.w	8009c18 <ai_platform_network_process+0x41c>
 80098da:	69b3      	ldr	r3, [r6, #24]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 81a5 	beq.w	8009c2e <ai_platform_network_process+0x432>
 80098e4:	9a01      	ldr	r2, [sp, #4]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	bf38      	it	cc
 80098ea:	461a      	movcc	r2, r3
 80098ec:	4620      	mov	r0, r4
 80098ee:	9201      	str	r2, [sp, #4]
 80098f0:	f001 f9ca 	bl	800ac88 <get_tensor_byte_size>
 80098f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80098f8:	69b3      	ldr	r3, [r6, #24]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	fb00 f303 	mul.w	r3, r0, r3
 8009900:	f8c8 300c 	str.w	r3, [r8, #12]
 8009904:	6871      	ldr	r1, [r6, #4]
 8009906:	f8c8 1004 	str.w	r1, [r8, #4]
 800990a:	440b      	add	r3, r1
 800990c:	f849 300b 	str.w	r3, [r9, fp]
 8009910:	69a0      	ldr	r0, [r4, #24]
 8009912:	6803      	ldr	r3, [r0, #0]
 8009914:	009a      	lsls	r2, r3, #2
 8009916:	f107 0701 	add.w	r7, r7, #1
 800991a:	f106 061c 	add.w	r6, r6, #28
 800991e:	f100 80b1 	bmi.w	8009a84 <ai_platform_network_process+0x288>
 8009922:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009926:	1a9b      	subs	r3, r3, r2
 8009928:	4419      	add	r1, r3
 800992a:	6081      	str	r1, [r0, #8]
 800992c:	69a3      	ldr	r3, [r4, #24]
 800992e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009932:	60da      	str	r2, [r3, #12]
 8009934:	f8ba 3000 	ldrh.w	r3, [sl]
 8009938:	42bb      	cmp	r3, r7
 800993a:	d888      	bhi.n	800984e <ai_platform_network_process+0x52>
 800993c:	9d03      	ldr	r5, [sp, #12]
 800993e:	9b02      	ldr	r3, [sp, #8]
 8009940:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 817c 	beq.w	8009c40 <ai_platform_network_process+0x444>
 8009948:	2a01      	cmp	r2, #1
 800994a:	f240 80bd 	bls.w	8009ac8 <ai_platform_network_process+0x2cc>
 800994e:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8009952:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80b6 	beq.w	8009ac8 <ai_platform_network_process+0x2cc>
 800995c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009960:	2700      	movs	r7, #0
 8009962:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 80bd 	beq.w	8009ae6 <ai_platform_network_process+0x2ea>
 800996c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8009970:	2e00      	cmp	r6, #0
 8009972:	f000 80b8 	beq.w	8009ae6 <ai_platform_network_process+0x2ea>
 8009976:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800997a:	681c      	ldr	r4, [r3, #0]
 800997c:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8009980:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8009984:	f000 8160 	beq.w	8009c48 <ai_platform_network_process+0x44c>
 8009988:	69b3      	ldr	r3, [r6, #24]
 800998a:	2101      	movs	r1, #1
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	9302      	str	r3, [sp, #8]
 8009990:	4658      	mov	r0, fp
 8009992:	f7ff fbdf 	bl	8009154 <ai_buffer_get_size>
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	4283      	cmp	r3, r0
 800999a:	f0c0 8095 	bcc.w	8009ac8 <ai_platform_network_process+0x2cc>
 800999e:	68f0      	ldr	r0, [r6, #12]
 80099a0:	f8db 1018 	ldr.w	r1, [fp, #24]
 80099a4:	68c2      	ldr	r2, [r0, #12]
 80099a6:	68cb      	ldr	r3, [r1, #12]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	f040 808d 	bne.w	8009ac8 <ai_platform_network_process+0x2cc>
 80099ae:	6882      	ldr	r2, [r0, #8]
 80099b0:	688b      	ldr	r3, [r1, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	f040 8088 	bne.w	8009ac8 <ai_platform_network_process+0x2cc>
 80099b8:	6842      	ldr	r2, [r0, #4]
 80099ba:	684b      	ldr	r3, [r1, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	f040 8083 	bne.w	8009ac8 <ai_platform_network_process+0x2cc>
 80099c2:	69b3      	ldr	r3, [r6, #24]
 80099c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099c8:	f001 f946 	bl	800ac58 <ai_array_get_data_byte_size>
 80099cc:	9002      	str	r0, [sp, #8]
 80099ce:	4630      	mov	r0, r6
 80099d0:	f001 f95a 	bl	800ac88 <get_tensor_byte_size>
 80099d4:	9b02      	ldr	r3, [sp, #8]
 80099d6:	4283      	cmp	r3, r0
 80099d8:	d376      	bcc.n	8009ac8 <ai_platform_network_process+0x2cc>
 80099da:	69b3      	ldr	r3, [r6, #24]
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	f001 f8cb 	bl	800ab78 <ai_array_to_buffer_fmt>
 80099e2:	f8db 3000 	ldr.w	r3, [fp]
 80099e6:	4058      	eors	r0, r3
 80099e8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80099ec:	f040 8134 	bne.w	8009c58 <ai_platform_network_process+0x45c>
 80099f0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 8127 	beq.w	8009c48 <ai_platform_network_process+0x44c>
 80099fa:	f8db 3018 	ldr.w	r3, [fp, #24]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8133 	beq.w	8009c6c <ai_platform_network_process+0x470>
 8009a06:	9a01      	ldr	r2, [sp, #4]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	bf38      	it	cc
 8009a0c:	461a      	movcc	r2, r3
 8009a0e:	4630      	mov	r0, r6
 8009a10:	9201      	str	r2, [sp, #4]
 8009a12:	f001 f939 	bl	800ac88 <get_tensor_byte_size>
 8009a16:	f8c9 0008 	str.w	r0, [r9, #8]
 8009a1a:	f8db 3018 	ldr.w	r3, [fp, #24]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	fb00 f303 	mul.w	r3, r0, r3
 8009a24:	f8c9 300c 	str.w	r3, [r9, #12]
 8009a28:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009a2c:	f8c9 1004 	str.w	r1, [r9, #4]
 8009a30:	440b      	add	r3, r1
 8009a32:	f844 300a 	str.w	r3, [r4, sl]
 8009a36:	69b0      	ldr	r0, [r6, #24]
 8009a38:	6803      	ldr	r3, [r0, #0]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	f107 0701 	add.w	r7, r7, #1
 8009a40:	f10b 0b1c 	add.w	fp, fp, #28
 8009a44:	d44a      	bmi.n	8009adc <ai_platform_network_process+0x2e0>
 8009a46:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009a4a:	1a9b      	subs	r3, r3, r2
 8009a4c:	4419      	add	r1, r3
 8009a4e:	6081      	str	r1, [r0, #8]
 8009a50:	69b3      	ldr	r3, [r6, #24]
 8009a52:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009a56:	60da      	str	r2, [r3, #12]
 8009a58:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009a5c:	42bb      	cmp	r3, r7
 8009a5e:	d880      	bhi.n	8009962 <ai_platform_network_process+0x166>
 8009a60:	e041      	b.n	8009ae6 <ai_platform_network_process+0x2ea>
 8009a62:	692a      	ldr	r2, [r5, #16]
 8009a64:	61ab      	str	r3, [r5, #24]
 8009a66:	f002 0203 	and.w	r2, r2, #3
 8009a6a:	2a03      	cmp	r2, #3
 8009a6c:	d115      	bne.n	8009a9a <ai_platform_network_process+0x29e>
 8009a6e:	2217      	movs	r2, #23
 8009a70:	2112      	movs	r1, #18
 8009a72:	f105 000c 	add.w	r0, r5, #12
 8009a76:	f000 f909 	bl	8009c8c <core_set_error>
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	b005      	add	sp, #20
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	f8ba 3000 	ldrh.w	r3, [sl]
 8009a88:	429f      	cmp	r7, r3
 8009a8a:	f4ff aee0 	bcc.w	800984e <ai_platform_network_process+0x52>
 8009a8e:	e755      	b.n	800993c <ai_platform_network_process+0x140>
 8009a90:	2400      	movs	r4, #0
 8009a92:	4620      	mov	r0, r4
 8009a94:	b005      	add	sp, #20
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	2230      	movs	r2, #48	@ 0x30
 8009a9c:	2111      	movs	r1, #17
 8009a9e:	f105 000c 	add.w	r0, r5, #12
 8009aa2:	f000 f8f3 	bl	8009c8c <core_set_error>
 8009aa6:	2400      	movs	r4, #0
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	b005      	add	sp, #20
 8009aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	9d03      	ldr	r5, [sp, #12]
 8009ab2:	2218      	movs	r2, #24
 8009ab4:	2112      	movs	r1, #18
 8009ab6:	f105 000c 	add.w	r0, r5, #12
 8009aba:	f000 f8e7 	bl	8009c8c <core_set_error>
 8009abe:	2400      	movs	r4, #0
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	b005      	add	sp, #20
 8009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac8:	2218      	movs	r2, #24
 8009aca:	2113      	movs	r1, #19
 8009acc:	f105 000c 	add.w	r0, r5, #12
 8009ad0:	f000 f8dc 	bl	8009c8c <core_set_error>
 8009ad4:	2400      	movs	r4, #0
 8009ad6:	e7d1      	b.n	8009a7c <ai_platform_network_process+0x280>
 8009ad8:	a1c00100 	.word	0xa1c00100
 8009adc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009ae0:	429f      	cmp	r7, r3
 8009ae2:	f4ff af3e 	bcc.w	8009962 <ai_platform_network_process+0x166>
 8009ae6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009aea:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8009aec:	832b      	strh	r3, [r5, #24]
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	f040 808c 	bne.w	8009c0c <ai_platform_network_process+0x410>
 8009af4:	4616      	mov	r6, r2
 8009af6:	4617      	mov	r7, r2
 8009af8:	8b6c      	ldrh	r4, [r5, #26]
 8009afa:	429c      	cmp	r4, r3
 8009afc:	bf38      	it	cc
 8009afe:	46ab      	movcc	fp, r5
 8009b00:	d2bc      	bcs.n	8009a7c <ai_platform_network_process+0x280>
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	d030      	beq.n	8009b68 <ai_platform_network_process+0x36c>
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	e014      	b.n	8009b36 <ai_platform_network_process+0x33a>
 8009b0c:	6882      	ldr	r2, [r0, #8]
 8009b0e:	68c5      	ldr	r5, [r0, #12]
 8009b10:	6863      	ldr	r3, [r4, #4]
 8009b12:	1b52      	subs	r2, r2, r5
 8009b14:	4413      	add	r3, r2
 8009b16:	6083      	str	r3, [r0, #8]
 8009b18:	698b      	ldr	r3, [r1, #24]
 8009b1a:	6862      	ldr	r2, [r4, #4]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009b22:	f859 200a 	ldr.w	r2, [r9, sl]
 8009b26:	440b      	add	r3, r1
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bf24      	itt	cs
 8009b2c:	68e3      	ldrcs	r3, [r4, #12]
 8009b2e:	1ad3      	subcs	r3, r2, r3
 8009b30:	6063      	str	r3, [r4, #4]
 8009b32:	f108 0801 	add.w	r8, r8, #1
 8009b36:	8833      	ldrh	r3, [r6, #0]
 8009b38:	4543      	cmp	r3, r8
 8009b3a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009b3e:	d913      	bls.n	8009b68 <ai_platform_network_process+0x36c>
 8009b40:	6873      	ldr	r3, [r6, #4]
 8009b42:	b18b      	cbz	r3, 8009b68 <ai_platform_network_process+0x36c>
 8009b44:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009b48:	b171      	cbz	r1, 8009b68 <ai_platform_network_process+0x36c>
 8009b4a:	6988      	ldr	r0, [r1, #24]
 8009b4c:	68b2      	ldr	r2, [r6, #8]
 8009b4e:	6803      	ldr	r3, [r0, #0]
 8009b50:	f8d2 9000 	ldr.w	r9, [r2]
 8009b54:	009d      	lsls	r5, r3, #2
 8009b56:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009b5a:	d5d7      	bpl.n	8009b0c <ai_platform_network_process+0x310>
 8009b5c:	6881      	ldr	r1, [r0, #8]
 8009b5e:	68a2      	ldr	r2, [r4, #8]
 8009b60:	6860      	ldr	r0, [r4, #4]
 8009b62:	f000 ff67 	bl	800aa34 <st_int8_copy>
 8009b66:	e7da      	b.n	8009b1e <ai_platform_network_process+0x322>
 8009b68:	4658      	mov	r0, fp
 8009b6a:	f000 f8e7 	bl	8009d3c <ai_layers_forward_all>
 8009b6e:	2f00      	cmp	r7, #0
 8009b70:	d03d      	beq.n	8009bee <ai_platform_network_process+0x3f2>
 8009b72:	2400      	movs	r4, #0
 8009b74:	e016      	b.n	8009ba4 <ai_platform_network_process+0x3a8>
 8009b76:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009b7a:	f859 100a 	ldr.w	r1, [r9, sl]
 8009b7e:	4413      	add	r3, r2
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf24      	itt	cs
 8009b84:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009b88:	1acb      	subcs	r3, r1, r3
 8009b8a:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b8e:	6981      	ldr	r1, [r0, #24]
 8009b90:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009b94:	1b52      	subs	r2, r2, r5
 8009b96:	4413      	add	r3, r2
 8009b98:	608b      	str	r3, [r1, #8]
 8009b9a:	6983      	ldr	r3, [r0, #24]
 8009b9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	3401      	adds	r4, #1
 8009ba4:	883b      	ldrh	r3, [r7, #0]
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	d921      	bls.n	8009bee <ai_platform_network_process+0x3f2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	b1fb      	cbz	r3, 8009bee <ai_platform_network_process+0x3f2>
 8009bae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009bb2:	b1e0      	cbz	r0, 8009bee <ai_platform_network_process+0x3f2>
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	6983      	ldr	r3, [r0, #24]
 8009bb8:	f8d2 9000 	ldr.w	r9, [r2]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	0092      	lsls	r2, r2, #2
 8009bc0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009bc4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009bc8:	d5d5      	bpl.n	8009b76 <ai_platform_network_process+0x37a>
 8009bca:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8009bce:	6898      	ldr	r0, [r3, #8]
 8009bd0:	f000 ff30 	bl	800aa34 <st_int8_copy>
 8009bd4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009bd8:	f859 200a 	ldr.w	r2, [r9, sl]
 8009bdc:	440b      	add	r3, r1
 8009bde:	4293      	cmp	r3, r2
 8009be0:	bf24      	itt	cs
 8009be2:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009be6:	1ad3      	subcs	r3, r2, r3
 8009be8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009bec:	e7d9      	b.n	8009ba2 <ai_platform_network_process+0x3a6>
 8009bee:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8009bf2:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	b2a4      	uxth	r4, r4
 8009bfa:	42a3      	cmp	r3, r4
 8009bfc:	f8ab 401a 	strh.w	r4, [fp, #26]
 8009c00:	f63f af7f 	bhi.w	8009b02 <ai_platform_network_process+0x306>
 8009c04:	4620      	mov	r0, r4
 8009c06:	b005      	add	sp, #20
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0c:	2a01      	cmp	r2, #1
 8009c0e:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8009c10:	d02a      	beq.n	8009c68 <ai_platform_network_process+0x46c>
 8009c12:	f106 070c 	add.w	r7, r6, #12
 8009c16:	e76f      	b.n	8009af8 <ai_platform_network_process+0x2fc>
 8009c18:	9d03      	ldr	r5, [sp, #12]
 8009c1a:	e728      	b.n	8009a6e <ai_platform_network_process+0x272>
 8009c1c:	9d03      	ldr	r5, [sp, #12]
 8009c1e:	2219      	movs	r2, #25
 8009c20:	2112      	movs	r1, #18
 8009c22:	f105 000c 	add.w	r0, r5, #12
 8009c26:	f000 f831 	bl	8009c8c <core_set_error>
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	e726      	b.n	8009a7c <ai_platform_network_process+0x280>
 8009c2e:	9d03      	ldr	r5, [sp, #12]
 8009c30:	4604      	mov	r4, r0
 8009c32:	2221      	movs	r2, #33	@ 0x21
 8009c34:	2112      	movs	r1, #18
 8009c36:	f105 000c 	add.w	r0, r5, #12
 8009c3a:	f000 f827 	bl	8009c8c <core_set_error>
 8009c3e:	e71d      	b.n	8009a7c <ai_platform_network_process+0x280>
 8009c40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009c44:	832b      	strh	r3, [r5, #24]
 8009c46:	e752      	b.n	8009aee <ai_platform_network_process+0x2f2>
 8009c48:	2217      	movs	r2, #23
 8009c4a:	2113      	movs	r1, #19
 8009c4c:	f105 000c 	add.w	r0, r5, #12
 8009c50:	f000 f81c 	bl	8009c8c <core_set_error>
 8009c54:	2400      	movs	r4, #0
 8009c56:	e711      	b.n	8009a7c <ai_platform_network_process+0x280>
 8009c58:	2219      	movs	r2, #25
 8009c5a:	2113      	movs	r1, #19
 8009c5c:	f105 000c 	add.w	r0, r5, #12
 8009c60:	f000 f814 	bl	8009c8c <core_set_error>
 8009c64:	2400      	movs	r4, #0
 8009c66:	e709      	b.n	8009a7c <ai_platform_network_process+0x280>
 8009c68:	2700      	movs	r7, #0
 8009c6a:	e745      	b.n	8009af8 <ai_platform_network_process+0x2fc>
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	2221      	movs	r2, #33	@ 0x21
 8009c70:	2113      	movs	r1, #19
 8009c72:	f105 000c 	add.w	r0, r5, #12
 8009c76:	f000 f809 	bl	8009c8c <core_set_error>
 8009c7a:	e6ff      	b.n	8009a7c <ai_platform_network_process+0x280>

08009c7c <core_init>:
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	4770      	bx	lr

08009c80 <core_get_error>:
 8009c80:	4603      	mov	r3, r0
 8009c82:	2200      	movs	r2, #0
 8009c84:	6800      	ldr	r0, [r0, #0]
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop

08009c8c <core_set_error>:
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	7800      	ldrb	r0, [r0, #0]
 8009c90:	b108      	cbz	r0, 8009c96 <core_set_error+0xa>
 8009c92:	2000      	movs	r0, #0
 8009c94:	4770      	bx	lr
 8009c96:	7019      	strb	r1, [r3, #0]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	f362 211f 	bfi	r1, r2, #8, #24
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	6019      	str	r1, [r3, #0]
 8009ca2:	4770      	bx	lr

08009ca4 <ai_check_custom_types>:
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	4b13      	ldr	r3, [pc, #76]	@ (8009cf4 <ai_check_custom_types+0x50>)
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	b118      	cbz	r0, 8009cb4 <ai_check_custom_types+0x10>
 8009cac:	7803      	ldrb	r3, [r0, #0]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d002      	beq.n	8009cb8 <ai_check_custom_types+0x14>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	b002      	add	sp, #8
 8009cb6:	4770      	bx	lr
 8009cb8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d004      	beq.n	8009cca <ai_check_custom_types+0x26>
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	f080 0001 	eor.w	r0, r0, #1
 8009cc6:	b002      	add	sp, #8
 8009cc8:	4770      	bx	lr
 8009cca:	7842      	ldrb	r2, [r0, #1]
 8009ccc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	f100 0001 	add.w	r0, r0, #1
 8009cd6:	d1f3      	bne.n	8009cc0 <ai_check_custom_types+0x1c>
 8009cd8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009cdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d1ed      	bne.n	8009cc0 <ai_check_custom_types+0x1c>
 8009ce4:	7842      	ldrb	r2, [r0, #1]
 8009ce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d1e8      	bne.n	8009cc0 <ai_check_custom_types+0x1c>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e7e7      	b.n	8009cc2 <ai_check_custom_types+0x1e>
 8009cf2:	bf00      	nop
 8009cf4:	84048403 	.word	0x84048403

08009cf8 <ai_layers_init_all>:
 8009cf8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	b143      	cbz	r3, 8009d10 <ai_layers_init_all+0x18>
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	60d8      	str	r0, [r3, #12]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	f101 0101 	add.w	r1, r1, #1
 8009d08:	d002      	beq.n	8009d10 <ai_layers_init_all+0x18>
 8009d0a:	b10a      	cbz	r2, 8009d10 <ai_layers_init_all+0x18>
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	e7f5      	b.n	8009cfc <ai_layers_init_all+0x4>
 8009d10:	4608      	mov	r0, r1
 8009d12:	4770      	bx	lr

08009d14 <ai_layers_post_init_all>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009d18:	2500      	movs	r5, #0
 8009d1a:	b16c      	cbz	r4, 8009d38 <ai_layers_post_init_all+0x24>
 8009d1c:	6863      	ldr	r3, [r4, #4]
 8009d1e:	07db      	lsls	r3, r3, #31
 8009d20:	d504      	bpl.n	8009d2c <ai_layers_post_init_all+0x18>
 8009d22:	6a23      	ldr	r3, [r4, #32]
 8009d24:	4620      	mov	r0, r4
 8009d26:	b10b      	cbz	r3, 8009d2c <ai_layers_post_init_all+0x18>
 8009d28:	4798      	blx	r3
 8009d2a:	3501      	adds	r5, #1
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	d002      	beq.n	8009d38 <ai_layers_post_init_all+0x24>
 8009d32:	b10b      	cbz	r3, 8009d38 <ai_layers_post_init_all+0x24>
 8009d34:	461c      	mov	r4, r3
 8009d36:	e7f0      	b.n	8009d1a <ai_layers_post_init_all+0x6>
 8009d38:	4628      	mov	r0, r5
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}

08009d3c <ai_layers_forward_all>:
 8009d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d40:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8009d44:	4604      	mov	r4, r0
 8009d46:	f1b8 0f00 	cmp.w	r8, #0
 8009d4a:	d02b      	beq.n	8009da4 <ai_layers_forward_all+0x68>
 8009d4c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8009d4e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8009d50:	b321      	cbz	r1, 8009d9c <ai_layers_forward_all+0x60>
 8009d52:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8009d54:	2001      	movs	r0, #1
 8009d56:	47c0      	blx	r8
 8009d58:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8009d5a:	b1fe      	cbz	r6, 8009d9c <ai_layers_forward_all+0x60>
 8009d5c:	2700      	movs	r7, #0
 8009d5e:	4631      	mov	r1, r6
 8009d60:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009d62:	2002      	movs	r0, #2
 8009d64:	47c0      	blx	r8
 8009d66:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8009d68:	4628      	mov	r0, r5
 8009d6a:	696b      	ldr	r3, [r5, #20]
 8009d6c:	4798      	blx	r3
 8009d6e:	692e      	ldr	r6, [r5, #16]
 8009d70:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009d72:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8009d74:	42b5      	cmp	r5, r6
 8009d76:	f04f 0003 	mov.w	r0, #3
 8009d7a:	d007      	beq.n	8009d8c <ai_layers_forward_all+0x50>
 8009d7c:	47c0      	blx	r8
 8009d7e:	3701      	adds	r7, #1
 8009d80:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d1eb      	bne.n	8009d5e <ai_layers_forward_all+0x22>
 8009d86:	4638      	mov	r0, r7
 8009d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8c:	2003      	movs	r0, #3
 8009d8e:	47c0      	blx	r8
 8009d90:	2300      	movs	r3, #0
 8009d92:	3701      	adds	r7, #1
 8009d94:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009d96:	4638      	mov	r0, r7
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	2700      	movs	r7, #0
 8009d9e:	4638      	mov	r0, r7
 8009da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8009da6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	d0f7      	beq.n	8009d9c <ai_layers_forward_all+0x60>
 8009dac:	4647      	mov	r7, r8
 8009dae:	696b      	ldr	r3, [r5, #20]
 8009db0:	4628      	mov	r0, r5
 8009db2:	4798      	blx	r3
 8009db4:	462b      	mov	r3, r5
 8009db6:	692d      	ldr	r5, [r5, #16]
 8009db8:	429d      	cmp	r5, r3
 8009dba:	d004      	beq.n	8009dc6 <ai_layers_forward_all+0x8a>
 8009dbc:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8009dbe:	3701      	adds	r7, #1
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	d1f4      	bne.n	8009dae <ai_layers_forward_all+0x72>
 8009dc4:	e7df      	b.n	8009d86 <ai_layers_forward_all+0x4a>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009dca:	3701      	adds	r7, #1
 8009dcc:	e7db      	b.n	8009d86 <ai_layers_forward_all+0x4a>
 8009dce:	bf00      	nop

08009dd0 <forward_dense>:
 8009dd0:	6982      	ldr	r2, [r0, #24]
 8009dd2:	8813      	ldrh	r3, [r2, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d043      	beq.n	8009e60 <forward_dense+0x90>
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	6855      	ldr	r5, [r2, #4]
 8009dde:	6869      	ldr	r1, [r5, #4]
 8009de0:	b08e      	sub	sp, #56	@ 0x38
 8009de2:	b101      	cbz	r1, 8009de6 <forward_dense+0x16>
 8009de4:	6809      	ldr	r1, [r1, #0]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d069      	beq.n	8009ebe <forward_dense+0xee>
 8009dea:	692a      	ldr	r2, [r5, #16]
 8009dec:	b102      	cbz	r2, 8009df0 <forward_dense+0x20>
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d061      	beq.n	8009eb8 <forward_dense+0xe8>
 8009df4:	69ec      	ldr	r4, [r5, #28]
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	d057      	beq.n	8009eaa <forward_dense+0xda>
 8009dfa:	8b2e      	ldrh	r6, [r5, #24]
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	2e01      	cmp	r6, #1
 8009e00:	d955      	bls.n	8009eae <forward_dense+0xde>
 8009e02:	6864      	ldr	r4, [r4, #4]
 8009e04:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8009e08:	68cf      	ldr	r7, [r1, #12]
 8009e0a:	68d0      	ldr	r0, [r2, #12]
 8009e0c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8009e10:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8009e14:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8009e18:	f8d9 0000 	ldr.w	r0, [r9]
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	fb06 f807 	mul.w	r8, r6, r7
 8009e22:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8009e26:	d044      	beq.n	8009eb2 <forward_dense+0xe2>
 8009e28:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8009e2a:	b11d      	cbz	r5, 8009e34 <forward_dense+0x64>
 8009e2c:	682d      	ldr	r5, [r5, #0]
 8009e2e:	b10d      	cbz	r5, 8009e34 <forward_dense+0x64>
 8009e30:	69ab      	ldr	r3, [r5, #24]
 8009e32:	689d      	ldr	r5, [r3, #8]
 8009e34:	6992      	ldr	r2, [r2, #24]
 8009e36:	698b      	ldr	r3, [r1, #24]
 8009e38:	6890      	ldr	r0, [r2, #8]
 8009e3a:	6899      	ldr	r1, [r3, #8]
 8009e3c:	b10c      	cbz	r4, 8009e42 <forward_dense+0x72>
 8009e3e:	69a3      	ldr	r3, [r4, #24]
 8009e40:	689c      	ldr	r4, [r3, #8]
 8009e42:	4b20      	ldr	r3, [pc, #128]	@ (8009ec4 <forward_dense+0xf4>)
 8009e44:	459c      	cmp	ip, r3
 8009e46:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8009e4a:	d023      	beq.n	8009e94 <forward_dense+0xc4>
 8009e4c:	4e1e      	ldr	r6, [pc, #120]	@ (8009ec8 <forward_dense+0xf8>)
 8009e4e:	45b4      	cmp	ip, r6
 8009e50:	d015      	beq.n	8009e7e <forward_dense+0xae>
 8009e52:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8009e56:	459c      	cmp	ip, r3
 8009e58:	d004      	beq.n	8009e64 <forward_dense+0x94>
 8009e5a:	b00e      	add	sp, #56	@ 0x38
 8009e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	deff      	udf	#255	@ 0xff
 8009e64:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8009e68:	a807      	add	r0, sp, #28
 8009e6a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8009e6e:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8009e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e74:	f000 f9f8 	bl	800a268 <forward_lite_dense_if32of32wf32>
 8009e78:	b00e      	add	sp, #56	@ 0x38
 8009e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7e:	e9cd e803 	strd	lr, r8, [sp, #12]
 8009e82:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8009e86:	9500      	str	r5, [sp, #0]
 8009e88:	464b      	mov	r3, r9
 8009e8a:	f000 fb47 	bl	800a51c <forward_lite_dense_if32of32wf32_lut4>
 8009e8e:	b00e      	add	sp, #56	@ 0x38
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	e9cd e803 	strd	lr, r8, [sp, #12]
 8009e98:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8009e9c:	9500      	str	r5, [sp, #0]
 8009e9e:	464b      	mov	r3, r9
 8009ea0:	f000 fc64 	bl	800a76c <forward_lite_dense_if32of32wf32_lut8>
 8009ea4:	b00e      	add	sp, #56	@ 0x38
 8009ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eaa:	4620      	mov	r0, r4
 8009eac:	e7aa      	b.n	8009e04 <forward_dense+0x34>
 8009eae:	2400      	movs	r4, #0
 8009eb0:	e7a8      	b.n	8009e04 <forward_dense+0x34>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	deff      	udf	#255	@ 0xff
 8009eb8:	2300      	movs	r3, #0
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	deff      	udf	#255	@ 0xff
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	deff      	udf	#255	@ 0xff
 8009ec4:	00d01040 	.word	0x00d01040
 8009ec8:	00f01040 	.word	0x00f01040

08009ecc <forward_relu>:
 8009ecc:	6982      	ldr	r2, [r0, #24]
 8009ece:	8813      	ldrh	r3, [r2, #0]
 8009ed0:	b323      	cbz	r3, 8009f1c <forward_relu+0x50>
 8009ed2:	6851      	ldr	r1, [r2, #4]
 8009ed4:	684a      	ldr	r2, [r1, #4]
 8009ed6:	b102      	cbz	r2, 8009eda <forward_relu+0xe>
 8009ed8:	6812      	ldr	r2, [r2, #0]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	f000 808d 	beq.w	8009ffa <forward_relu+0x12e>
 8009ee0:	b470      	push	{r4, r5, r6}
 8009ee2:	6909      	ldr	r1, [r1, #16]
 8009ee4:	b101      	cbz	r1, 8009ee8 <forward_relu+0x1c>
 8009ee6:	6809      	ldr	r1, [r1, #0]
 8009ee8:	69c6      	ldr	r6, [r0, #28]
 8009eea:	b1ce      	cbz	r6, 8009f20 <forward_relu+0x54>
 8009eec:	6873      	ldr	r3, [r6, #4]
 8009eee:	6988      	ldr	r0, [r1, #24]
 8009ef0:	6991      	ldr	r1, [r2, #24]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d044      	beq.n	8009f80 <forward_relu+0xb4>
 8009ef6:	6893      	ldr	r3, [r2, #8]
 8009ef8:	6880      	ldr	r0, [r0, #8]
 8009efa:	6889      	ldr	r1, [r1, #8]
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	d073      	beq.n	8009fe8 <forward_relu+0x11c>
 8009f00:	68d5      	ldr	r5, [r2, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f08:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009f0c:	429d      	cmp	r5, r3
 8009f0e:	fb04 f202 	mul.w	r2, r4, r2
 8009f12:	d1f9      	bne.n	8009f08 <forward_relu+0x3c>
 8009f14:	68b3      	ldr	r3, [r6, #8]
 8009f16:	bc70      	pop	{r4, r5, r6}
 8009f18:	f000 b928 	b.w	800a16c <forward_lite_nl_relu_generic_if32of32_kernel>
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	deff      	udf	#255	@ 0xff
 8009f20:	6893      	ldr	r3, [r2, #8]
 8009f22:	6989      	ldr	r1, [r1, #24]
 8009f24:	6990      	ldr	r0, [r2, #24]
 8009f26:	6889      	ldr	r1, [r1, #8]
 8009f28:	6884      	ldr	r4, [r0, #8]
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	d05e      	beq.n	8009fec <forward_relu+0x120>
 8009f2e:	68d5      	ldr	r5, [r2, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f36:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	fb00 f202 	mul.w	r2, r0, r2
 8009f40:	d1f9      	bne.n	8009f36 <forward_relu+0x6a>
 8009f42:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8009f46:	3b01      	subs	r3, #1
 8009f48:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009f4c:	4294      	cmp	r4, r2
 8009f4e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009f52:	d813      	bhi.n	8009f7c <forward_relu+0xb0>
 8009f54:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a000 <forward_relu+0x134>
 8009f58:	3204      	adds	r2, #4
 8009f5a:	3104      	adds	r1, #4
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	ed72 7a01 	vldmdb	r2!, {s15}
 8009f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6a:	f1a3 0308 	sub.w	r3, r3, #8
 8009f6e:	bfb8      	it	lt
 8009f70:	eef0 7a47 	vmovlt.f32	s15, s14
 8009f74:	429c      	cmp	r4, r3
 8009f76:	ed61 7a01 	vstmdb	r1!, {s15}
 8009f7a:	d9ef      	bls.n	8009f5c <forward_relu+0x90>
 8009f7c:	bc70      	pop	{r4, r5, r6}
 8009f7e:	4770      	bx	lr
 8009f80:	688c      	ldr	r4, [r1, #8]
 8009f82:	6891      	ldr	r1, [r2, #8]
 8009f84:	6880      	ldr	r0, [r0, #8]
 8009f86:	0a09      	lsrs	r1, r1, #8
 8009f88:	d032      	beq.n	8009ff0 <forward_relu+0x124>
 8009f8a:	68d5      	ldr	r5, [r2, #12]
 8009f8c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8009f90:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009f94:	4295      	cmp	r5, r2
 8009f96:	fb01 f303 	mul.w	r3, r1, r3
 8009f9a:	d1f9      	bne.n	8009f90 <forward_relu+0xc4>
 8009f9c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8009fa0:	3a01      	subs	r2, #1
 8009fa2:	68b1      	ldr	r1, [r6, #8]
 8009fa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	ed91 7a00 	vldr	s14, [r1]
 8009fae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009fb2:	d8e3      	bhi.n	8009f7c <forward_relu+0xb0>
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	1d02      	adds	r2, r0, #4
 8009fba:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc6:	f1a3 0104 	sub.w	r1, r3, #4
 8009fca:	f1a3 0308 	sub.w	r3, r3, #8
 8009fce:	d405      	bmi.n	8009fdc <forward_relu+0x110>
 8009fd0:	429c      	cmp	r4, r3
 8009fd2:	f842 5d04 	str.w	r5, [r2, #-4]!
 8009fd6:	d8d1      	bhi.n	8009f7c <forward_relu+0xb0>
 8009fd8:	460b      	mov	r3, r1
 8009fda:	e7ee      	b.n	8009fba <forward_relu+0xee>
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	ed62 7a01 	vstmdb	r2!, {s15}
 8009fe2:	d8cb      	bhi.n	8009f7c <forward_relu+0xb0>
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	e7e8      	b.n	8009fba <forward_relu+0xee>
 8009fe8:	2201      	movs	r2, #1
 8009fea:	e793      	b.n	8009f14 <forward_relu+0x48>
 8009fec:	4622      	mov	r2, r4
 8009fee:	e7b1      	b.n	8009f54 <forward_relu+0x88>
 8009ff0:	68b2      	ldr	r2, [r6, #8]
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	ed92 7a00 	vldr	s14, [r2]
 8009ff8:	e7dc      	b.n	8009fb4 <forward_relu+0xe8>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	deff      	udf	#255	@ 0xff
 800a000:	00000000 	.word	0x00000000

0800a004 <forward_sm>:
 800a004:	6982      	ldr	r2, [r0, #24]
 800a006:	8813      	ldrh	r3, [r2, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d036      	beq.n	800a07a <forward_sm+0x76>
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	6852      	ldr	r2, [r2, #4]
 800a010:	6855      	ldr	r5, [r2, #4]
 800a012:	b082      	sub	sp, #8
 800a014:	b105      	cbz	r5, 800a018 <forward_sm+0x14>
 800a016:	682d      	ldr	r5, [r5, #0]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d032      	beq.n	800a082 <forward_sm+0x7e>
 800a01c:	6916      	ldr	r6, [r2, #16]
 800a01e:	b106      	cbz	r6, 800a022 <forward_sm+0x1e>
 800a020:	6836      	ldr	r6, [r6, #0]
 800a022:	68ab      	ldr	r3, [r5, #8]
 800a024:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 800a028:	d029      	beq.n	800a07e <forward_sm+0x7a>
 800a02a:	68ec      	ldr	r4, [r5, #12]
 800a02c:	2201      	movs	r2, #1
 800a02e:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800a032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a036:	429c      	cmp	r4, r3
 800a038:	fb01 f202 	mul.w	r2, r1, r2
 800a03c:	d1f9      	bne.n	800a032 <forward_sm+0x2e>
 800a03e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800a042:	69b0      	ldr	r0, [r6, #24]
 800a044:	4563      	cmp	r3, ip
 800a046:	bfb8      	it	lt
 800a048:	68e9      	ldrlt	r1, [r5, #12]
 800a04a:	6880      	ldr	r0, [r0, #8]
 800a04c:	bfb8      	it	lt
 800a04e:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 800a052:	6929      	ldr	r1, [r5, #16]
 800a054:	bfa8      	it	ge
 800a056:	2401      	movge	r4, #1
 800a058:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800a05c:	bfbc      	itt	lt
 800a05e:	6969      	ldrlt	r1, [r5, #20]
 800a060:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 800a064:	69a9      	ldr	r1, [r5, #24]
 800a066:	bfb8      	it	lt
 800a068:	089b      	lsrlt	r3, r3, #2
 800a06a:	6889      	ldr	r1, [r1, #8]
 800a06c:	9400      	str	r4, [sp, #0]
 800a06e:	bfa8      	it	ge
 800a070:	2300      	movge	r3, #0
 800a072:	f000 fca9 	bl	800a9c8 <forward_lite_nl_softmax_if32of32>
 800a076:	b002      	add	sp, #8
 800a078:	bd70      	pop	{r4, r5, r6, pc}
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	deff      	udf	#255	@ 0xff
 800a07e:	2201      	movs	r2, #1
 800a080:	e7dd      	b.n	800a03e <forward_sm+0x3a>
 800a082:	2300      	movs	r3, #0
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	deff      	udf	#255	@ 0xff

0800a088 <forward_lite_nl_softmax_if32of32_kernel>:
 800a088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a08c:	2a01      	cmp	r2, #1
 800a08e:	ed2d 8b02 	vpush	{d8}
 800a092:	4691      	mov	r9, r2
 800a094:	ed91 8a00 	vldr	s16, [r1]
 800a098:	4698      	mov	r8, r3
 800a09a:	d960      	bls.n	800a15e <forward_lite_nl_softmax_if32of32_kernel+0xd6>
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d14a      	bne.n	800a136 <forward_lite_nl_softmax_if32of32_kernel+0xae>
 800a0a0:	1d0c      	adds	r4, r1, #4
 800a0a2:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800a0a6:	ecf4 7a01 	vldmia	r4!, {s15}
 800a0aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b2:	bfb8      	it	lt
 800a0b4:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	d1f4      	bne.n	800a0a6 <forward_lite_nl_softmax_if32of32_kernel+0x1e>
 800a0bc:	f04f 0a04 	mov.w	sl, #4
 800a0c0:	eddf 8a29 	vldr	s17, [pc, #164]	@ 800a168 <forward_lite_nl_softmax_if32of32_kernel+0xe0>
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	2500      	movs	r5, #0
 800a0cc:	ed94 0a00 	vldr	s0, [r4]
 800a0d0:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a0d4:	f001 fd7c 	bl	800bbd0 <expf>
 800a0d8:	3501      	adds	r5, #1
 800a0da:	45a9      	cmp	r9, r5
 800a0dc:	ed86 0a00 	vstr	s0, [r6]
 800a0e0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a0e4:	4454      	add	r4, sl
 800a0e6:	4456      	add	r6, sl
 800a0e8:	d8f0      	bhi.n	800a0cc <forward_lite_nl_softmax_if32of32_kernel+0x44>
 800a0ea:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f2:	d011      	beq.n	800a118 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800a0f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a0f8:	f1b8 0f01 	cmp.w	r8, #1
 800a0fc:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	d10c      	bne.n	800a120 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800a106:	3301      	adds	r3, #1
 800a108:	4599      	cmp	r9, r3
 800a10a:	edd7 7a00 	vldr	s15, [r7]
 800a10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a112:	ece7 7a01 	vstmia	r7!, {s15}
 800a116:	d8f6      	bhi.n	800a106 <forward_lite_nl_softmax_if32of32_kernel+0x7e>
 800a118:	ecbd 8b02 	vpop	{d8}
 800a11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a120:	edd7 7a00 	vldr	s15, [r7]
 800a124:	3301      	adds	r3, #1
 800a126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a12a:	4599      	cmp	r9, r3
 800a12c:	edc7 7a00 	vstr	s15, [r7]
 800a130:	4457      	add	r7, sl
 800a132:	d8f5      	bhi.n	800a120 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800a134:	e7f0      	b.n	800a118 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800a136:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a13a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800a13e:	2301      	movs	r3, #1
 800a140:	edd2 7a00 	vldr	s15, [r2]
 800a144:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14c:	f103 0301 	add.w	r3, r3, #1
 800a150:	bfb8      	it	lt
 800a152:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a156:	4599      	cmp	r9, r3
 800a158:	4452      	add	r2, sl
 800a15a:	d1f1      	bne.n	800a140 <forward_lite_nl_softmax_if32of32_kernel+0xb8>
 800a15c:	e7b0      	b.n	800a0c0 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d0da      	beq.n	800a118 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800a162:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a166:	e7ab      	b.n	800a0c0 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 800a168:	00000000 	.word	0x00000000

0800a16c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800a16c:	edd3 6a02 	vldr	s13, [r3, #8]
 800a170:	ed93 7a00 	vldr	s14, [r3]
 800a174:	ed93 6a01 	vldr	s12, [r3, #4]
 800a178:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	d42a      	bmi.n	800a1d8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800a182:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800a186:	3a01      	subs	r2, #1
 800a188:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800a18c:	4561      	cmp	r1, ip
 800a18e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800a192:	d85d      	bhi.n	800a250 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800a194:	1d11      	adds	r1, r2, #4
 800a196:	f10c 0304 	add.w	r3, ip, #4
 800a19a:	4408      	add	r0, r1
 800a19c:	ebac 0202 	sub.w	r2, ip, r2
 800a1a0:	e00c      	b.n	800a1bc <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800a1a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1aa:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a1ae:	db01      	blt.n	800a1b4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800a1b0:	ee65 7a86 	vmul.f32	s15, s11, s12
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	ed60 7a01 	vstmdb	r0!, {s15}
 800a1ba:	d00c      	beq.n	800a1d6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800a1bc:	ed73 7a01 	vldmdb	r3!, {s15}
 800a1c0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c8:	daeb      	bge.n	800a1a2 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800a1ca:	eef0 7a66 	vmov.f32	s15, s13
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	ed60 7a01 	vstmdb	r0!, {s15}
 800a1d4:	d1f2      	bne.n	800a1bc <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800a1d6:	4770      	bx	lr
 800a1d8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a1dc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800a1e0:	3a01      	subs	r2, #1
 800a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800a1ea:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800a1ee:	d017      	beq.n	800a220 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800a1f0:	4561      	cmp	r1, ip
 800a1f2:	d82d      	bhi.n	800a250 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800a1f4:	1d11      	adds	r1, r2, #4
 800a1f6:	f10c 0304 	add.w	r3, ip, #4
 800a1fa:	4401      	add	r1, r0
 800a1fc:	ebac 0202 	sub.w	r2, ip, r2
 800a200:	ed73 7a01 	vldmdb	r3!, {s15}
 800a204:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a210:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a214:	d81d      	bhi.n	800a252 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800a216:	4293      	cmp	r3, r2
 800a218:	ed61 6a01 	vstmdb	r1!, {s13}
 800a21c:	d1f0      	bne.n	800a200 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800a21e:	4770      	bx	lr
 800a220:	4561      	cmp	r1, ip
 800a222:	d815      	bhi.n	800a250 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800a224:	1d11      	adds	r1, r2, #4
 800a226:	b500      	push	{lr}
 800a228:	f10c 0304 	add.w	r3, ip, #4
 800a22c:	f04f 0e00 	mov.w	lr, #0
 800a230:	4401      	add	r1, r0
 800a232:	ebac 0202 	sub.w	r2, ip, r2
 800a236:	ed73 7a01 	vldmdb	r3!, {s15}
 800a23a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a242:	d40b      	bmi.n	800a25c <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800a244:	4293      	cmp	r3, r2
 800a246:	f841 ed04 	str.w	lr, [r1, #-4]!
 800a24a:	d1f4      	bne.n	800a236 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800a24c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	4293      	cmp	r3, r2
 800a254:	ed61 7a01 	vstmdb	r1!, {s15}
 800a258:	d1d2      	bne.n	800a200 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800a25a:	4770      	bx	lr
 800a25c:	4293      	cmp	r3, r2
 800a25e:	ed61 7a01 	vstmdb	r1!, {s15}
 800a262:	d1e8      	bne.n	800a236 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800a264:	e7f2      	b.n	800a24c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800a266:	bf00      	nop

0800a268 <forward_lite_dense_if32of32wf32>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800a270:	6801      	ldr	r1, [r0, #0]
 800a272:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a276:	fb02 f303 	mul.w	r3, r2, r3
 800a27a:	b083      	sub	sp, #12
 800a27c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a280:	4299      	cmp	r1, r3
 800a282:	9100      	str	r1, [sp, #0]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	f080 811e 	bcs.w	800a4c6 <forward_lite_dense_if32of32wf32+0x25e>
 800a28a:	6904      	ldr	r4, [r0, #16]
 800a28c:	4607      	mov	r7, r0
 800a28e:	0096      	lsls	r6, r2, #2
 800a290:	9b00      	ldr	r3, [sp, #0]
 800a292:	68bd      	ldr	r5, [r7, #8]
 800a294:	eb03 0e06 	add.w	lr, r3, r6
 800a298:	459e      	cmp	lr, r3
 800a29a:	461e      	mov	r6, r3
 800a29c:	f240 8104 	bls.w	800a4a8 <forward_lite_dense_if32of32wf32+0x240>
 800a2a0:	f1a4 0c10 	sub.w	ip, r4, #16
 800a2a4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800a2a8:	f10c 0c01 	add.w	ip, ip, #1
 800a2ac:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800a2b0:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800a2b4:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800a2b8:	2c0f      	cmp	r4, #15
 800a2ba:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800a518 <forward_lite_dense_if32of32wf32+0x2b0>
 800a2be:	f240 8105 	bls.w	800a4cc <forward_lite_dense_if32of32wf32+0x264>
 800a2c2:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800a2c6:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800a2d0:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800a2d4:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800a2d8:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800a2dc:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800a2e0:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800a2e4:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800a2e8:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800a2ec:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800a2f0:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800a2f4:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800a2f8:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800a2fc:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800a300:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a304:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800a308:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a30c:	3910      	subs	r1, #16
 800a30e:	290f      	cmp	r1, #15
 800a310:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800a314:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800a318:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a31c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800a320:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a324:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800a328:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800a32c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800a330:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800a334:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800a338:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a33c:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800a340:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800a344:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a348:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800a34c:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800a350:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a354:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800a358:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800a35c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a360:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800a364:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800a368:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a36c:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800a370:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800a374:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a378:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800a37c:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800a380:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a384:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a388:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a38c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a390:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a394:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a39c:	d896      	bhi.n	800a2cc <forward_lite_dense_if32of32wf32+0x64>
 800a39e:	eb05 020b 	add.w	r2, r5, fp
 800a3a2:	f004 010f 	and.w	r1, r4, #15
 800a3a6:	4663      	mov	r3, ip
 800a3a8:	2903      	cmp	r1, #3
 800a3aa:	d95f      	bls.n	800a46c <forward_lite_dense_if32of32wf32+0x204>
 800a3ac:	edd2 6a01 	vldr	s13, [r2, #4]
 800a3b0:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3b4:	ed93 6a00 	vldr	s12, [r3]
 800a3b8:	ed93 5a02 	vldr	s10, [r3, #8]
 800a3bc:	edd2 5a02 	vldr	s11, [r2, #8]
 800a3c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a3c4:	edd2 6a00 	vldr	s13, [r2]
 800a3c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a3cc:	1f08      	subs	r0, r1, #4
 800a3ce:	2803      	cmp	r0, #3
 800a3d0:	ed93 6a03 	vldr	s12, [r3, #12]
 800a3d4:	edd2 6a03 	vldr	s13, [r2, #12]
 800a3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a3e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a3e4:	eeb0 7a67 	vmov.f32	s14, s15
 800a3e8:	d938      	bls.n	800a45c <forward_lite_dense_if32of32wf32+0x1f4>
 800a3ea:	edd2 6a05 	vldr	s13, [r2, #20]
 800a3ee:	edd3 7a05 	vldr	s15, [r3, #20]
 800a3f2:	ed93 6a04 	vldr	s12, [r3, #16]
 800a3f6:	ed93 5a06 	vldr	s10, [r3, #24]
 800a3fa:	edd2 5a06 	vldr	s11, [r2, #24]
 800a3fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a402:	edd2 6a04 	vldr	s13, [r2, #16]
 800a406:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a40a:	f1a1 0a08 	sub.w	sl, r1, #8
 800a40e:	f1ba 0f03 	cmp.w	sl, #3
 800a412:	ed93 6a07 	vldr	s12, [r3, #28]
 800a416:	edd2 6a07 	vldr	s13, [r2, #28]
 800a41a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a41e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a422:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a426:	d919      	bls.n	800a45c <forward_lite_dense_if32of32wf32+0x1f4>
 800a428:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800a42c:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800a430:	ed92 6a08 	vldr	s12, [r2, #32]
 800a434:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800a438:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800a43c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a440:	edd3 6a08 	vldr	s13, [r3, #32]
 800a444:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a448:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800a44c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800a450:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a454:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a45c:	0880      	lsrs	r0, r0, #2
 800a45e:	3001      	adds	r0, #1
 800a460:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800a464:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800a468:	f001 0103 	and.w	r1, r1, #3
 800a46c:	b1a9      	cbz	r1, 800a49a <forward_lite_dense_if32of32wf32+0x232>
 800a46e:	edd3 6a00 	vldr	s13, [r3]
 800a472:	edd2 7a00 	vldr	s15, [r2]
 800a476:	3901      	subs	r1, #1
 800a478:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a47c:	d00d      	beq.n	800a49a <forward_lite_dense_if32of32wf32+0x232>
 800a47e:	edd3 6a01 	vldr	s13, [r3, #4]
 800a482:	edd2 7a01 	vldr	s15, [r2, #4]
 800a486:	2901      	cmp	r1, #1
 800a488:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a48c:	d005      	beq.n	800a49a <forward_lite_dense_if32of32wf32+0x232>
 800a48e:	edd2 6a02 	vldr	s13, [r2, #8]
 800a492:	edd3 7a02 	vldr	s15, [r3, #8]
 800a496:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a49a:	444d      	add	r5, r9
 800a49c:	eca6 7a01 	vstmia	r6!, {s14}
 800a4a0:	45b6      	cmp	lr, r6
 800a4a2:	f63f af09 	bhi.w	800a2b8 <forward_lite_dense_if32of32wf32+0x50>
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	b99b      	cbnz	r3, 800a4d4 <forward_lite_dense_if32of32wf32+0x26c>
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	9901      	ldr	r1, [sp, #4]
 800a4b0:	693c      	ldr	r4, [r7, #16]
 800a4b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800a4be:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800a4c2:	f63f aee5 	bhi.w	800a290 <forward_lite_dense_if32of32wf32+0x28>
 800a4c6:	b003      	add	sp, #12
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	462a      	mov	r2, r5
 800a4d0:	4643      	mov	r3, r8
 800a4d2:	e769      	b.n	800a3a8 <forward_lite_dense_if32of32wf32+0x140>
 800a4d4:	2a00      	cmp	r2, #0
 800a4d6:	d0e9      	beq.n	800a4ac <forward_lite_dense_if32of32wf32+0x244>
 800a4d8:	9a00      	ldr	r2, [sp, #0]
 800a4da:	ed93 7a00 	vldr	s14, [r3]
 800a4de:	edd2 7a00 	vldr	s15, [r2]
 800a4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	edc2 7a00 	vstr	s15, [r2]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	2a01      	cmp	r2, #1
 800a4f0:	d9dc      	bls.n	800a4ac <forward_lite_dense_if32of32wf32+0x244>
 800a4f2:	1d19      	adds	r1, r3, #4
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	ed91 7a00 	vldr	s14, [r1]
 800a4fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a500:	edd2 7a00 	vldr	s15, [r2]
 800a504:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a508:	3301      	adds	r3, #1
 800a50a:	ece1 7a01 	vstmia	r1!, {s15}
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	429a      	cmp	r2, r3
 800a512:	d8f0      	bhi.n	800a4f6 <forward_lite_dense_if32of32wf32+0x28e>
 800a514:	e7ca      	b.n	800a4ac <forward_lite_dense_if32of32wf32+0x244>
 800a516:	bf00      	nop
 800a518:	00000000 	.word	0x00000000

0800a51c <forward_lite_dense_if32of32wf32_lut4>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	b08d      	sub	sp, #52	@ 0x34
 800a522:	4605      	mov	r5, r0
 800a524:	9005      	str	r0, [sp, #20]
 800a526:	920a      	str	r2, [sp, #40]	@ 0x28
 800a528:	4618      	mov	r0, r3
 800a52a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800a52e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800a530:	fb02 f303 	mul.w	r3, r2, r3
 800a534:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a538:	460c      	mov	r4, r1
 800a53a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800a53c:	9308      	str	r3, [sp, #32]
 800a53e:	b126      	cbz	r6, 800a54a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800a540:	2240      	movs	r2, #64	@ 0x40
 800a542:	4631      	mov	r1, r6
 800a544:	f000 fa76 	bl	800aa34 <st_int8_copy>
 800a548:	4630      	mov	r0, r6
 800a54a:	9b05      	ldr	r3, [sp, #20]
 800a54c:	9a08      	ldr	r2, [sp, #32]
 800a54e:	4293      	cmp	r3, r2
 800a550:	f080 80f5 	bcs.w	800a73e <forward_lite_dense_if32of32wf32_lut4+0x222>
 800a554:	08eb      	lsrs	r3, r5, #3
 800a556:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	f005 0101 	and.w	r1, r5, #1
 800a55e:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	0092      	lsls	r2, r2, #2
 800a566:	f025 0801 	bic.w	r8, r5, #1
 800a56a:	9102      	str	r1, [sp, #8]
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	00a9      	lsls	r1, r5, #2
 800a570:	9b05      	ldr	r3, [sp, #20]
 800a572:	9207      	str	r2, [sp, #28]
 800a574:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800a578:	9109      	str	r1, [sp, #36]	@ 0x24
 800a57a:	f104 0b20 	add.w	fp, r4, #32
 800a57e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a580:	9a07      	ldr	r2, [sp, #28]
 800a582:	eb03 0902 	add.w	r9, r3, r2
 800a586:	4599      	cmp	r9, r3
 800a588:	f1ab 0220 	sub.w	r2, fp, #32
 800a58c:	9206      	str	r2, [sp, #24]
 800a58e:	f240 80d9 	bls.w	800a744 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800a592:	469e      	mov	lr, r3
 800a594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a596:	f108 33ff 	add.w	r3, r8, #4294967295
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800a768 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 80b2 	beq.w	800a70c <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	18d5      	adds	r5, r2, r3
 800a5ac:	465b      	mov	r3, fp
 800a5ae:	7814      	ldrb	r4, [r2, #0]
 800a5b0:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800a5b4:	7851      	ldrb	r1, [r2, #1]
 800a5b6:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800a5ba:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800a5be:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800a5c2:	ed13 5a04 	vldr	s10, [r3, #-16]
 800a5c6:	ed53 5a03 	vldr	s11, [r3, #-12]
 800a5ca:	ed13 6a02 	vldr	s12, [r3, #-8]
 800a5ce:	ed53 6a01 	vldr	s13, [r3, #-4]
 800a5d2:	f004 060f 	and.w	r6, r4, #15
 800a5d6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a5da:	edd6 7a00 	vldr	s15, [r6]
 800a5de:	0924      	lsrs	r4, r4, #4
 800a5e0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800a5e4:	ed94 3a00 	vldr	s6, [r4]
 800a5e8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a5ec:	090c      	lsrs	r4, r1, #4
 800a5ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a5f2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800a5f6:	f001 010f 	and.w	r1, r1, #15
 800a5fa:	edd4 3a00 	vldr	s7, [r4]
 800a5fe:	7894      	ldrb	r4, [r2, #2]
 800a600:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a608:	0926      	lsrs	r6, r4, #4
 800a60a:	ed91 4a00 	vldr	s8, [r1]
 800a60e:	78d1      	ldrb	r1, [r2, #3]
 800a610:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a614:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a618:	f004 040f 	and.w	r4, r4, #15
 800a61c:	edd6 4a00 	vldr	s9, [r6]
 800a620:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a624:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800a628:	3204      	adds	r2, #4
 800a62a:	ed94 5a00 	vldr	s10, [r4]
 800a62e:	090c      	lsrs	r4, r1, #4
 800a630:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a634:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800a638:	f001 010f 	and.w	r1, r1, #15
 800a63c:	edd4 5a00 	vldr	s11, [r4]
 800a640:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a644:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a648:	42aa      	cmp	r2, r5
 800a64a:	ed91 6a00 	vldr	s12, [r1]
 800a64e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a652:	f103 0320 	add.w	r3, r3, #32
 800a656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a65a:	d1a8      	bne.n	800a5ae <forward_lite_dense_if32of32wf32_lut4+0x92>
 800a65c:	4656      	mov	r6, sl
 800a65e:	4546      	cmp	r6, r8
 800a660:	d258      	bcs.n	800a714 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	1b9c      	subs	r4, r3, r6
 800a666:	08e7      	lsrs	r7, r4, #3
 800a668:	f106 0208 	add.w	r2, r6, #8
 800a66c:	1e69      	subs	r1, r5, #1
 800a66e:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800a672:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a676:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a67a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a67e:	f003 0c0f 	and.w	ip, r3, #15
 800a682:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800a686:	eddc 7a00 	vldr	s15, [ip]
 800a68a:	091b      	lsrs	r3, r3, #4
 800a68c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a690:	ed93 6a00 	vldr	s12, [r3]
 800a694:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a698:	42a1      	cmp	r1, r4
 800a69a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a69e:	f102 0208 	add.w	r2, r2, #8
 800a6a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6a6:	d1e4      	bne.n	800a672 <forward_lite_dense_if32of32wf32_lut4+0x156>
 800a6a8:	3701      	adds	r7, #1
 800a6aa:	19ea      	adds	r2, r5, r7
 800a6ac:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800a6b0:	9b02      	ldr	r3, [sp, #8]
 800a6b2:	b30b      	cbz	r3, 800a6f8 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800a6b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a6b8:	edd6 7a00 	vldr	s15, [r6]
 800a6bc:	091b      	lsrs	r3, r3, #4
 800a6be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a6c2:	edd3 6a00 	vldr	s13, [r3]
 800a6c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6ca:	ecae 7a01 	vstmia	lr!, {s14}
 800a6ce:	45f1      	cmp	r9, lr
 800a6d0:	f63f af64 	bhi.w	800a59c <forward_lite_dense_if32of32wf32_lut4+0x80>
 800a6d4:	9b05      	ldr	r3, [sp, #20]
 800a6d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6d8:	1899      	adds	r1, r3, r2
 800a6da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6dc:	b9e3      	cbnz	r3, 800a718 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800a6de:	9b08      	ldr	r3, [sp, #32]
 800a6e0:	428b      	cmp	r3, r1
 800a6e2:	d92c      	bls.n	800a73e <forward_lite_dense_if32of32wf32_lut4+0x222>
 800a6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e6:	4498      	add	r8, r3
 800a6e8:	449a      	add	sl, r3
 800a6ea:	449b      	add	fp, r3
 800a6ec:	9b05      	ldr	r3, [sp, #20]
 800a6ee:	4599      	cmp	r9, r3
 800a6f0:	d92a      	bls.n	800a748 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800a6f2:	9105      	str	r1, [sp, #20]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	e743      	b.n	800a580 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800a6f8:	ecae 7a01 	vstmia	lr!, {s14}
 800a6fc:	45f1      	cmp	r9, lr
 800a6fe:	d9e9      	bls.n	800a6d4 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800a700:	9b01      	ldr	r3, [sp, #4]
 800a702:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a768 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800a706:	2b00      	cmp	r3, #0
 800a708:	f47f af4e 	bne.w	800a5a8 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 800a70c:	9e06      	ldr	r6, [sp, #24]
 800a70e:	4546      	cmp	r6, r8
 800a710:	4615      	mov	r5, r2
 800a712:	d3a6      	bcc.n	800a662 <forward_lite_dense_if32of32wf32_lut4+0x146>
 800a714:	462a      	mov	r2, r5
 800a716:	e7cb      	b.n	800a6b0 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800a718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0df      	beq.n	800a6de <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800a71e:	9b07      	ldr	r3, [sp, #28]
 800a720:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a722:	1acb      	subs	r3, r1, r3
 800a724:	edd3 7a00 	vldr	s15, [r3]
 800a728:	ecb2 7a01 	vldmia	r2!, {s14}
 800a72c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a730:	ece3 7a01 	vstmia	r3!, {s15}
 800a734:	428b      	cmp	r3, r1
 800a736:	d1f5      	bne.n	800a724 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800a738:	9b08      	ldr	r3, [sp, #32]
 800a73a:	428b      	cmp	r3, r1
 800a73c:	d8d2      	bhi.n	800a6e4 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800a73e:	b00d      	add	sp, #52	@ 0x34
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	4619      	mov	r1, r3
 800a746:	e7c8      	b.n	800a6da <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800a748:	9b07      	ldr	r3, [sp, #28]
 800a74a:	1acb      	subs	r3, r1, r3
 800a74c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800a74e:	461a      	mov	r2, r3
 800a750:	ed92 7a00 	vldr	s14, [r2]
 800a754:	ecf0 7a01 	vldmia	r0!, {s15}
 800a758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a75c:	ece2 7a01 	vstmia	r2!, {s15}
 800a760:	428a      	cmp	r2, r1
 800a762:	d1f5      	bne.n	800a750 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800a764:	e7f2      	b.n	800a74c <forward_lite_dense_if32of32wf32_lut4+0x230>
 800a766:	bf00      	nop
 800a768:	00000000 	.word	0x00000000

0800a76c <forward_lite_dense_if32of32wf32_lut8>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	b087      	sub	sp, #28
 800a772:	460f      	mov	r7, r1
 800a774:	9204      	str	r2, [sp, #16]
 800a776:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800a77a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a77c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800a77e:	fb01 f202 	mul.w	r2, r1, r2
 800a782:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a786:	4605      	mov	r5, r0
 800a788:	9202      	str	r2, [sp, #8]
 800a78a:	b136      	cbz	r6, 800a79a <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800a78c:	4618      	mov	r0, r3
 800a78e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a792:	4631      	mov	r1, r6
 800a794:	f000 f94e 	bl	800aa34 <st_int8_copy>
 800a798:	4633      	mov	r3, r6
 800a79a:	9a02      	ldr	r2, [sp, #8]
 800a79c:	4295      	cmp	r5, r2
 800a79e:	f080 80f9 	bcs.w	800a994 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800a7a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7a4:	0092      	lsls	r2, r2, #2
 800a7a6:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800a7aa:	9201      	str	r2, [sp, #4]
 800a7ac:	9205      	str	r2, [sp, #20]
 800a7ae:	462a      	mov	r2, r5
 800a7b0:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800a7b4:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800a7b8:	464d      	mov	r5, r9
 800a7ba:	4691      	mov	r9, r2
 800a7bc:	9a01      	ldr	r2, [sp, #4]
 800a7be:	eb09 0e02 	add.w	lr, r9, r2
 800a7c2:	00a1      	lsls	r1, r4, #2
 800a7c4:	3720      	adds	r7, #32
 800a7c6:	45ce      	cmp	lr, r9
 800a7c8:	f004 0007 	and.w	r0, r4, #7
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	f1a7 0b20 	sub.w	fp, r7, #32
 800a7d2:	f240 80c8 	bls.w	800a966 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800a7d6:	9a04      	ldr	r2, [sp, #16]
 800a7d8:	46cc      	mov	ip, r9
 800a7da:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800a9c4 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800a7de:	2d00      	cmp	r5, #0
 800a7e0:	f000 80dd 	beq.w	800a99e <forward_lite_dense_if32of32wf32_lut8+0x232>
 800a7e4:	eb02 060a 	add.w	r6, r2, sl
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	7854      	ldrb	r4, [r2, #1]
 800a7ec:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800a7f0:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 800a7f4:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 800a7f8:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 800a7fc:	ed11 5a04 	vldr	s10, [r1, #-16]
 800a800:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a804:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a808:	ed51 6a01 	vldr	s13, [r1, #-4]
 800a80c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a810:	edd4 7a00 	vldr	s15, [r4]
 800a814:	7814      	ldrb	r4, [r2, #0]
 800a816:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a81a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a81e:	ed94 3a00 	vldr	s6, [r4]
 800a822:	7894      	ldrb	r4, [r2, #2]
 800a824:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a828:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a82c:	3208      	adds	r2, #8
 800a82e:	edd4 3a00 	vldr	s7, [r4]
 800a832:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800a836:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a83a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a83e:	3120      	adds	r1, #32
 800a840:	ed94 4a00 	vldr	s8, [r4]
 800a844:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 800a848:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a84c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a850:	edd4 4a00 	vldr	s9, [r4]
 800a854:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 800a858:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a85c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a860:	ed94 5a00 	vldr	s10, [r4]
 800a864:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800a868:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a86c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a870:	edd4 5a00 	vldr	s11, [r4]
 800a874:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 800a878:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a87c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a880:	42b2      	cmp	r2, r6
 800a882:	ed94 6a00 	vldr	s12, [r4]
 800a886:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a88a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a88e:	d1ac      	bne.n	800a7ea <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800a890:	4642      	mov	r2, r8
 800a892:	2800      	cmp	r0, #0
 800a894:	f000 8081 	beq.w	800a99a <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800a898:	7831      	ldrb	r1, [r6, #0]
 800a89a:	edd2 7a00 	vldr	s15, [r2]
 800a89e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a8a2:	edd1 6a00 	vldr	s13, [r1]
 800a8a6:	2801      	cmp	r0, #1
 800a8a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8ac:	d03f      	beq.n	800a92e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800a8ae:	7871      	ldrb	r1, [r6, #1]
 800a8b0:	edd2 7a01 	vldr	s15, [r2, #4]
 800a8b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a8b8:	edd1 6a00 	vldr	s13, [r1]
 800a8bc:	2802      	cmp	r0, #2
 800a8be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8c2:	d034      	beq.n	800a92e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800a8c4:	78b1      	ldrb	r1, [r6, #2]
 800a8c6:	edd2 7a02 	vldr	s15, [r2, #8]
 800a8ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a8ce:	edd1 6a00 	vldr	s13, [r1]
 800a8d2:	2803      	cmp	r0, #3
 800a8d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8d8:	d029      	beq.n	800a92e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800a8da:	78f1      	ldrb	r1, [r6, #3]
 800a8dc:	edd2 6a03 	vldr	s13, [r2, #12]
 800a8e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a8e4:	edd1 7a00 	vldr	s15, [r1]
 800a8e8:	2804      	cmp	r0, #4
 800a8ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8ee:	d01e      	beq.n	800a92e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800a8f0:	7931      	ldrb	r1, [r6, #4]
 800a8f2:	edd2 6a04 	vldr	s13, [r2, #16]
 800a8f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a8fa:	edd1 7a00 	vldr	s15, [r1]
 800a8fe:	2805      	cmp	r0, #5
 800a900:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a904:	d013      	beq.n	800a92e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800a906:	7971      	ldrb	r1, [r6, #5]
 800a908:	edd2 6a05 	vldr	s13, [r2, #20]
 800a90c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a910:	edd1 7a00 	vldr	s15, [r1]
 800a914:	2806      	cmp	r0, #6
 800a916:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a91a:	d008      	beq.n	800a92e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800a91c:	edd2 7a06 	vldr	s15, [r2, #24]
 800a920:	79b2      	ldrb	r2, [r6, #6]
 800a922:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a926:	edd2 6a00 	vldr	s13, [r2]
 800a92a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a92e:	1832      	adds	r2, r6, r0
 800a930:	ecac 7a01 	vstmia	ip!, {s14}
 800a934:	45e6      	cmp	lr, ip
 800a936:	f63f af50 	bhi.w	800a7da <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800a93a:	9a05      	ldr	r2, [sp, #20]
 800a93c:	eb09 0402 	add.w	r4, r9, r2
 800a940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a942:	b9a2      	cbnz	r2, 800a96e <forward_lite_dense_if32of32wf32_lut8+0x202>
 800a944:	9a02      	ldr	r2, [sp, #8]
 800a946:	42a2      	cmp	r2, r4
 800a948:	d924      	bls.n	800a994 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800a94a:	9a03      	ldr	r2, [sp, #12]
 800a94c:	45ce      	cmp	lr, r9
 800a94e:	4490      	add	r8, r2
 800a950:	4417      	add	r7, r2
 800a952:	d927      	bls.n	800a9a4 <forward_lite_dense_if32of32wf32_lut8+0x238>
 800a954:	9a01      	ldr	r2, [sp, #4]
 800a956:	46a1      	mov	r9, r4
 800a958:	eb09 0e02 	add.w	lr, r9, r2
 800a95c:	45ce      	cmp	lr, r9
 800a95e:	f1a7 0b20 	sub.w	fp, r7, #32
 800a962:	f63f af38 	bhi.w	800a7d6 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800a966:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a968:	464c      	mov	r4, r9
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	d0ea      	beq.n	800a944 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800a96e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a970:	2a00      	cmp	r2, #0
 800a972:	d0e7      	beq.n	800a944 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800a974:	9a01      	ldr	r2, [sp, #4]
 800a976:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a978:	1aa2      	subs	r2, r4, r2
 800a97a:	edd2 7a00 	vldr	s15, [r2]
 800a97e:	ecb1 7a01 	vldmia	r1!, {s14}
 800a982:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a986:	ece2 7a01 	vstmia	r2!, {s15}
 800a98a:	4294      	cmp	r4, r2
 800a98c:	d1f5      	bne.n	800a97a <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800a98e:	9a02      	ldr	r2, [sp, #8]
 800a990:	42a2      	cmp	r2, r4
 800a992:	d8da      	bhi.n	800a94a <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800a994:	b007      	add	sp, #28
 800a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99a:	4632      	mov	r2, r6
 800a99c:	e7c8      	b.n	800a930 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800a99e:	4616      	mov	r6, r2
 800a9a0:	465a      	mov	r2, fp
 800a9a2:	e776      	b.n	800a892 <forward_lite_dense_if32of32wf32_lut8+0x126>
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	1ae3      	subs	r3, r4, r3
 800a9a8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	ed92 7a00 	vldr	s14, [r2]
 800a9b0:	ecf1 7a01 	vldmia	r1!, {s15}
 800a9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9b8:	ece2 7a01 	vstmia	r2!, {s15}
 800a9bc:	42a2      	cmp	r2, r4
 800a9be:	d1f5      	bne.n	800a9ac <forward_lite_dense_if32of32wf32_lut8+0x240>
 800a9c0:	e7f2      	b.n	800a9a8 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800a9c2:	bf00      	nop
 800a9c4:	00000000 	.word	0x00000000

0800a9c8 <forward_lite_nl_softmax_if32of32>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	469b      	mov	fp, r3
 800a9d4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800a9d6:	fbb2 f3f7 	udiv	r3, r2, r7
 800a9da:	42ba      	cmp	r2, r7
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	d326      	bcc.n	800aa2e <forward_lite_nl_softmax_if32of32+0x66>
 800a9e0:	fb07 f30b 	mul.w	r3, r7, fp
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	f1bb 0f00 	cmp.w	fp, #0
 800a9ec:	d01f      	beq.n	800aa2e <forward_lite_nl_softmax_if32of32+0x66>
 800a9ee:	970c      	str	r7, [sp, #48]	@ 0x30
 800a9f0:	465f      	mov	r7, fp
 800a9f2:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	f04f 0a00 	mov.w	sl, #0
 800a9fe:	464e      	mov	r6, r9
 800aa00:	4645      	mov	r5, r8
 800aa02:	2400      	movs	r4, #0
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	463b      	mov	r3, r7
 800aa0a:	3401      	adds	r4, #1
 800aa0c:	465a      	mov	r2, fp
 800aa0e:	f7ff fb3b 	bl	800a088 <forward_lite_nl_softmax_if32of32_kernel>
 800aa12:	42a7      	cmp	r7, r4
 800aa14:	f106 0604 	add.w	r6, r6, #4
 800aa18:	f105 0504 	add.w	r5, r5, #4
 800aa1c:	d1f2      	bne.n	800aa04 <forward_lite_nl_softmax_if32of32+0x3c>
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	4499      	add	r9, r3
 800aa22:	4498      	add	r8, r3
 800aa24:	9b00      	ldr	r3, [sp, #0]
 800aa26:	f10a 0a01 	add.w	sl, sl, #1
 800aa2a:	4553      	cmp	r3, sl
 800aa2c:	d8e7      	bhi.n	800a9fe <forward_lite_nl_softmax_if32of32+0x36>
 800aa2e:	b003      	add	sp, #12
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa34 <st_int8_copy>:
 800aa34:	4288      	cmp	r0, r1
 800aa36:	d022      	beq.n	800aa7e <st_int8_copy+0x4a>
 800aa38:	b30a      	cbz	r2, 800aa7e <st_int8_copy+0x4a>
 800aa3a:	4288      	cmp	r0, r1
 800aa3c:	d312      	bcc.n	800aa64 <st_int8_copy+0x30>
 800aa3e:	2a03      	cmp	r2, #3
 800aa40:	d81e      	bhi.n	800aa80 <st_int8_copy+0x4c>
 800aa42:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa46:	f801 3b01 	strb.w	r3, [r1], #1
 800aa4a:	2a01      	cmp	r2, #1
 800aa4c:	d017      	beq.n	800aa7e <st_int8_copy+0x4a>
 800aa4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa52:	f801 3b01 	strb.w	r3, [r1], #1
 800aa56:	2a02      	cmp	r2, #2
 800aa58:	d011      	beq.n	800aa7e <st_int8_copy+0x4a>
 800aa5a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa5e:	f801 3b01 	strb.w	r3, [r1], #1
 800aa62:	4770      	bx	lr
 800aa64:	1883      	adds	r3, r0, r2
 800aa66:	4299      	cmp	r1, r3
 800aa68:	d2e9      	bcs.n	800aa3e <st_int8_copy+0xa>
 800aa6a:	4298      	cmp	r0, r3
 800aa6c:	440a      	add	r2, r1
 800aa6e:	d206      	bcs.n	800aa7e <st_int8_copy+0x4a>
 800aa70:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800aa74:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800aa78:	4298      	cmp	r0, r3
 800aa7a:	d1f9      	bne.n	800aa70 <st_int8_copy+0x3c>
 800aa7c:	4770      	bx	lr
 800aa7e:	4770      	bx	lr
 800aa80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa84:	f001 0403 	and.w	r4, r1, #3
 800aa88:	f1c4 0304 	rsb	r3, r4, #4
 800aa8c:	f000 0e03 	and.w	lr, r0, #3
 800aa90:	eba2 0c03 	sub.w	ip, r2, r3
 800aa94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa98:	f801 3b01 	strb.w	r3, [r1], #1
 800aa9c:	2c03      	cmp	r4, #3
 800aa9e:	f1c4 0202 	rsb	r2, r4, #2
 800aaa2:	d00e      	beq.n	800aac2 <st_int8_copy+0x8e>
 800aaa4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aaa8:	f801 3b01 	strb.w	r3, [r1], #1
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	dd08      	ble.n	800aac2 <st_int8_copy+0x8e>
 800aab0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aab4:	f801 3b01 	strb.w	r3, [r1], #1
 800aab8:	b91c      	cbnz	r4, 800aac2 <st_int8_copy+0x8e>
 800aaba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aabe:	f801 3b01 	strb.w	r3, [r1], #1
 800aac2:	4574      	cmp	r4, lr
 800aac4:	d02b      	beq.n	800ab1e <st_int8_copy+0xea>
 800aac6:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800aaca:	1e5a      	subs	r2, r3, #1
 800aacc:	b153      	cbz	r3, 800aae4 <st_int8_copy+0xb0>
 800aace:	f850 3b04 	ldr.w	r3, [r0], #4
 800aad2:	f850 4b04 	ldr.w	r4, [r0], #4
 800aad6:	f850 5b04 	ldr.w	r5, [r0], #4
 800aada:	f850 6b04 	ldr.w	r6, [r0], #4
 800aade:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800aae0:	3a01      	subs	r2, #1
 800aae2:	d2f4      	bcs.n	800aace <st_int8_copy+0x9a>
 800aae4:	f01c 0f08 	tst.w	ip, #8
 800aae8:	d004      	beq.n	800aaf4 <st_int8_copy+0xc0>
 800aaea:	f850 3b04 	ldr.w	r3, [r0], #4
 800aaee:	f850 4b04 	ldr.w	r4, [r0], #4
 800aaf2:	c118      	stmia	r1!, {r3, r4}
 800aaf4:	f01c 0f04 	tst.w	ip, #4
 800aaf8:	d003      	beq.n	800ab02 <st_int8_copy+0xce>
 800aafa:	f850 3b04 	ldr.w	r3, [r0], #4
 800aafe:	f841 3b04 	str.w	r3, [r1], #4
 800ab02:	f01c 0f02 	tst.w	ip, #2
 800ab06:	d003      	beq.n	800ab10 <st_int8_copy+0xdc>
 800ab08:	f830 3b02 	ldrh.w	r3, [r0], #2
 800ab0c:	f821 3b02 	strh.w	r3, [r1], #2
 800ab10:	f01c 0f01 	tst.w	ip, #1
 800ab14:	d001      	beq.n	800ab1a <st_int8_copy+0xe6>
 800ab16:	7803      	ldrb	r3, [r0, #0]
 800ab18:	700b      	strb	r3, [r1, #0]
 800ab1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab1e:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800ab22:	f103 39ff 	add.w	r9, r3, #4294967295
 800ab26:	b183      	cbz	r3, 800ab4a <st_int8_copy+0x116>
 800ab28:	4688      	mov	r8, r1
 800ab2a:	4686      	mov	lr, r0
 800ab2c:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ab30:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ab34:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ab38:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ab3c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab40:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ab44:	4641      	mov	r1, r8
 800ab46:	4670      	mov	r0, lr
 800ab48:	d1ee      	bne.n	800ab28 <st_int8_copy+0xf4>
 800ab4a:	f01c 0f20 	tst.w	ip, #32
 800ab4e:	d007      	beq.n	800ab60 <st_int8_copy+0x12c>
 800ab50:	4688      	mov	r8, r1
 800ab52:	4686      	mov	lr, r0
 800ab54:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ab58:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ab5c:	4641      	mov	r1, r8
 800ab5e:	4670      	mov	r0, lr
 800ab60:	f01c 0f10 	tst.w	ip, #16
 800ab64:	d001      	beq.n	800ab6a <st_int8_copy+0x136>
 800ab66:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800ab68:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800ab6a:	f01c 0f08 	tst.w	ip, #8
 800ab6e:	d0c1      	beq.n	800aaf4 <st_int8_copy+0xc0>
 800ab70:	c818      	ldmia	r0!, {r3, r4}
 800ab72:	c118      	stmia	r1!, {r3, r4}
 800ab74:	e7be      	b.n	800aaf4 <st_int8_copy+0xc0>
 800ab76:	bf00      	nop

0800ab78 <ai_array_to_buffer_fmt>:
 800ab78:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d055      	beq.n	800ac2c <ai_array_to_buffer_fmt+0xb4>
 800ab80:	4a2d      	ldr	r2, [pc, #180]	@ (800ac38 <ai_array_to_buffer_fmt+0xc0>)
 800ab82:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d010      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ab8a:	dc21      	bgt.n	800abd0 <ai_array_to_buffer_fmt+0x58>
 800ab8c:	4a2b      	ldr	r2, [pc, #172]	@ (800ac3c <ai_array_to_buffer_fmt+0xc4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00c      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ab92:	dd0f      	ble.n	800abb4 <ai_array_to_buffer_fmt+0x3c>
 800ab94:	4a2a      	ldr	r2, [pc, #168]	@ (800ac40 <ai_array_to_buffer_fmt+0xc8>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d008      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ab9a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d004      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800aba2:	4a28      	ldr	r2, [pc, #160]	@ (800ac44 <ai_array_to_buffer_fmt+0xcc>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	bf0c      	ite	eq
 800aba8:	4613      	moveq	r3, r2
 800abaa:	2340      	movne	r3, #64	@ 0x40
 800abac:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800abb0:	4318      	orrs	r0, r3
 800abb2:	4770      	bx	lr
 800abb4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800abb8:	4293      	cmp	r3, r2
 800abba:	d0f7      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800abbc:	dd2c      	ble.n	800ac18 <ai_array_to_buffer_fmt+0xa0>
 800abbe:	4a22      	ldr	r2, [pc, #136]	@ (800ac48 <ai_array_to_buffer_fmt+0xd0>)
 800abc0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800abc4:	4293      	cmp	r3, r2
 800abc6:	bf0c      	ite	eq
 800abc8:	4613      	moveq	r3, r2
 800abca:	2340      	movne	r3, #64	@ 0x40
 800abcc:	4318      	orrs	r0, r3
 800abce:	4770      	bx	lr
 800abd0:	4a1e      	ldr	r2, [pc, #120]	@ (800ac4c <ai_array_to_buffer_fmt+0xd4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d0ea      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800abd6:	dd10      	ble.n	800abfa <ai_array_to_buffer_fmt+0x82>
 800abd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac50 <ai_array_to_buffer_fmt+0xd8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d0e6      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800abde:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d0e2      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800abe6:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800abea:	4293      	cmp	r3, r2
 800abec:	bf0c      	ite	eq
 800abee:	4613      	moveq	r3, r2
 800abf0:	2340      	movne	r3, #64	@ 0x40
 800abf2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800abf6:	4318      	orrs	r0, r3
 800abf8:	4770      	bx	lr
 800abfa:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d0d4      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ac02:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d0d0      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ac0a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	bf0c      	ite	eq
 800ac12:	4613      	moveq	r3, r2
 800ac14:	2340      	movne	r3, #64	@ 0x40
 800ac16:	e7c9      	b.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ac18:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d0c5      	beq.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ac20:	3280      	adds	r2, #128	@ 0x80
 800ac22:	4293      	cmp	r3, r2
 800ac24:	bf0c      	ite	eq
 800ac26:	4613      	moveq	r3, r2
 800ac28:	2340      	movne	r3, #64	@ 0x40
 800ac2a:	e7bf      	b.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ac2c:	4b09      	ldr	r3, [pc, #36]	@ (800ac54 <ai_array_to_buffer_fmt+0xdc>)
 800ac2e:	4003      	ands	r3, r0
 800ac30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac34:	e7ba      	b.n	800abac <ai_array_to_buffer_fmt+0x34>
 800ac36:	bf00      	nop
 800ac38:	00821040 	.word	0x00821040
 800ac3c:	00040840 	.word	0x00040840
 800ac40:	00041040 	.word	0x00041040
 800ac44:	0004084f 	.word	0x0004084f
 800ac48:	00040447 	.word	0x00040447
 800ac4c:	00840447 	.word	0x00840447
 800ac50:	0084084f 	.word	0x0084084f
 800ac54:	00803fff 	.word	0x00803fff

0800ac58 <ai_array_get_data_byte_size>:
 800ac58:	b169      	cbz	r1, 800ac76 <ai_array_get_data_byte_size+0x1e>
 800ac5a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ac5e:	fb03 f101 	mul.w	r1, r3, r1
 800ac62:	1dcb      	adds	r3, r1, #7
 800ac64:	f023 0307 	bic.w	r3, r3, #7
 800ac68:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800ac6c:	fa23 f000 	lsr.w	r0, r3, r0
 800ac70:	3007      	adds	r0, #7
 800ac72:	08c0      	lsrs	r0, r0, #3
 800ac74:	4770      	bx	lr
 800ac76:	4608      	mov	r0, r1
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop

0800ac7c <ai_version_get>:
 800ac7c:	0212      	lsls	r2, r2, #8
 800ac7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ac82:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ac86:	4770      	bx	lr

0800ac88 <get_tensor_byte_size>:
 800ac88:	b410      	push	{r4}
 800ac8a:	6983      	ldr	r3, [r0, #24]
 800ac8c:	68c4      	ldr	r4, [r0, #12]
 800ac8e:	6941      	ldr	r1, [r0, #20]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68e0      	ldr	r0, [r4, #12]
 800ac94:	4a07      	ldr	r2, [pc, #28]	@ (800acb4 <get_tensor_byte_size+0x2c>)
 800ac96:	68c9      	ldr	r1, [r1, #12]
 800ac98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800aca0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aca4:	fb01 f000 	mul.w	r0, r1, r0
 800aca8:	4293      	cmp	r3, r2
 800acaa:	bf04      	itt	eq
 800acac:	3007      	addeq	r0, #7
 800acae:	08c0      	lsreq	r0, r0, #3
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	000400c0 	.word	0x000400c0

0800acb8 <sbrk_aligned>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	4e0f      	ldr	r6, [pc, #60]	@ (800acf8 <sbrk_aligned+0x40>)
 800acbc:	460c      	mov	r4, r1
 800acbe:	6831      	ldr	r1, [r6, #0]
 800acc0:	4605      	mov	r5, r0
 800acc2:	b911      	cbnz	r1, 800acca <sbrk_aligned+0x12>
 800acc4:	f000 faec 	bl	800b2a0 <_sbrk_r>
 800acc8:	6030      	str	r0, [r6, #0]
 800acca:	4621      	mov	r1, r4
 800accc:	4628      	mov	r0, r5
 800acce:	f000 fae7 	bl	800b2a0 <_sbrk_r>
 800acd2:	1c43      	adds	r3, r0, #1
 800acd4:	d103      	bne.n	800acde <sbrk_aligned+0x26>
 800acd6:	f04f 34ff 	mov.w	r4, #4294967295
 800acda:	4620      	mov	r0, r4
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	1cc4      	adds	r4, r0, #3
 800ace0:	f024 0403 	bic.w	r4, r4, #3
 800ace4:	42a0      	cmp	r0, r4
 800ace6:	d0f8      	beq.n	800acda <sbrk_aligned+0x22>
 800ace8:	1a21      	subs	r1, r4, r0
 800acea:	4628      	mov	r0, r5
 800acec:	f000 fad8 	bl	800b2a0 <_sbrk_r>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d1f2      	bne.n	800acda <sbrk_aligned+0x22>
 800acf4:	e7ef      	b.n	800acd6 <sbrk_aligned+0x1e>
 800acf6:	bf00      	nop
 800acf8:	2000158c 	.word	0x2000158c

0800acfc <_malloc_r>:
 800acfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad00:	1ccd      	adds	r5, r1, #3
 800ad02:	f025 0503 	bic.w	r5, r5, #3
 800ad06:	3508      	adds	r5, #8
 800ad08:	2d0c      	cmp	r5, #12
 800ad0a:	bf38      	it	cc
 800ad0c:	250c      	movcc	r5, #12
 800ad0e:	2d00      	cmp	r5, #0
 800ad10:	4606      	mov	r6, r0
 800ad12:	db01      	blt.n	800ad18 <_malloc_r+0x1c>
 800ad14:	42a9      	cmp	r1, r5
 800ad16:	d904      	bls.n	800ad22 <_malloc_r+0x26>
 800ad18:	230c      	movs	r3, #12
 800ad1a:	6033      	str	r3, [r6, #0]
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adf8 <_malloc_r+0xfc>
 800ad26:	f000 f869 	bl	800adfc <__malloc_lock>
 800ad2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2e:	461c      	mov	r4, r3
 800ad30:	bb44      	cbnz	r4, 800ad84 <_malloc_r+0x88>
 800ad32:	4629      	mov	r1, r5
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff ffbf 	bl	800acb8 <sbrk_aligned>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	d158      	bne.n	800adf2 <_malloc_r+0xf6>
 800ad40:	f8d8 4000 	ldr.w	r4, [r8]
 800ad44:	4627      	mov	r7, r4
 800ad46:	2f00      	cmp	r7, #0
 800ad48:	d143      	bne.n	800add2 <_malloc_r+0xd6>
 800ad4a:	2c00      	cmp	r4, #0
 800ad4c:	d04b      	beq.n	800ade6 <_malloc_r+0xea>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	4639      	mov	r1, r7
 800ad52:	4630      	mov	r0, r6
 800ad54:	eb04 0903 	add.w	r9, r4, r3
 800ad58:	f000 faa2 	bl	800b2a0 <_sbrk_r>
 800ad5c:	4581      	cmp	r9, r0
 800ad5e:	d142      	bne.n	800ade6 <_malloc_r+0xea>
 800ad60:	6821      	ldr	r1, [r4, #0]
 800ad62:	1a6d      	subs	r5, r5, r1
 800ad64:	4629      	mov	r1, r5
 800ad66:	4630      	mov	r0, r6
 800ad68:	f7ff ffa6 	bl	800acb8 <sbrk_aligned>
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d03a      	beq.n	800ade6 <_malloc_r+0xea>
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	442b      	add	r3, r5
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	f8d8 3000 	ldr.w	r3, [r8]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	bb62      	cbnz	r2, 800add8 <_malloc_r+0xdc>
 800ad7e:	f8c8 7000 	str.w	r7, [r8]
 800ad82:	e00f      	b.n	800ada4 <_malloc_r+0xa8>
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	1b52      	subs	r2, r2, r5
 800ad88:	d420      	bmi.n	800adcc <_malloc_r+0xd0>
 800ad8a:	2a0b      	cmp	r2, #11
 800ad8c:	d917      	bls.n	800adbe <_malloc_r+0xc2>
 800ad8e:	1961      	adds	r1, r4, r5
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	6025      	str	r5, [r4, #0]
 800ad94:	bf18      	it	ne
 800ad96:	6059      	strne	r1, [r3, #4]
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	bf08      	it	eq
 800ad9c:	f8c8 1000 	streq.w	r1, [r8]
 800ada0:	5162      	str	r2, [r4, r5]
 800ada2:	604b      	str	r3, [r1, #4]
 800ada4:	4630      	mov	r0, r6
 800ada6:	f000 f82f 	bl	800ae08 <__malloc_unlock>
 800adaa:	f104 000b 	add.w	r0, r4, #11
 800adae:	1d23      	adds	r3, r4, #4
 800adb0:	f020 0007 	bic.w	r0, r0, #7
 800adb4:	1ac2      	subs	r2, r0, r3
 800adb6:	bf1c      	itt	ne
 800adb8:	1a1b      	subne	r3, r3, r0
 800adba:	50a3      	strne	r3, [r4, r2]
 800adbc:	e7af      	b.n	800ad1e <_malloc_r+0x22>
 800adbe:	6862      	ldr	r2, [r4, #4]
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	bf0c      	ite	eq
 800adc4:	f8c8 2000 	streq.w	r2, [r8]
 800adc8:	605a      	strne	r2, [r3, #4]
 800adca:	e7eb      	b.n	800ada4 <_malloc_r+0xa8>
 800adcc:	4623      	mov	r3, r4
 800adce:	6864      	ldr	r4, [r4, #4]
 800add0:	e7ae      	b.n	800ad30 <_malloc_r+0x34>
 800add2:	463c      	mov	r4, r7
 800add4:	687f      	ldr	r7, [r7, #4]
 800add6:	e7b6      	b.n	800ad46 <_malloc_r+0x4a>
 800add8:	461a      	mov	r2, r3
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	42a3      	cmp	r3, r4
 800adde:	d1fb      	bne.n	800add8 <_malloc_r+0xdc>
 800ade0:	2300      	movs	r3, #0
 800ade2:	6053      	str	r3, [r2, #4]
 800ade4:	e7de      	b.n	800ada4 <_malloc_r+0xa8>
 800ade6:	230c      	movs	r3, #12
 800ade8:	6033      	str	r3, [r6, #0]
 800adea:	4630      	mov	r0, r6
 800adec:	f000 f80c 	bl	800ae08 <__malloc_unlock>
 800adf0:	e794      	b.n	800ad1c <_malloc_r+0x20>
 800adf2:	6005      	str	r5, [r0, #0]
 800adf4:	e7d6      	b.n	800ada4 <_malloc_r+0xa8>
 800adf6:	bf00      	nop
 800adf8:	20001590 	.word	0x20001590

0800adfc <__malloc_lock>:
 800adfc:	4801      	ldr	r0, [pc, #4]	@ (800ae04 <__malloc_lock+0x8>)
 800adfe:	f000 ba9c 	b.w	800b33a <__retarget_lock_acquire_recursive>
 800ae02:	bf00      	nop
 800ae04:	200016d4 	.word	0x200016d4

0800ae08 <__malloc_unlock>:
 800ae08:	4801      	ldr	r0, [pc, #4]	@ (800ae10 <__malloc_unlock+0x8>)
 800ae0a:	f000 ba97 	b.w	800b33c <__retarget_lock_release_recursive>
 800ae0e:	bf00      	nop
 800ae10:	200016d4 	.word	0x200016d4

0800ae14 <std>:
 800ae14:	2300      	movs	r3, #0
 800ae16:	b510      	push	{r4, lr}
 800ae18:	4604      	mov	r4, r0
 800ae1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae22:	6083      	str	r3, [r0, #8]
 800ae24:	8181      	strh	r1, [r0, #12]
 800ae26:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae28:	81c2      	strh	r2, [r0, #14]
 800ae2a:	6183      	str	r3, [r0, #24]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	2208      	movs	r2, #8
 800ae30:	305c      	adds	r0, #92	@ 0x5c
 800ae32:	f000 f9f9 	bl	800b228 <memset>
 800ae36:	4b0d      	ldr	r3, [pc, #52]	@ (800ae6c <std+0x58>)
 800ae38:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <std+0x5c>)
 800ae3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae74 <std+0x60>)
 800ae40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae42:	4b0d      	ldr	r3, [pc, #52]	@ (800ae78 <std+0x64>)
 800ae44:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae46:	4b0d      	ldr	r3, [pc, #52]	@ (800ae7c <std+0x68>)
 800ae48:	6224      	str	r4, [r4, #32]
 800ae4a:	429c      	cmp	r4, r3
 800ae4c:	d006      	beq.n	800ae5c <std+0x48>
 800ae4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae52:	4294      	cmp	r4, r2
 800ae54:	d002      	beq.n	800ae5c <std+0x48>
 800ae56:	33d0      	adds	r3, #208	@ 0xd0
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	d105      	bne.n	800ae68 <std+0x54>
 800ae5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae64:	f000 ba68 	b.w	800b338 <__retarget_lock_init_recursive>
 800ae68:	bd10      	pop	{r4, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800b079 	.word	0x0800b079
 800ae70:	0800b09b 	.word	0x0800b09b
 800ae74:	0800b0d3 	.word	0x0800b0d3
 800ae78:	0800b0f7 	.word	0x0800b0f7
 800ae7c:	20001594 	.word	0x20001594

0800ae80 <stdio_exit_handler>:
 800ae80:	4a02      	ldr	r2, [pc, #8]	@ (800ae8c <stdio_exit_handler+0xc>)
 800ae82:	4903      	ldr	r1, [pc, #12]	@ (800ae90 <stdio_exit_handler+0x10>)
 800ae84:	4803      	ldr	r0, [pc, #12]	@ (800ae94 <stdio_exit_handler+0x14>)
 800ae86:	f000 b869 	b.w	800af5c <_fwalk_sglue>
 800ae8a:	bf00      	nop
 800ae8c:	20000924 	.word	0x20000924
 800ae90:	0800ba79 	.word	0x0800ba79
 800ae94:	20000934 	.word	0x20000934

0800ae98 <cleanup_stdio>:
 800ae98:	6841      	ldr	r1, [r0, #4]
 800ae9a:	4b0c      	ldr	r3, [pc, #48]	@ (800aecc <cleanup_stdio+0x34>)
 800ae9c:	4299      	cmp	r1, r3
 800ae9e:	b510      	push	{r4, lr}
 800aea0:	4604      	mov	r4, r0
 800aea2:	d001      	beq.n	800aea8 <cleanup_stdio+0x10>
 800aea4:	f000 fde8 	bl	800ba78 <_fflush_r>
 800aea8:	68a1      	ldr	r1, [r4, #8]
 800aeaa:	4b09      	ldr	r3, [pc, #36]	@ (800aed0 <cleanup_stdio+0x38>)
 800aeac:	4299      	cmp	r1, r3
 800aeae:	d002      	beq.n	800aeb6 <cleanup_stdio+0x1e>
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fde1 	bl	800ba78 <_fflush_r>
 800aeb6:	68e1      	ldr	r1, [r4, #12]
 800aeb8:	4b06      	ldr	r3, [pc, #24]	@ (800aed4 <cleanup_stdio+0x3c>)
 800aeba:	4299      	cmp	r1, r3
 800aebc:	d004      	beq.n	800aec8 <cleanup_stdio+0x30>
 800aebe:	4620      	mov	r0, r4
 800aec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec4:	f000 bdd8 	b.w	800ba78 <_fflush_r>
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	bf00      	nop
 800aecc:	20001594 	.word	0x20001594
 800aed0:	200015fc 	.word	0x200015fc
 800aed4:	20001664 	.word	0x20001664

0800aed8 <global_stdio_init.part.0>:
 800aed8:	b510      	push	{r4, lr}
 800aeda:	4b0b      	ldr	r3, [pc, #44]	@ (800af08 <global_stdio_init.part.0+0x30>)
 800aedc:	4c0b      	ldr	r4, [pc, #44]	@ (800af0c <global_stdio_init.part.0+0x34>)
 800aede:	4a0c      	ldr	r2, [pc, #48]	@ (800af10 <global_stdio_init.part.0+0x38>)
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	4620      	mov	r0, r4
 800aee4:	2200      	movs	r2, #0
 800aee6:	2104      	movs	r1, #4
 800aee8:	f7ff ff94 	bl	800ae14 <std>
 800aeec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aef0:	2201      	movs	r2, #1
 800aef2:	2109      	movs	r1, #9
 800aef4:	f7ff ff8e 	bl	800ae14 <std>
 800aef8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aefc:	2202      	movs	r2, #2
 800aefe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af02:	2112      	movs	r1, #18
 800af04:	f7ff bf86 	b.w	800ae14 <std>
 800af08:	200016cc 	.word	0x200016cc
 800af0c:	20001594 	.word	0x20001594
 800af10:	0800ae81 	.word	0x0800ae81

0800af14 <__sfp_lock_acquire>:
 800af14:	4801      	ldr	r0, [pc, #4]	@ (800af1c <__sfp_lock_acquire+0x8>)
 800af16:	f000 ba10 	b.w	800b33a <__retarget_lock_acquire_recursive>
 800af1a:	bf00      	nop
 800af1c:	200016d5 	.word	0x200016d5

0800af20 <__sfp_lock_release>:
 800af20:	4801      	ldr	r0, [pc, #4]	@ (800af28 <__sfp_lock_release+0x8>)
 800af22:	f000 ba0b 	b.w	800b33c <__retarget_lock_release_recursive>
 800af26:	bf00      	nop
 800af28:	200016d5 	.word	0x200016d5

0800af2c <__sinit>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	4604      	mov	r4, r0
 800af30:	f7ff fff0 	bl	800af14 <__sfp_lock_acquire>
 800af34:	6a23      	ldr	r3, [r4, #32]
 800af36:	b11b      	cbz	r3, 800af40 <__sinit+0x14>
 800af38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af3c:	f7ff bff0 	b.w	800af20 <__sfp_lock_release>
 800af40:	4b04      	ldr	r3, [pc, #16]	@ (800af54 <__sinit+0x28>)
 800af42:	6223      	str	r3, [r4, #32]
 800af44:	4b04      	ldr	r3, [pc, #16]	@ (800af58 <__sinit+0x2c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1f5      	bne.n	800af38 <__sinit+0xc>
 800af4c:	f7ff ffc4 	bl	800aed8 <global_stdio_init.part.0>
 800af50:	e7f2      	b.n	800af38 <__sinit+0xc>
 800af52:	bf00      	nop
 800af54:	0800ae99 	.word	0x0800ae99
 800af58:	200016cc 	.word	0x200016cc

0800af5c <_fwalk_sglue>:
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af60:	4607      	mov	r7, r0
 800af62:	4688      	mov	r8, r1
 800af64:	4614      	mov	r4, r2
 800af66:	2600      	movs	r6, #0
 800af68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af6c:	f1b9 0901 	subs.w	r9, r9, #1
 800af70:	d505      	bpl.n	800af7e <_fwalk_sglue+0x22>
 800af72:	6824      	ldr	r4, [r4, #0]
 800af74:	2c00      	cmp	r4, #0
 800af76:	d1f7      	bne.n	800af68 <_fwalk_sglue+0xc>
 800af78:	4630      	mov	r0, r6
 800af7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7e:	89ab      	ldrh	r3, [r5, #12]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d907      	bls.n	800af94 <_fwalk_sglue+0x38>
 800af84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af88:	3301      	adds	r3, #1
 800af8a:	d003      	beq.n	800af94 <_fwalk_sglue+0x38>
 800af8c:	4629      	mov	r1, r5
 800af8e:	4638      	mov	r0, r7
 800af90:	47c0      	blx	r8
 800af92:	4306      	orrs	r6, r0
 800af94:	3568      	adds	r5, #104	@ 0x68
 800af96:	e7e9      	b.n	800af6c <_fwalk_sglue+0x10>

0800af98 <iprintf>:
 800af98:	b40f      	push	{r0, r1, r2, r3}
 800af9a:	b507      	push	{r0, r1, r2, lr}
 800af9c:	4906      	ldr	r1, [pc, #24]	@ (800afb8 <iprintf+0x20>)
 800af9e:	ab04      	add	r3, sp, #16
 800afa0:	6808      	ldr	r0, [r1, #0]
 800afa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa6:	6881      	ldr	r1, [r0, #8]
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	f000 fa3d 	bl	800b428 <_vfiprintf_r>
 800afae:	b003      	add	sp, #12
 800afb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afb4:	b004      	add	sp, #16
 800afb6:	4770      	bx	lr
 800afb8:	20000930 	.word	0x20000930

0800afbc <_puts_r>:
 800afbc:	6a03      	ldr	r3, [r0, #32]
 800afbe:	b570      	push	{r4, r5, r6, lr}
 800afc0:	6884      	ldr	r4, [r0, #8]
 800afc2:	4605      	mov	r5, r0
 800afc4:	460e      	mov	r6, r1
 800afc6:	b90b      	cbnz	r3, 800afcc <_puts_r+0x10>
 800afc8:	f7ff ffb0 	bl	800af2c <__sinit>
 800afcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afce:	07db      	lsls	r3, r3, #31
 800afd0:	d405      	bmi.n	800afde <_puts_r+0x22>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	0598      	lsls	r0, r3, #22
 800afd6:	d402      	bmi.n	800afde <_puts_r+0x22>
 800afd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afda:	f000 f9ae 	bl	800b33a <__retarget_lock_acquire_recursive>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	0719      	lsls	r1, r3, #28
 800afe2:	d502      	bpl.n	800afea <_puts_r+0x2e>
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d135      	bne.n	800b056 <_puts_r+0x9a>
 800afea:	4621      	mov	r1, r4
 800afec:	4628      	mov	r0, r5
 800afee:	f000 f8c5 	bl	800b17c <__swsetup_r>
 800aff2:	b380      	cbz	r0, 800b056 <_puts_r+0x9a>
 800aff4:	f04f 35ff 	mov.w	r5, #4294967295
 800aff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800affa:	07da      	lsls	r2, r3, #31
 800affc:	d405      	bmi.n	800b00a <_puts_r+0x4e>
 800affe:	89a3      	ldrh	r3, [r4, #12]
 800b000:	059b      	lsls	r3, r3, #22
 800b002:	d402      	bmi.n	800b00a <_puts_r+0x4e>
 800b004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b006:	f000 f999 	bl	800b33c <__retarget_lock_release_recursive>
 800b00a:	4628      	mov	r0, r5
 800b00c:	bd70      	pop	{r4, r5, r6, pc}
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da04      	bge.n	800b01c <_puts_r+0x60>
 800b012:	69a2      	ldr	r2, [r4, #24]
 800b014:	429a      	cmp	r2, r3
 800b016:	dc17      	bgt.n	800b048 <_puts_r+0x8c>
 800b018:	290a      	cmp	r1, #10
 800b01a:	d015      	beq.n	800b048 <_puts_r+0x8c>
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	6022      	str	r2, [r4, #0]
 800b022:	7019      	strb	r1, [r3, #0]
 800b024:	68a3      	ldr	r3, [r4, #8]
 800b026:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b02a:	3b01      	subs	r3, #1
 800b02c:	60a3      	str	r3, [r4, #8]
 800b02e:	2900      	cmp	r1, #0
 800b030:	d1ed      	bne.n	800b00e <_puts_r+0x52>
 800b032:	2b00      	cmp	r3, #0
 800b034:	da11      	bge.n	800b05a <_puts_r+0x9e>
 800b036:	4622      	mov	r2, r4
 800b038:	210a      	movs	r1, #10
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 f85f 	bl	800b0fe <__swbuf_r>
 800b040:	3001      	adds	r0, #1
 800b042:	d0d7      	beq.n	800aff4 <_puts_r+0x38>
 800b044:	250a      	movs	r5, #10
 800b046:	e7d7      	b.n	800aff8 <_puts_r+0x3c>
 800b048:	4622      	mov	r2, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f857 	bl	800b0fe <__swbuf_r>
 800b050:	3001      	adds	r0, #1
 800b052:	d1e7      	bne.n	800b024 <_puts_r+0x68>
 800b054:	e7ce      	b.n	800aff4 <_puts_r+0x38>
 800b056:	3e01      	subs	r6, #1
 800b058:	e7e4      	b.n	800b024 <_puts_r+0x68>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	6022      	str	r2, [r4, #0]
 800b060:	220a      	movs	r2, #10
 800b062:	701a      	strb	r2, [r3, #0]
 800b064:	e7ee      	b.n	800b044 <_puts_r+0x88>
	...

0800b068 <puts>:
 800b068:	4b02      	ldr	r3, [pc, #8]	@ (800b074 <puts+0xc>)
 800b06a:	4601      	mov	r1, r0
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	f7ff bfa5 	b.w	800afbc <_puts_r>
 800b072:	bf00      	nop
 800b074:	20000930 	.word	0x20000930

0800b078 <__sread>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	460c      	mov	r4, r1
 800b07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b080:	f000 f8fc 	bl	800b27c <_read_r>
 800b084:	2800      	cmp	r0, #0
 800b086:	bfab      	itete	ge
 800b088:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b08a:	89a3      	ldrhlt	r3, [r4, #12]
 800b08c:	181b      	addge	r3, r3, r0
 800b08e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b092:	bfac      	ite	ge
 800b094:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b096:	81a3      	strhlt	r3, [r4, #12]
 800b098:	bd10      	pop	{r4, pc}

0800b09a <__swrite>:
 800b09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09e:	461f      	mov	r7, r3
 800b0a0:	898b      	ldrh	r3, [r1, #12]
 800b0a2:	05db      	lsls	r3, r3, #23
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	d505      	bpl.n	800b0b8 <__swrite+0x1e>
 800b0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f000 f8d0 	bl	800b258 <_lseek_r>
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	4632      	mov	r2, r6
 800b0c6:	463b      	mov	r3, r7
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ce:	f000 b8f7 	b.w	800b2c0 <_write_r>

0800b0d2 <__sseek>:
 800b0d2:	b510      	push	{r4, lr}
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0da:	f000 f8bd 	bl	800b258 <_lseek_r>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	bf15      	itete	ne
 800b0e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b0e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b0ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0ee:	81a3      	strheq	r3, [r4, #12]
 800b0f0:	bf18      	it	ne
 800b0f2:	81a3      	strhne	r3, [r4, #12]
 800b0f4:	bd10      	pop	{r4, pc}

0800b0f6 <__sclose>:
 800b0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fa:	f000 b89d 	b.w	800b238 <_close_r>

0800b0fe <__swbuf_r>:
 800b0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b100:	460e      	mov	r6, r1
 800b102:	4614      	mov	r4, r2
 800b104:	4605      	mov	r5, r0
 800b106:	b118      	cbz	r0, 800b110 <__swbuf_r+0x12>
 800b108:	6a03      	ldr	r3, [r0, #32]
 800b10a:	b90b      	cbnz	r3, 800b110 <__swbuf_r+0x12>
 800b10c:	f7ff ff0e 	bl	800af2c <__sinit>
 800b110:	69a3      	ldr	r3, [r4, #24]
 800b112:	60a3      	str	r3, [r4, #8]
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	071a      	lsls	r2, r3, #28
 800b118:	d501      	bpl.n	800b11e <__swbuf_r+0x20>
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	b943      	cbnz	r3, 800b130 <__swbuf_r+0x32>
 800b11e:	4621      	mov	r1, r4
 800b120:	4628      	mov	r0, r5
 800b122:	f000 f82b 	bl	800b17c <__swsetup_r>
 800b126:	b118      	cbz	r0, 800b130 <__swbuf_r+0x32>
 800b128:	f04f 37ff 	mov.w	r7, #4294967295
 800b12c:	4638      	mov	r0, r7
 800b12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	6922      	ldr	r2, [r4, #16]
 800b134:	1a98      	subs	r0, r3, r2
 800b136:	6963      	ldr	r3, [r4, #20]
 800b138:	b2f6      	uxtb	r6, r6
 800b13a:	4283      	cmp	r3, r0
 800b13c:	4637      	mov	r7, r6
 800b13e:	dc05      	bgt.n	800b14c <__swbuf_r+0x4e>
 800b140:	4621      	mov	r1, r4
 800b142:	4628      	mov	r0, r5
 800b144:	f000 fc98 	bl	800ba78 <_fflush_r>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d1ed      	bne.n	800b128 <__swbuf_r+0x2a>
 800b14c:	68a3      	ldr	r3, [r4, #8]
 800b14e:	3b01      	subs	r3, #1
 800b150:	60a3      	str	r3, [r4, #8]
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	701e      	strb	r6, [r3, #0]
 800b15a:	6962      	ldr	r2, [r4, #20]
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	429a      	cmp	r2, r3
 800b160:	d004      	beq.n	800b16c <__swbuf_r+0x6e>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	07db      	lsls	r3, r3, #31
 800b166:	d5e1      	bpl.n	800b12c <__swbuf_r+0x2e>
 800b168:	2e0a      	cmp	r6, #10
 800b16a:	d1df      	bne.n	800b12c <__swbuf_r+0x2e>
 800b16c:	4621      	mov	r1, r4
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 fc82 	bl	800ba78 <_fflush_r>
 800b174:	2800      	cmp	r0, #0
 800b176:	d0d9      	beq.n	800b12c <__swbuf_r+0x2e>
 800b178:	e7d6      	b.n	800b128 <__swbuf_r+0x2a>
	...

0800b17c <__swsetup_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4b29      	ldr	r3, [pc, #164]	@ (800b224 <__swsetup_r+0xa8>)
 800b180:	4605      	mov	r5, r0
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	460c      	mov	r4, r1
 800b186:	b118      	cbz	r0, 800b190 <__swsetup_r+0x14>
 800b188:	6a03      	ldr	r3, [r0, #32]
 800b18a:	b90b      	cbnz	r3, 800b190 <__swsetup_r+0x14>
 800b18c:	f7ff fece 	bl	800af2c <__sinit>
 800b190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b194:	0719      	lsls	r1, r3, #28
 800b196:	d422      	bmi.n	800b1de <__swsetup_r+0x62>
 800b198:	06da      	lsls	r2, r3, #27
 800b19a:	d407      	bmi.n	800b1ac <__swsetup_r+0x30>
 800b19c:	2209      	movs	r2, #9
 800b19e:	602a      	str	r2, [r5, #0]
 800b1a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a4:	81a3      	strh	r3, [r4, #12]
 800b1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1aa:	e033      	b.n	800b214 <__swsetup_r+0x98>
 800b1ac:	0758      	lsls	r0, r3, #29
 800b1ae:	d512      	bpl.n	800b1d6 <__swsetup_r+0x5a>
 800b1b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1b2:	b141      	cbz	r1, 800b1c6 <__swsetup_r+0x4a>
 800b1b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1b8:	4299      	cmp	r1, r3
 800b1ba:	d002      	beq.n	800b1c2 <__swsetup_r+0x46>
 800b1bc:	4628      	mov	r0, r5
 800b1be:	f000 f8bf 	bl	800b340 <_free_r>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	6923      	ldr	r3, [r4, #16]
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	f043 0308 	orr.w	r3, r3, #8
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	6923      	ldr	r3, [r4, #16]
 800b1e0:	b94b      	cbnz	r3, 800b1f6 <__swsetup_r+0x7a>
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1ec:	d003      	beq.n	800b1f6 <__swsetup_r+0x7a>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 fc8f 	bl	800bb14 <__smakebuf_r>
 800b1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fa:	f013 0201 	ands.w	r2, r3, #1
 800b1fe:	d00a      	beq.n	800b216 <__swsetup_r+0x9a>
 800b200:	2200      	movs	r2, #0
 800b202:	60a2      	str	r2, [r4, #8]
 800b204:	6962      	ldr	r2, [r4, #20]
 800b206:	4252      	negs	r2, r2
 800b208:	61a2      	str	r2, [r4, #24]
 800b20a:	6922      	ldr	r2, [r4, #16]
 800b20c:	b942      	cbnz	r2, 800b220 <__swsetup_r+0xa4>
 800b20e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b212:	d1c5      	bne.n	800b1a0 <__swsetup_r+0x24>
 800b214:	bd38      	pop	{r3, r4, r5, pc}
 800b216:	0799      	lsls	r1, r3, #30
 800b218:	bf58      	it	pl
 800b21a:	6962      	ldrpl	r2, [r4, #20]
 800b21c:	60a2      	str	r2, [r4, #8]
 800b21e:	e7f4      	b.n	800b20a <__swsetup_r+0x8e>
 800b220:	2000      	movs	r0, #0
 800b222:	e7f7      	b.n	800b214 <__swsetup_r+0x98>
 800b224:	20000930 	.word	0x20000930

0800b228 <memset>:
 800b228:	4402      	add	r2, r0
 800b22a:	4603      	mov	r3, r0
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d100      	bne.n	800b232 <memset+0xa>
 800b230:	4770      	bx	lr
 800b232:	f803 1b01 	strb.w	r1, [r3], #1
 800b236:	e7f9      	b.n	800b22c <memset+0x4>

0800b238 <_close_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d06      	ldr	r5, [pc, #24]	@ (800b254 <_close_r+0x1c>)
 800b23c:	2300      	movs	r3, #0
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	602b      	str	r3, [r5, #0]
 800b244:	f000 fdf8 	bl	800be38 <_close>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d102      	bne.n	800b252 <_close_r+0x1a>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	b103      	cbz	r3, 800b252 <_close_r+0x1a>
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	200016d0 	.word	0x200016d0

0800b258 <_lseek_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d07      	ldr	r5, [pc, #28]	@ (800b278 <_lseek_r+0x20>)
 800b25c:	4604      	mov	r4, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	4611      	mov	r1, r2
 800b262:	2200      	movs	r2, #0
 800b264:	602a      	str	r2, [r5, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	f000 fdfe 	bl	800be68 <_lseek>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_lseek_r+0x1e>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_lseek_r+0x1e>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	200016d0 	.word	0x200016d0

0800b27c <_read_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4d07      	ldr	r5, [pc, #28]	@ (800b29c <_read_r+0x20>)
 800b280:	4604      	mov	r4, r0
 800b282:	4608      	mov	r0, r1
 800b284:	4611      	mov	r1, r2
 800b286:	2200      	movs	r2, #0
 800b288:	602a      	str	r2, [r5, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f000 fdf4 	bl	800be78 <_read>
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	d102      	bne.n	800b29a <_read_r+0x1e>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	b103      	cbz	r3, 800b29a <_read_r+0x1e>
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	200016d0 	.word	0x200016d0

0800b2a0 <_sbrk_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4d06      	ldr	r5, [pc, #24]	@ (800b2bc <_sbrk_r+0x1c>)
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	f7f6 fa72 	bl	8001794 <_sbrk>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_sbrk_r+0x1a>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_sbrk_r+0x1a>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	200016d0 	.word	0x200016d0

0800b2c0 <_write_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d07      	ldr	r5, [pc, #28]	@ (800b2e0 <_write_r+0x20>)
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	4608      	mov	r0, r1
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	602a      	str	r2, [r5, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f000 fdda 	bl	800be88 <_write>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_write_r+0x1e>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_write_r+0x1e>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	200016d0 	.word	0x200016d0

0800b2e4 <__errno>:
 800b2e4:	4b01      	ldr	r3, [pc, #4]	@ (800b2ec <__errno+0x8>)
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	20000930 	.word	0x20000930

0800b2f0 <__libc_init_array>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b328 <__libc_init_array+0x38>)
 800b2f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b32c <__libc_init_array+0x3c>)
 800b2f6:	1b64      	subs	r4, r4, r5
 800b2f8:	10a4      	asrs	r4, r4, #2
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	42a6      	cmp	r6, r4
 800b2fe:	d109      	bne.n	800b314 <__libc_init_array+0x24>
 800b300:	4d0b      	ldr	r5, [pc, #44]	@ (800b330 <__libc_init_array+0x40>)
 800b302:	4c0c      	ldr	r4, [pc, #48]	@ (800b334 <__libc_init_array+0x44>)
 800b304:	f000 fdc8 	bl	800be98 <_init>
 800b308:	1b64      	subs	r4, r4, r5
 800b30a:	10a4      	asrs	r4, r4, #2
 800b30c:	2600      	movs	r6, #0
 800b30e:	42a6      	cmp	r6, r4
 800b310:	d105      	bne.n	800b31e <__libc_init_array+0x2e>
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	f855 3b04 	ldr.w	r3, [r5], #4
 800b318:	4798      	blx	r3
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7ee      	b.n	800b2fc <__libc_init_array+0xc>
 800b31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b322:	4798      	blx	r3
 800b324:	3601      	adds	r6, #1
 800b326:	e7f2      	b.n	800b30e <__libc_init_array+0x1e>
 800b328:	080171cc 	.word	0x080171cc
 800b32c:	080171cc 	.word	0x080171cc
 800b330:	080171cc 	.word	0x080171cc
 800b334:	080171d0 	.word	0x080171d0

0800b338 <__retarget_lock_init_recursive>:
 800b338:	4770      	bx	lr

0800b33a <__retarget_lock_acquire_recursive>:
 800b33a:	4770      	bx	lr

0800b33c <__retarget_lock_release_recursive>:
 800b33c:	4770      	bx	lr
	...

0800b340 <_free_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	4605      	mov	r5, r0
 800b344:	2900      	cmp	r1, #0
 800b346:	d041      	beq.n	800b3cc <_free_r+0x8c>
 800b348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b34c:	1f0c      	subs	r4, r1, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	bfb8      	it	lt
 800b352:	18e4      	addlt	r4, r4, r3
 800b354:	f7ff fd52 	bl	800adfc <__malloc_lock>
 800b358:	4a1d      	ldr	r2, [pc, #116]	@ (800b3d0 <_free_r+0x90>)
 800b35a:	6813      	ldr	r3, [r2, #0]
 800b35c:	b933      	cbnz	r3, 800b36c <_free_r+0x2c>
 800b35e:	6063      	str	r3, [r4, #4]
 800b360:	6014      	str	r4, [r2, #0]
 800b362:	4628      	mov	r0, r5
 800b364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b368:	f7ff bd4e 	b.w	800ae08 <__malloc_unlock>
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d908      	bls.n	800b382 <_free_r+0x42>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	1821      	adds	r1, r4, r0
 800b374:	428b      	cmp	r3, r1
 800b376:	bf01      	itttt	eq
 800b378:	6819      	ldreq	r1, [r3, #0]
 800b37a:	685b      	ldreq	r3, [r3, #4]
 800b37c:	1809      	addeq	r1, r1, r0
 800b37e:	6021      	streq	r1, [r4, #0]
 800b380:	e7ed      	b.n	800b35e <_free_r+0x1e>
 800b382:	461a      	mov	r2, r3
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	b10b      	cbz	r3, 800b38c <_free_r+0x4c>
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d9fa      	bls.n	800b382 <_free_r+0x42>
 800b38c:	6811      	ldr	r1, [r2, #0]
 800b38e:	1850      	adds	r0, r2, r1
 800b390:	42a0      	cmp	r0, r4
 800b392:	d10b      	bne.n	800b3ac <_free_r+0x6c>
 800b394:	6820      	ldr	r0, [r4, #0]
 800b396:	4401      	add	r1, r0
 800b398:	1850      	adds	r0, r2, r1
 800b39a:	4283      	cmp	r3, r0
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	d1e0      	bne.n	800b362 <_free_r+0x22>
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	6053      	str	r3, [r2, #4]
 800b3a6:	4408      	add	r0, r1
 800b3a8:	6010      	str	r0, [r2, #0]
 800b3aa:	e7da      	b.n	800b362 <_free_r+0x22>
 800b3ac:	d902      	bls.n	800b3b4 <_free_r+0x74>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	e7d6      	b.n	800b362 <_free_r+0x22>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	1821      	adds	r1, r4, r0
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	bf04      	itt	eq
 800b3bc:	6819      	ldreq	r1, [r3, #0]
 800b3be:	685b      	ldreq	r3, [r3, #4]
 800b3c0:	6063      	str	r3, [r4, #4]
 800b3c2:	bf04      	itt	eq
 800b3c4:	1809      	addeq	r1, r1, r0
 800b3c6:	6021      	streq	r1, [r4, #0]
 800b3c8:	6054      	str	r4, [r2, #4]
 800b3ca:	e7ca      	b.n	800b362 <_free_r+0x22>
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20001590 	.word	0x20001590

0800b3d4 <__sfputc_r>:
 800b3d4:	6893      	ldr	r3, [r2, #8]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	b410      	push	{r4}
 800b3dc:	6093      	str	r3, [r2, #8]
 800b3de:	da08      	bge.n	800b3f2 <__sfputc_r+0x1e>
 800b3e0:	6994      	ldr	r4, [r2, #24]
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	db01      	blt.n	800b3ea <__sfputc_r+0x16>
 800b3e6:	290a      	cmp	r1, #10
 800b3e8:	d103      	bne.n	800b3f2 <__sfputc_r+0x1e>
 800b3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ee:	f7ff be86 	b.w	800b0fe <__swbuf_r>
 800b3f2:	6813      	ldr	r3, [r2, #0]
 800b3f4:	1c58      	adds	r0, r3, #1
 800b3f6:	6010      	str	r0, [r2, #0]
 800b3f8:	7019      	strb	r1, [r3, #0]
 800b3fa:	4608      	mov	r0, r1
 800b3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <__sfputs_r>:
 800b402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b404:	4606      	mov	r6, r0
 800b406:	460f      	mov	r7, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	18d5      	adds	r5, r2, r3
 800b40c:	42ac      	cmp	r4, r5
 800b40e:	d101      	bne.n	800b414 <__sfputs_r+0x12>
 800b410:	2000      	movs	r0, #0
 800b412:	e007      	b.n	800b424 <__sfputs_r+0x22>
 800b414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b418:	463a      	mov	r2, r7
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7ff ffda 	bl	800b3d4 <__sfputc_r>
 800b420:	1c43      	adds	r3, r0, #1
 800b422:	d1f3      	bne.n	800b40c <__sfputs_r+0xa>
 800b424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b428 <_vfiprintf_r>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	460d      	mov	r5, r1
 800b42e:	b09d      	sub	sp, #116	@ 0x74
 800b430:	4614      	mov	r4, r2
 800b432:	4698      	mov	r8, r3
 800b434:	4606      	mov	r6, r0
 800b436:	b118      	cbz	r0, 800b440 <_vfiprintf_r+0x18>
 800b438:	6a03      	ldr	r3, [r0, #32]
 800b43a:	b90b      	cbnz	r3, 800b440 <_vfiprintf_r+0x18>
 800b43c:	f7ff fd76 	bl	800af2c <__sinit>
 800b440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b442:	07d9      	lsls	r1, r3, #31
 800b444:	d405      	bmi.n	800b452 <_vfiprintf_r+0x2a>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	059a      	lsls	r2, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_vfiprintf_r+0x2a>
 800b44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b44e:	f7ff ff74 	bl	800b33a <__retarget_lock_acquire_recursive>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	071b      	lsls	r3, r3, #28
 800b456:	d501      	bpl.n	800b45c <_vfiprintf_r+0x34>
 800b458:	692b      	ldr	r3, [r5, #16]
 800b45a:	b99b      	cbnz	r3, 800b484 <_vfiprintf_r+0x5c>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4630      	mov	r0, r6
 800b460:	f7ff fe8c 	bl	800b17c <__swsetup_r>
 800b464:	b170      	cbz	r0, 800b484 <_vfiprintf_r+0x5c>
 800b466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b468:	07dc      	lsls	r4, r3, #31
 800b46a:	d504      	bpl.n	800b476 <_vfiprintf_r+0x4e>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	b01d      	add	sp, #116	@ 0x74
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	0598      	lsls	r0, r3, #22
 800b47a:	d4f7      	bmi.n	800b46c <_vfiprintf_r+0x44>
 800b47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b47e:	f7ff ff5d 	bl	800b33c <__retarget_lock_release_recursive>
 800b482:	e7f3      	b.n	800b46c <_vfiprintf_r+0x44>
 800b484:	2300      	movs	r3, #0
 800b486:	9309      	str	r3, [sp, #36]	@ 0x24
 800b488:	2320      	movs	r3, #32
 800b48a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b492:	2330      	movs	r3, #48	@ 0x30
 800b494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b644 <_vfiprintf_r+0x21c>
 800b498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b49c:	f04f 0901 	mov.w	r9, #1
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	469a      	mov	sl, r3
 800b4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a8:	b10a      	cbz	r2, 800b4ae <_vfiprintf_r+0x86>
 800b4aa:	2a25      	cmp	r2, #37	@ 0x25
 800b4ac:	d1f9      	bne.n	800b4a2 <_vfiprintf_r+0x7a>
 800b4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b2:	d00b      	beq.n	800b4cc <_vfiprintf_r+0xa4>
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ffa1 	bl	800b402 <__sfputs_r>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	f000 80a7 	beq.w	800b614 <_vfiprintf_r+0x1ec>
 800b4c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4c8:	445a      	add	r2, fp
 800b4ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 809f 	beq.w	800b614 <_vfiprintf_r+0x1ec>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e0:	f10a 0a01 	add.w	sl, sl, #1
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	9307      	str	r3, [sp, #28]
 800b4e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	2205      	movs	r2, #5
 800b4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f6:	4853      	ldr	r0, [pc, #332]	@ (800b644 <_vfiprintf_r+0x21c>)
 800b4f8:	f7f4 fe82 	bl	8000200 <memchr>
 800b4fc:	9a04      	ldr	r2, [sp, #16]
 800b4fe:	b9d8      	cbnz	r0, 800b538 <_vfiprintf_r+0x110>
 800b500:	06d1      	lsls	r1, r2, #27
 800b502:	bf44      	itt	mi
 800b504:	2320      	movmi	r3, #32
 800b506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b50a:	0713      	lsls	r3, r2, #28
 800b50c:	bf44      	itt	mi
 800b50e:	232b      	movmi	r3, #43	@ 0x2b
 800b510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b514:	f89a 3000 	ldrb.w	r3, [sl]
 800b518:	2b2a      	cmp	r3, #42	@ 0x2a
 800b51a:	d015      	beq.n	800b548 <_vfiprintf_r+0x120>
 800b51c:	9a07      	ldr	r2, [sp, #28]
 800b51e:	4654      	mov	r4, sl
 800b520:	2000      	movs	r0, #0
 800b522:	f04f 0c0a 	mov.w	ip, #10
 800b526:	4621      	mov	r1, r4
 800b528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b52c:	3b30      	subs	r3, #48	@ 0x30
 800b52e:	2b09      	cmp	r3, #9
 800b530:	d94b      	bls.n	800b5ca <_vfiprintf_r+0x1a2>
 800b532:	b1b0      	cbz	r0, 800b562 <_vfiprintf_r+0x13a>
 800b534:	9207      	str	r2, [sp, #28]
 800b536:	e014      	b.n	800b562 <_vfiprintf_r+0x13a>
 800b538:	eba0 0308 	sub.w	r3, r0, r8
 800b53c:	fa09 f303 	lsl.w	r3, r9, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	46a2      	mov	sl, r4
 800b546:	e7d2      	b.n	800b4ee <_vfiprintf_r+0xc6>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	1d19      	adds	r1, r3, #4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	9103      	str	r1, [sp, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfbb      	ittet	lt
 800b554:	425b      	neglt	r3, r3
 800b556:	f042 0202 	orrlt.w	r2, r2, #2
 800b55a:	9307      	strge	r3, [sp, #28]
 800b55c:	9307      	strlt	r3, [sp, #28]
 800b55e:	bfb8      	it	lt
 800b560:	9204      	strlt	r2, [sp, #16]
 800b562:	7823      	ldrb	r3, [r4, #0]
 800b564:	2b2e      	cmp	r3, #46	@ 0x2e
 800b566:	d10a      	bne.n	800b57e <_vfiprintf_r+0x156>
 800b568:	7863      	ldrb	r3, [r4, #1]
 800b56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b56c:	d132      	bne.n	800b5d4 <_vfiprintf_r+0x1ac>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	1d1a      	adds	r2, r3, #4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	9203      	str	r2, [sp, #12]
 800b576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b57a:	3402      	adds	r4, #2
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b654 <_vfiprintf_r+0x22c>
 800b582:	7821      	ldrb	r1, [r4, #0]
 800b584:	2203      	movs	r2, #3
 800b586:	4650      	mov	r0, sl
 800b588:	f7f4 fe3a 	bl	8000200 <memchr>
 800b58c:	b138      	cbz	r0, 800b59e <_vfiprintf_r+0x176>
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	eba0 000a 	sub.w	r0, r0, sl
 800b594:	2240      	movs	r2, #64	@ 0x40
 800b596:	4082      	lsls	r2, r0
 800b598:	4313      	orrs	r3, r2
 800b59a:	3401      	adds	r4, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a2:	4829      	ldr	r0, [pc, #164]	@ (800b648 <_vfiprintf_r+0x220>)
 800b5a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5a8:	2206      	movs	r2, #6
 800b5aa:	f7f4 fe29 	bl	8000200 <memchr>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d03f      	beq.n	800b632 <_vfiprintf_r+0x20a>
 800b5b2:	4b26      	ldr	r3, [pc, #152]	@ (800b64c <_vfiprintf_r+0x224>)
 800b5b4:	bb1b      	cbnz	r3, 800b5fe <_vfiprintf_r+0x1d6>
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	3307      	adds	r3, #7
 800b5ba:	f023 0307 	bic.w	r3, r3, #7
 800b5be:	3308      	adds	r3, #8
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c4:	443b      	add	r3, r7
 800b5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c8:	e76a      	b.n	800b4a0 <_vfiprintf_r+0x78>
 800b5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	2001      	movs	r0, #1
 800b5d2:	e7a8      	b.n	800b526 <_vfiprintf_r+0xfe>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	9305      	str	r3, [sp, #20]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f04f 0c0a 	mov.w	ip, #10
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e6:	3a30      	subs	r2, #48	@ 0x30
 800b5e8:	2a09      	cmp	r2, #9
 800b5ea:	d903      	bls.n	800b5f4 <_vfiprintf_r+0x1cc>
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0c6      	beq.n	800b57e <_vfiprintf_r+0x156>
 800b5f0:	9105      	str	r1, [sp, #20]
 800b5f2:	e7c4      	b.n	800b57e <_vfiprintf_r+0x156>
 800b5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e7f0      	b.n	800b5e0 <_vfiprintf_r+0x1b8>
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	462a      	mov	r2, r5
 800b604:	4b12      	ldr	r3, [pc, #72]	@ (800b650 <_vfiprintf_r+0x228>)
 800b606:	a904      	add	r1, sp, #16
 800b608:	4630      	mov	r0, r6
 800b60a:	f3af 8000 	nop.w
 800b60e:	4607      	mov	r7, r0
 800b610:	1c78      	adds	r0, r7, #1
 800b612:	d1d6      	bne.n	800b5c2 <_vfiprintf_r+0x19a>
 800b614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b616:	07d9      	lsls	r1, r3, #31
 800b618:	d405      	bmi.n	800b626 <_vfiprintf_r+0x1fe>
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	059a      	lsls	r2, r3, #22
 800b61e:	d402      	bmi.n	800b626 <_vfiprintf_r+0x1fe>
 800b620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b622:	f7ff fe8b 	bl	800b33c <__retarget_lock_release_recursive>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	065b      	lsls	r3, r3, #25
 800b62a:	f53f af1f 	bmi.w	800b46c <_vfiprintf_r+0x44>
 800b62e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b630:	e71e      	b.n	800b470 <_vfiprintf_r+0x48>
 800b632:	ab03      	add	r3, sp, #12
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	462a      	mov	r2, r5
 800b638:	4b05      	ldr	r3, [pc, #20]	@ (800b650 <_vfiprintf_r+0x228>)
 800b63a:	a904      	add	r1, sp, #16
 800b63c:	4630      	mov	r0, r6
 800b63e:	f000 f879 	bl	800b734 <_printf_i>
 800b642:	e7e4      	b.n	800b60e <_vfiprintf_r+0x1e6>
 800b644:	08017178 	.word	0x08017178
 800b648:	08017182 	.word	0x08017182
 800b64c:	00000000 	.word	0x00000000
 800b650:	0800b403 	.word	0x0800b403
 800b654:	0801717e 	.word	0x0801717e

0800b658 <_printf_common>:
 800b658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	4616      	mov	r6, r2
 800b65e:	4698      	mov	r8, r3
 800b660:	688a      	ldr	r2, [r1, #8]
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b668:	4293      	cmp	r3, r2
 800b66a:	bfb8      	it	lt
 800b66c:	4613      	movlt	r3, r2
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b674:	4607      	mov	r7, r0
 800b676:	460c      	mov	r4, r1
 800b678:	b10a      	cbz	r2, 800b67e <_printf_common+0x26>
 800b67a:	3301      	adds	r3, #1
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	0699      	lsls	r1, r3, #26
 800b682:	bf42      	ittt	mi
 800b684:	6833      	ldrmi	r3, [r6, #0]
 800b686:	3302      	addmi	r3, #2
 800b688:	6033      	strmi	r3, [r6, #0]
 800b68a:	6825      	ldr	r5, [r4, #0]
 800b68c:	f015 0506 	ands.w	r5, r5, #6
 800b690:	d106      	bne.n	800b6a0 <_printf_common+0x48>
 800b692:	f104 0a19 	add.w	sl, r4, #25
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	6832      	ldr	r2, [r6, #0]
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	dc26      	bgt.n	800b6ee <_printf_common+0x96>
 800b6a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6a4:	6822      	ldr	r2, [r4, #0]
 800b6a6:	3b00      	subs	r3, #0
 800b6a8:	bf18      	it	ne
 800b6aa:	2301      	movne	r3, #1
 800b6ac:	0692      	lsls	r2, r2, #26
 800b6ae:	d42b      	bmi.n	800b708 <_printf_common+0xb0>
 800b6b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6b4:	4641      	mov	r1, r8
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	47c8      	blx	r9
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d01e      	beq.n	800b6fc <_printf_common+0xa4>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	6922      	ldr	r2, [r4, #16]
 800b6c2:	f003 0306 	and.w	r3, r3, #6
 800b6c6:	2b04      	cmp	r3, #4
 800b6c8:	bf02      	ittt	eq
 800b6ca:	68e5      	ldreq	r5, [r4, #12]
 800b6cc:	6833      	ldreq	r3, [r6, #0]
 800b6ce:	1aed      	subeq	r5, r5, r3
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	bf0c      	ite	eq
 800b6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6d8:	2500      	movne	r5, #0
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	bfc4      	itt	gt
 800b6de:	1a9b      	subgt	r3, r3, r2
 800b6e0:	18ed      	addgt	r5, r5, r3
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	341a      	adds	r4, #26
 800b6e6:	42b5      	cmp	r5, r6
 800b6e8:	d11a      	bne.n	800b720 <_printf_common+0xc8>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e008      	b.n	800b700 <_printf_common+0xa8>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	4641      	mov	r1, r8
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	47c8      	blx	r9
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d103      	bne.n	800b704 <_printf_common+0xac>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b704:	3501      	adds	r5, #1
 800b706:	e7c6      	b.n	800b696 <_printf_common+0x3e>
 800b708:	18e1      	adds	r1, r4, r3
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	2030      	movs	r0, #48	@ 0x30
 800b70e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b712:	4422      	add	r2, r4
 800b714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b71c:	3302      	adds	r3, #2
 800b71e:	e7c7      	b.n	800b6b0 <_printf_common+0x58>
 800b720:	2301      	movs	r3, #1
 800b722:	4622      	mov	r2, r4
 800b724:	4641      	mov	r1, r8
 800b726:	4638      	mov	r0, r7
 800b728:	47c8      	blx	r9
 800b72a:	3001      	adds	r0, #1
 800b72c:	d0e6      	beq.n	800b6fc <_printf_common+0xa4>
 800b72e:	3601      	adds	r6, #1
 800b730:	e7d9      	b.n	800b6e6 <_printf_common+0x8e>
	...

0800b734 <_printf_i>:
 800b734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b738:	7e0f      	ldrb	r7, [r1, #24]
 800b73a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b73c:	2f78      	cmp	r7, #120	@ 0x78
 800b73e:	4691      	mov	r9, r2
 800b740:	4680      	mov	r8, r0
 800b742:	460c      	mov	r4, r1
 800b744:	469a      	mov	sl, r3
 800b746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b74a:	d807      	bhi.n	800b75c <_printf_i+0x28>
 800b74c:	2f62      	cmp	r7, #98	@ 0x62
 800b74e:	d80a      	bhi.n	800b766 <_printf_i+0x32>
 800b750:	2f00      	cmp	r7, #0
 800b752:	f000 80d1 	beq.w	800b8f8 <_printf_i+0x1c4>
 800b756:	2f58      	cmp	r7, #88	@ 0x58
 800b758:	f000 80b8 	beq.w	800b8cc <_printf_i+0x198>
 800b75c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b764:	e03a      	b.n	800b7dc <_printf_i+0xa8>
 800b766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b76a:	2b15      	cmp	r3, #21
 800b76c:	d8f6      	bhi.n	800b75c <_printf_i+0x28>
 800b76e:	a101      	add	r1, pc, #4	@ (adr r1, 800b774 <_printf_i+0x40>)
 800b770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b774:	0800b7cd 	.word	0x0800b7cd
 800b778:	0800b7e1 	.word	0x0800b7e1
 800b77c:	0800b75d 	.word	0x0800b75d
 800b780:	0800b75d 	.word	0x0800b75d
 800b784:	0800b75d 	.word	0x0800b75d
 800b788:	0800b75d 	.word	0x0800b75d
 800b78c:	0800b7e1 	.word	0x0800b7e1
 800b790:	0800b75d 	.word	0x0800b75d
 800b794:	0800b75d 	.word	0x0800b75d
 800b798:	0800b75d 	.word	0x0800b75d
 800b79c:	0800b75d 	.word	0x0800b75d
 800b7a0:	0800b8df 	.word	0x0800b8df
 800b7a4:	0800b80b 	.word	0x0800b80b
 800b7a8:	0800b899 	.word	0x0800b899
 800b7ac:	0800b75d 	.word	0x0800b75d
 800b7b0:	0800b75d 	.word	0x0800b75d
 800b7b4:	0800b901 	.word	0x0800b901
 800b7b8:	0800b75d 	.word	0x0800b75d
 800b7bc:	0800b80b 	.word	0x0800b80b
 800b7c0:	0800b75d 	.word	0x0800b75d
 800b7c4:	0800b75d 	.word	0x0800b75d
 800b7c8:	0800b8a1 	.word	0x0800b8a1
 800b7cc:	6833      	ldr	r3, [r6, #0]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6032      	str	r2, [r6, #0]
 800b7d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e09c      	b.n	800b91a <_printf_i+0x1e6>
 800b7e0:	6833      	ldr	r3, [r6, #0]
 800b7e2:	6820      	ldr	r0, [r4, #0]
 800b7e4:	1d19      	adds	r1, r3, #4
 800b7e6:	6031      	str	r1, [r6, #0]
 800b7e8:	0606      	lsls	r6, r0, #24
 800b7ea:	d501      	bpl.n	800b7f0 <_printf_i+0xbc>
 800b7ec:	681d      	ldr	r5, [r3, #0]
 800b7ee:	e003      	b.n	800b7f8 <_printf_i+0xc4>
 800b7f0:	0645      	lsls	r5, r0, #25
 800b7f2:	d5fb      	bpl.n	800b7ec <_printf_i+0xb8>
 800b7f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7f8:	2d00      	cmp	r5, #0
 800b7fa:	da03      	bge.n	800b804 <_printf_i+0xd0>
 800b7fc:	232d      	movs	r3, #45	@ 0x2d
 800b7fe:	426d      	negs	r5, r5
 800b800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b804:	4858      	ldr	r0, [pc, #352]	@ (800b968 <_printf_i+0x234>)
 800b806:	230a      	movs	r3, #10
 800b808:	e011      	b.n	800b82e <_printf_i+0xfa>
 800b80a:	6821      	ldr	r1, [r4, #0]
 800b80c:	6833      	ldr	r3, [r6, #0]
 800b80e:	0608      	lsls	r0, r1, #24
 800b810:	f853 5b04 	ldr.w	r5, [r3], #4
 800b814:	d402      	bmi.n	800b81c <_printf_i+0xe8>
 800b816:	0649      	lsls	r1, r1, #25
 800b818:	bf48      	it	mi
 800b81a:	b2ad      	uxthmi	r5, r5
 800b81c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b81e:	4852      	ldr	r0, [pc, #328]	@ (800b968 <_printf_i+0x234>)
 800b820:	6033      	str	r3, [r6, #0]
 800b822:	bf14      	ite	ne
 800b824:	230a      	movne	r3, #10
 800b826:	2308      	moveq	r3, #8
 800b828:	2100      	movs	r1, #0
 800b82a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b82e:	6866      	ldr	r6, [r4, #4]
 800b830:	60a6      	str	r6, [r4, #8]
 800b832:	2e00      	cmp	r6, #0
 800b834:	db05      	blt.n	800b842 <_printf_i+0x10e>
 800b836:	6821      	ldr	r1, [r4, #0]
 800b838:	432e      	orrs	r6, r5
 800b83a:	f021 0104 	bic.w	r1, r1, #4
 800b83e:	6021      	str	r1, [r4, #0]
 800b840:	d04b      	beq.n	800b8da <_printf_i+0x1a6>
 800b842:	4616      	mov	r6, r2
 800b844:	fbb5 f1f3 	udiv	r1, r5, r3
 800b848:	fb03 5711 	mls	r7, r3, r1, r5
 800b84c:	5dc7      	ldrb	r7, [r0, r7]
 800b84e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b852:	462f      	mov	r7, r5
 800b854:	42bb      	cmp	r3, r7
 800b856:	460d      	mov	r5, r1
 800b858:	d9f4      	bls.n	800b844 <_printf_i+0x110>
 800b85a:	2b08      	cmp	r3, #8
 800b85c:	d10b      	bne.n	800b876 <_printf_i+0x142>
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	07df      	lsls	r7, r3, #31
 800b862:	d508      	bpl.n	800b876 <_printf_i+0x142>
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	6861      	ldr	r1, [r4, #4]
 800b868:	4299      	cmp	r1, r3
 800b86a:	bfde      	ittt	le
 800b86c:	2330      	movle	r3, #48	@ 0x30
 800b86e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b872:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b876:	1b92      	subs	r2, r2, r6
 800b878:	6122      	str	r2, [r4, #16]
 800b87a:	f8cd a000 	str.w	sl, [sp]
 800b87e:	464b      	mov	r3, r9
 800b880:	aa03      	add	r2, sp, #12
 800b882:	4621      	mov	r1, r4
 800b884:	4640      	mov	r0, r8
 800b886:	f7ff fee7 	bl	800b658 <_printf_common>
 800b88a:	3001      	adds	r0, #1
 800b88c:	d14a      	bne.n	800b924 <_printf_i+0x1f0>
 800b88e:	f04f 30ff 	mov.w	r0, #4294967295
 800b892:	b004      	add	sp, #16
 800b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	f043 0320 	orr.w	r3, r3, #32
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	4832      	ldr	r0, [pc, #200]	@ (800b96c <_printf_i+0x238>)
 800b8a2:	2778      	movs	r7, #120	@ 0x78
 800b8a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	6831      	ldr	r1, [r6, #0]
 800b8ac:	061f      	lsls	r7, r3, #24
 800b8ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8b2:	d402      	bmi.n	800b8ba <_printf_i+0x186>
 800b8b4:	065f      	lsls	r7, r3, #25
 800b8b6:	bf48      	it	mi
 800b8b8:	b2ad      	uxthmi	r5, r5
 800b8ba:	6031      	str	r1, [r6, #0]
 800b8bc:	07d9      	lsls	r1, r3, #31
 800b8be:	bf44      	itt	mi
 800b8c0:	f043 0320 	orrmi.w	r3, r3, #32
 800b8c4:	6023      	strmi	r3, [r4, #0]
 800b8c6:	b11d      	cbz	r5, 800b8d0 <_printf_i+0x19c>
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	e7ad      	b.n	800b828 <_printf_i+0xf4>
 800b8cc:	4826      	ldr	r0, [pc, #152]	@ (800b968 <_printf_i+0x234>)
 800b8ce:	e7e9      	b.n	800b8a4 <_printf_i+0x170>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	f023 0320 	bic.w	r3, r3, #32
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	e7f6      	b.n	800b8c8 <_printf_i+0x194>
 800b8da:	4616      	mov	r6, r2
 800b8dc:	e7bd      	b.n	800b85a <_printf_i+0x126>
 800b8de:	6833      	ldr	r3, [r6, #0]
 800b8e0:	6825      	ldr	r5, [r4, #0]
 800b8e2:	6961      	ldr	r1, [r4, #20]
 800b8e4:	1d18      	adds	r0, r3, #4
 800b8e6:	6030      	str	r0, [r6, #0]
 800b8e8:	062e      	lsls	r6, r5, #24
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	d501      	bpl.n	800b8f2 <_printf_i+0x1be>
 800b8ee:	6019      	str	r1, [r3, #0]
 800b8f0:	e002      	b.n	800b8f8 <_printf_i+0x1c4>
 800b8f2:	0668      	lsls	r0, r5, #25
 800b8f4:	d5fb      	bpl.n	800b8ee <_printf_i+0x1ba>
 800b8f6:	8019      	strh	r1, [r3, #0]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	4616      	mov	r6, r2
 800b8fe:	e7bc      	b.n	800b87a <_printf_i+0x146>
 800b900:	6833      	ldr	r3, [r6, #0]
 800b902:	1d1a      	adds	r2, r3, #4
 800b904:	6032      	str	r2, [r6, #0]
 800b906:	681e      	ldr	r6, [r3, #0]
 800b908:	6862      	ldr	r2, [r4, #4]
 800b90a:	2100      	movs	r1, #0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7f4 fc77 	bl	8000200 <memchr>
 800b912:	b108      	cbz	r0, 800b918 <_printf_i+0x1e4>
 800b914:	1b80      	subs	r0, r0, r6
 800b916:	6060      	str	r0, [r4, #4]
 800b918:	6863      	ldr	r3, [r4, #4]
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	2300      	movs	r3, #0
 800b91e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b922:	e7aa      	b.n	800b87a <_printf_i+0x146>
 800b924:	6923      	ldr	r3, [r4, #16]
 800b926:	4632      	mov	r2, r6
 800b928:	4649      	mov	r1, r9
 800b92a:	4640      	mov	r0, r8
 800b92c:	47d0      	blx	sl
 800b92e:	3001      	adds	r0, #1
 800b930:	d0ad      	beq.n	800b88e <_printf_i+0x15a>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	079b      	lsls	r3, r3, #30
 800b936:	d413      	bmi.n	800b960 <_printf_i+0x22c>
 800b938:	68e0      	ldr	r0, [r4, #12]
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	4298      	cmp	r0, r3
 800b93e:	bfb8      	it	lt
 800b940:	4618      	movlt	r0, r3
 800b942:	e7a6      	b.n	800b892 <_printf_i+0x15e>
 800b944:	2301      	movs	r3, #1
 800b946:	4632      	mov	r2, r6
 800b948:	4649      	mov	r1, r9
 800b94a:	4640      	mov	r0, r8
 800b94c:	47d0      	blx	sl
 800b94e:	3001      	adds	r0, #1
 800b950:	d09d      	beq.n	800b88e <_printf_i+0x15a>
 800b952:	3501      	adds	r5, #1
 800b954:	68e3      	ldr	r3, [r4, #12]
 800b956:	9903      	ldr	r1, [sp, #12]
 800b958:	1a5b      	subs	r3, r3, r1
 800b95a:	42ab      	cmp	r3, r5
 800b95c:	dcf2      	bgt.n	800b944 <_printf_i+0x210>
 800b95e:	e7eb      	b.n	800b938 <_printf_i+0x204>
 800b960:	2500      	movs	r5, #0
 800b962:	f104 0619 	add.w	r6, r4, #25
 800b966:	e7f5      	b.n	800b954 <_printf_i+0x220>
 800b968:	08017189 	.word	0x08017189
 800b96c:	0801719a 	.word	0x0801719a

0800b970 <__sflush_r>:
 800b970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	0716      	lsls	r6, r2, #28
 800b97a:	4605      	mov	r5, r0
 800b97c:	460c      	mov	r4, r1
 800b97e:	d454      	bmi.n	800ba2a <__sflush_r+0xba>
 800b980:	684b      	ldr	r3, [r1, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	dc02      	bgt.n	800b98c <__sflush_r+0x1c>
 800b986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	dd48      	ble.n	800ba1e <__sflush_r+0xae>
 800b98c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b98e:	2e00      	cmp	r6, #0
 800b990:	d045      	beq.n	800ba1e <__sflush_r+0xae>
 800b992:	2300      	movs	r3, #0
 800b994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b998:	682f      	ldr	r7, [r5, #0]
 800b99a:	6a21      	ldr	r1, [r4, #32]
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	d030      	beq.n	800ba02 <__sflush_r+0x92>
 800b9a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	0759      	lsls	r1, r3, #29
 800b9a6:	d505      	bpl.n	800b9b4 <__sflush_r+0x44>
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9ae:	b10b      	cbz	r3, 800b9b4 <__sflush_r+0x44>
 800b9b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9b2:	1ad2      	subs	r2, r2, r3
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9b8:	6a21      	ldr	r1, [r4, #32]
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	47b0      	blx	r6
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	d106      	bne.n	800b9d2 <__sflush_r+0x62>
 800b9c4:	6829      	ldr	r1, [r5, #0]
 800b9c6:	291d      	cmp	r1, #29
 800b9c8:	d82b      	bhi.n	800ba22 <__sflush_r+0xb2>
 800b9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800ba74 <__sflush_r+0x104>)
 800b9cc:	40ca      	lsrs	r2, r1
 800b9ce:	07d6      	lsls	r6, r2, #31
 800b9d0:	d527      	bpl.n	800ba22 <__sflush_r+0xb2>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	6062      	str	r2, [r4, #4]
 800b9d6:	04d9      	lsls	r1, r3, #19
 800b9d8:	6922      	ldr	r2, [r4, #16]
 800b9da:	6022      	str	r2, [r4, #0]
 800b9dc:	d504      	bpl.n	800b9e8 <__sflush_r+0x78>
 800b9de:	1c42      	adds	r2, r0, #1
 800b9e0:	d101      	bne.n	800b9e6 <__sflush_r+0x76>
 800b9e2:	682b      	ldr	r3, [r5, #0]
 800b9e4:	b903      	cbnz	r3, 800b9e8 <__sflush_r+0x78>
 800b9e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b9e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9ea:	602f      	str	r7, [r5, #0]
 800b9ec:	b1b9      	cbz	r1, 800ba1e <__sflush_r+0xae>
 800b9ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9f2:	4299      	cmp	r1, r3
 800b9f4:	d002      	beq.n	800b9fc <__sflush_r+0x8c>
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f7ff fca2 	bl	800b340 <_free_r>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba00:	e00d      	b.n	800ba1e <__sflush_r+0xae>
 800ba02:	2301      	movs	r3, #1
 800ba04:	4628      	mov	r0, r5
 800ba06:	47b0      	blx	r6
 800ba08:	4602      	mov	r2, r0
 800ba0a:	1c50      	adds	r0, r2, #1
 800ba0c:	d1c9      	bne.n	800b9a2 <__sflush_r+0x32>
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0c6      	beq.n	800b9a2 <__sflush_r+0x32>
 800ba14:	2b1d      	cmp	r3, #29
 800ba16:	d001      	beq.n	800ba1c <__sflush_r+0xac>
 800ba18:	2b16      	cmp	r3, #22
 800ba1a:	d11e      	bne.n	800ba5a <__sflush_r+0xea>
 800ba1c:	602f      	str	r7, [r5, #0]
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e022      	b.n	800ba68 <__sflush_r+0xf8>
 800ba22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba26:	b21b      	sxth	r3, r3
 800ba28:	e01b      	b.n	800ba62 <__sflush_r+0xf2>
 800ba2a:	690f      	ldr	r7, [r1, #16]
 800ba2c:	2f00      	cmp	r7, #0
 800ba2e:	d0f6      	beq.n	800ba1e <__sflush_r+0xae>
 800ba30:	0793      	lsls	r3, r2, #30
 800ba32:	680e      	ldr	r6, [r1, #0]
 800ba34:	bf08      	it	eq
 800ba36:	694b      	ldreq	r3, [r1, #20]
 800ba38:	600f      	str	r7, [r1, #0]
 800ba3a:	bf18      	it	ne
 800ba3c:	2300      	movne	r3, #0
 800ba3e:	eba6 0807 	sub.w	r8, r6, r7
 800ba42:	608b      	str	r3, [r1, #8]
 800ba44:	f1b8 0f00 	cmp.w	r8, #0
 800ba48:	dde9      	ble.n	800ba1e <__sflush_r+0xae>
 800ba4a:	6a21      	ldr	r1, [r4, #32]
 800ba4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba4e:	4643      	mov	r3, r8
 800ba50:	463a      	mov	r2, r7
 800ba52:	4628      	mov	r0, r5
 800ba54:	47b0      	blx	r6
 800ba56:	2800      	cmp	r0, #0
 800ba58:	dc08      	bgt.n	800ba6c <__sflush_r+0xfc>
 800ba5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	4407      	add	r7, r0
 800ba6e:	eba8 0800 	sub.w	r8, r8, r0
 800ba72:	e7e7      	b.n	800ba44 <__sflush_r+0xd4>
 800ba74:	20400001 	.word	0x20400001

0800ba78 <_fflush_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	690b      	ldr	r3, [r1, #16]
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	460c      	mov	r4, r1
 800ba80:	b913      	cbnz	r3, 800ba88 <_fflush_r+0x10>
 800ba82:	2500      	movs	r5, #0
 800ba84:	4628      	mov	r0, r5
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	b118      	cbz	r0, 800ba92 <_fflush_r+0x1a>
 800ba8a:	6a03      	ldr	r3, [r0, #32]
 800ba8c:	b90b      	cbnz	r3, 800ba92 <_fflush_r+0x1a>
 800ba8e:	f7ff fa4d 	bl	800af2c <__sinit>
 800ba92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0f3      	beq.n	800ba82 <_fflush_r+0xa>
 800ba9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba9c:	07d0      	lsls	r0, r2, #31
 800ba9e:	d404      	bmi.n	800baaa <_fflush_r+0x32>
 800baa0:	0599      	lsls	r1, r3, #22
 800baa2:	d402      	bmi.n	800baaa <_fflush_r+0x32>
 800baa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baa6:	f7ff fc48 	bl	800b33a <__retarget_lock_acquire_recursive>
 800baaa:	4628      	mov	r0, r5
 800baac:	4621      	mov	r1, r4
 800baae:	f7ff ff5f 	bl	800b970 <__sflush_r>
 800bab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bab4:	07da      	lsls	r2, r3, #31
 800bab6:	4605      	mov	r5, r0
 800bab8:	d4e4      	bmi.n	800ba84 <_fflush_r+0xc>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	059b      	lsls	r3, r3, #22
 800babe:	d4e1      	bmi.n	800ba84 <_fflush_r+0xc>
 800bac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bac2:	f7ff fc3b 	bl	800b33c <__retarget_lock_release_recursive>
 800bac6:	e7dd      	b.n	800ba84 <_fflush_r+0xc>

0800bac8 <__swhatbuf_r>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	460c      	mov	r4, r1
 800bacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad0:	2900      	cmp	r1, #0
 800bad2:	b096      	sub	sp, #88	@ 0x58
 800bad4:	4615      	mov	r5, r2
 800bad6:	461e      	mov	r6, r3
 800bad8:	da0d      	bge.n	800baf6 <__swhatbuf_r+0x2e>
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bae0:	f04f 0100 	mov.w	r1, #0
 800bae4:	bf14      	ite	ne
 800bae6:	2340      	movne	r3, #64	@ 0x40
 800bae8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800baec:	2000      	movs	r0, #0
 800baee:	6031      	str	r1, [r6, #0]
 800baf0:	602b      	str	r3, [r5, #0]
 800baf2:	b016      	add	sp, #88	@ 0x58
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
 800baf6:	466a      	mov	r2, sp
 800baf8:	f000 f848 	bl	800bb8c <_fstat_r>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	dbec      	blt.n	800bada <__swhatbuf_r+0x12>
 800bb00:	9901      	ldr	r1, [sp, #4]
 800bb02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb0a:	4259      	negs	r1, r3
 800bb0c:	4159      	adcs	r1, r3
 800bb0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb12:	e7eb      	b.n	800baec <__swhatbuf_r+0x24>

0800bb14 <__smakebuf_r>:
 800bb14:	898b      	ldrh	r3, [r1, #12]
 800bb16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb18:	079d      	lsls	r5, r3, #30
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	d507      	bpl.n	800bb30 <__smakebuf_r+0x1c>
 800bb20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	6123      	str	r3, [r4, #16]
 800bb28:	2301      	movs	r3, #1
 800bb2a:	6163      	str	r3, [r4, #20]
 800bb2c:	b003      	add	sp, #12
 800bb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb30:	ab01      	add	r3, sp, #4
 800bb32:	466a      	mov	r2, sp
 800bb34:	f7ff ffc8 	bl	800bac8 <__swhatbuf_r>
 800bb38:	9f00      	ldr	r7, [sp, #0]
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7ff f8dc 	bl	800acfc <_malloc_r>
 800bb44:	b948      	cbnz	r0, 800bb5a <__smakebuf_r+0x46>
 800bb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb4a:	059a      	lsls	r2, r3, #22
 800bb4c:	d4ee      	bmi.n	800bb2c <__smakebuf_r+0x18>
 800bb4e:	f023 0303 	bic.w	r3, r3, #3
 800bb52:	f043 0302 	orr.w	r3, r3, #2
 800bb56:	81a3      	strh	r3, [r4, #12]
 800bb58:	e7e2      	b.n	800bb20 <__smakebuf_r+0xc>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	6020      	str	r0, [r4, #0]
 800bb5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb62:	81a3      	strh	r3, [r4, #12]
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb6a:	b15b      	cbz	r3, 800bb84 <__smakebuf_r+0x70>
 800bb6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb70:	4630      	mov	r0, r6
 800bb72:	f000 f81d 	bl	800bbb0 <_isatty_r>
 800bb76:	b128      	cbz	r0, 800bb84 <__smakebuf_r+0x70>
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	f043 0301 	orr.w	r3, r3, #1
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	431d      	orrs	r5, r3
 800bb88:	81a5      	strh	r5, [r4, #12]
 800bb8a:	e7cf      	b.n	800bb2c <__smakebuf_r+0x18>

0800bb8c <_fstat_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	@ (800bbac <_fstat_r+0x20>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	f000 f955 	bl	800be48 <_fstat>
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	d102      	bne.n	800bba8 <_fstat_r+0x1c>
 800bba2:	682b      	ldr	r3, [r5, #0]
 800bba4:	b103      	cbz	r3, 800bba8 <_fstat_r+0x1c>
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	200016d0 	.word	0x200016d0

0800bbb0 <_isatty_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d06      	ldr	r5, [pc, #24]	@ (800bbcc <_isatty_r+0x1c>)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f000 f94c 	bl	800be58 <_isatty>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_isatty_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_isatty_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	200016d0 	.word	0x200016d0

0800bbd0 <expf>:
 800bbd0:	b508      	push	{r3, lr}
 800bbd2:	ed2d 8b02 	vpush	{d8}
 800bbd6:	eef0 8a40 	vmov.f32	s17, s0
 800bbda:	f000 f85f 	bl	800bc9c <__ieee754_expf>
 800bbde:	eeb0 8a40 	vmov.f32	s16, s0
 800bbe2:	eeb0 0a68 	vmov.f32	s0, s17
 800bbe6:	f000 f829 	bl	800bc3c <finitef>
 800bbea:	b160      	cbz	r0, 800bc06 <expf+0x36>
 800bbec:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800bc2c <expf+0x5c>
 800bbf0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf8:	dd0a      	ble.n	800bc10 <expf+0x40>
 800bbfa:	f7ff fb73 	bl	800b2e4 <__errno>
 800bbfe:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800bc30 <expf+0x60>
 800bc02:	2322      	movs	r3, #34	@ 0x22
 800bc04:	6003      	str	r3, [r0, #0]
 800bc06:	eeb0 0a48 	vmov.f32	s0, s16
 800bc0a:	ecbd 8b02 	vpop	{d8}
 800bc0e:	bd08      	pop	{r3, pc}
 800bc10:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bc34 <expf+0x64>
 800bc14:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1c:	d5f3      	bpl.n	800bc06 <expf+0x36>
 800bc1e:	f7ff fb61 	bl	800b2e4 <__errno>
 800bc22:	2322      	movs	r3, #34	@ 0x22
 800bc24:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800bc38 <expf+0x68>
 800bc28:	6003      	str	r3, [r0, #0]
 800bc2a:	e7ec      	b.n	800bc06 <expf+0x36>
 800bc2c:	42b17217 	.word	0x42b17217
 800bc30:	7f800000 	.word	0x7f800000
 800bc34:	c2cff1b5 	.word	0xc2cff1b5
 800bc38:	00000000 	.word	0x00000000

0800bc3c <finitef>:
 800bc3c:	ee10 3a10 	vmov	r3, s0
 800bc40:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bc44:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bc48:	bfac      	ite	ge
 800bc4a:	2000      	movge	r0, #0
 800bc4c:	2001      	movlt	r0, #1
 800bc4e:	4770      	bx	lr

0800bc50 <with_errnof>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	ed2d 8b02 	vpush	{d8}
 800bc56:	eeb0 8a40 	vmov.f32	s16, s0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	f7ff fb42 	bl	800b2e4 <__errno>
 800bc60:	eeb0 0a48 	vmov.f32	s0, s16
 800bc64:	ecbd 8b02 	vpop	{d8}
 800bc68:	6004      	str	r4, [r0, #0]
 800bc6a:	bd10      	pop	{r4, pc}

0800bc6c <xflowf>:
 800bc6c:	b130      	cbz	r0, 800bc7c <xflowf+0x10>
 800bc6e:	eef1 7a40 	vneg.f32	s15, s0
 800bc72:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc76:	2022      	movs	r0, #34	@ 0x22
 800bc78:	f7ff bfea 	b.w	800bc50 <with_errnof>
 800bc7c:	eef0 7a40 	vmov.f32	s15, s0
 800bc80:	e7f7      	b.n	800bc72 <xflowf+0x6>
	...

0800bc84 <__math_uflowf>:
 800bc84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc8c <__math_uflowf+0x8>
 800bc88:	f7ff bff0 	b.w	800bc6c <xflowf>
 800bc8c:	10000000 	.word	0x10000000

0800bc90 <__math_oflowf>:
 800bc90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc98 <__math_oflowf+0x8>
 800bc94:	f7ff bfea 	b.w	800bc6c <xflowf>
 800bc98:	70000000 	.word	0x70000000

0800bc9c <__ieee754_expf>:
 800bc9c:	ee10 2a10 	vmov	r2, s0
 800bca0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800bca4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bca8:	d902      	bls.n	800bcb0 <__ieee754_expf+0x14>
 800bcaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bcae:	4770      	bx	lr
 800bcb0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800bcb4:	d106      	bne.n	800bcc4 <__ieee754_expf+0x28>
 800bcb6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800bdf0 <__ieee754_expf+0x154>
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	bf18      	it	ne
 800bcbe:	eeb0 0a67 	vmovne.f32	s0, s15
 800bcc2:	4770      	bx	lr
 800bcc4:	484b      	ldr	r0, [pc, #300]	@ (800bdf4 <__ieee754_expf+0x158>)
 800bcc6:	4282      	cmp	r2, r0
 800bcc8:	dd02      	ble.n	800bcd0 <__ieee754_expf+0x34>
 800bcca:	2000      	movs	r0, #0
 800bccc:	f7ff bfe0 	b.w	800bc90 <__math_oflowf>
 800bcd0:	2a00      	cmp	r2, #0
 800bcd2:	da05      	bge.n	800bce0 <__ieee754_expf+0x44>
 800bcd4:	4a48      	ldr	r2, [pc, #288]	@ (800bdf8 <__ieee754_expf+0x15c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d902      	bls.n	800bce0 <__ieee754_expf+0x44>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	f7ff bfd2 	b.w	800bc84 <__math_uflowf>
 800bce0:	4a46      	ldr	r2, [pc, #280]	@ (800bdfc <__ieee754_expf+0x160>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800bce8:	d952      	bls.n	800bd90 <__ieee754_expf+0xf4>
 800bcea:	4a45      	ldr	r2, [pc, #276]	@ (800be00 <__ieee754_expf+0x164>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800bcf2:	d834      	bhi.n	800bd5e <__ieee754_expf+0xc2>
 800bcf4:	4b43      	ldr	r3, [pc, #268]	@ (800be04 <__ieee754_expf+0x168>)
 800bcf6:	4413      	add	r3, r2
 800bcf8:	ed93 7a00 	vldr	s14, [r3]
 800bcfc:	4b42      	ldr	r3, [pc, #264]	@ (800be08 <__ieee754_expf+0x16c>)
 800bcfe:	4413      	add	r3, r2
 800bd00:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bd04:	f081 0201 	eor.w	r2, r1, #1
 800bd08:	edd3 7a00 	vldr	s15, [r3]
 800bd0c:	1a52      	subs	r2, r2, r1
 800bd0e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bd12:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bd16:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800be0c <__ieee754_expf+0x170>
 800bd1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800be10 <__ieee754_expf+0x174>
 800bd1e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800bd22:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800be14 <__ieee754_expf+0x178>
 800bd26:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bd2a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800be18 <__ieee754_expf+0x17c>
 800bd2e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bd32:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800be1c <__ieee754_expf+0x180>
 800bd36:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bd3a:	eef0 6a40 	vmov.f32	s13, s0
 800bd3e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bd42:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800bd46:	ee20 5a26 	vmul.f32	s10, s0, s13
 800bd4a:	bb92      	cbnz	r2, 800bdb2 <__ieee754_expf+0x116>
 800bd4c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bd50:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bd54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bd58:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800bd5c:	4770      	bx	lr
 800bd5e:	4b30      	ldr	r3, [pc, #192]	@ (800be20 <__ieee754_expf+0x184>)
 800bd60:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800be24 <__ieee754_expf+0x188>
 800bd64:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800be28 <__ieee754_expf+0x18c>
 800bd68:	4413      	add	r3, r2
 800bd6a:	edd3 7a00 	vldr	s15, [r3]
 800bd6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bd72:	eeb0 7a40 	vmov.f32	s14, s0
 800bd76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd7a:	ee17 2a90 	vmov	r2, s15
 800bd7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd82:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bd86:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800be2c <__ieee754_expf+0x190>
 800bd8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd8e:	e7be      	b.n	800bd0e <__ieee754_expf+0x72>
 800bd90:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800bd94:	d20b      	bcs.n	800bdae <__ieee754_expf+0x112>
 800bd96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800be30 <__ieee754_expf+0x194>
 800bd9a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bd9e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	dd02      	ble.n	800bdae <__ieee754_expf+0x112>
 800bda8:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bdac:	4770      	bx	lr
 800bdae:	2200      	movs	r2, #0
 800bdb0:	e7af      	b.n	800bd12 <__ieee754_expf+0x76>
 800bdb2:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bdb6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800bdba:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800bdbe:	bfb8      	it	lt
 800bdc0:	3264      	addlt	r2, #100	@ 0x64
 800bdc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdca:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bdce:	ee17 3a90 	vmov	r3, s15
 800bdd2:	bfab      	itete	ge
 800bdd4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bdd8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bddc:	ee00 3a10 	vmovge	s0, r3
 800bde0:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800be34 <__ieee754_expf+0x198>
 800bde4:	bfbc      	itt	lt
 800bde6:	ee00 3a10 	vmovlt	s0, r3
 800bdea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bdee:	4770      	bx	lr
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	42b17217 	.word	0x42b17217
 800bdf8:	42cff1b5 	.word	0x42cff1b5
 800bdfc:	3eb17218 	.word	0x3eb17218
 800be00:	3f851591 	.word	0x3f851591
 800be04:	080171b4 	.word	0x080171b4
 800be08:	080171ac 	.word	0x080171ac
 800be0c:	3331bb4c 	.word	0x3331bb4c
 800be10:	b5ddea0e 	.word	0xb5ddea0e
 800be14:	388ab355 	.word	0x388ab355
 800be18:	bb360b61 	.word	0xbb360b61
 800be1c:	3e2aaaab 	.word	0x3e2aaaab
 800be20:	080171bc 	.word	0x080171bc
 800be24:	3fb8aa3b 	.word	0x3fb8aa3b
 800be28:	3f317180 	.word	0x3f317180
 800be2c:	3717f7d1 	.word	0x3717f7d1
 800be30:	7149f2ca 	.word	0x7149f2ca
 800be34:	0d800000 	.word	0x0d800000

0800be38 <_close>:
 800be38:	4b02      	ldr	r3, [pc, #8]	@ (800be44 <_close+0xc>)
 800be3a:	2258      	movs	r2, #88	@ 0x58
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	f04f 30ff 	mov.w	r0, #4294967295
 800be42:	4770      	bx	lr
 800be44:	200016d0 	.word	0x200016d0

0800be48 <_fstat>:
 800be48:	4b02      	ldr	r3, [pc, #8]	@ (800be54 <_fstat+0xc>)
 800be4a:	2258      	movs	r2, #88	@ 0x58
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	4770      	bx	lr
 800be54:	200016d0 	.word	0x200016d0

0800be58 <_isatty>:
 800be58:	4b02      	ldr	r3, [pc, #8]	@ (800be64 <_isatty+0xc>)
 800be5a:	2258      	movs	r2, #88	@ 0x58
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	2000      	movs	r0, #0
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	200016d0 	.word	0x200016d0

0800be68 <_lseek>:
 800be68:	4b02      	ldr	r3, [pc, #8]	@ (800be74 <_lseek+0xc>)
 800be6a:	2258      	movs	r2, #88	@ 0x58
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	4770      	bx	lr
 800be74:	200016d0 	.word	0x200016d0

0800be78 <_read>:
 800be78:	4b02      	ldr	r3, [pc, #8]	@ (800be84 <_read+0xc>)
 800be7a:	2258      	movs	r2, #88	@ 0x58
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	f04f 30ff 	mov.w	r0, #4294967295
 800be82:	4770      	bx	lr
 800be84:	200016d0 	.word	0x200016d0

0800be88 <_write>:
 800be88:	4b02      	ldr	r3, [pc, #8]	@ (800be94 <_write+0xc>)
 800be8a:	2258      	movs	r2, #88	@ 0x58
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	4770      	bx	lr
 800be94:	200016d0 	.word	0x200016d0

0800be98 <_init>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	bf00      	nop
 800be9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be9e:	bc08      	pop	{r3}
 800bea0:	469e      	mov	lr, r3
 800bea2:	4770      	bx	lr

0800bea4 <_fini>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	bf00      	nop
 800bea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beaa:	bc08      	pop	{r3}
 800beac:	469e      	mov	lr, r3
 800beae:	4770      	bx	lr
